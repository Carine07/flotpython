1
00:00:04,158 --> 00:00:05,482
Il est courant en data science

2
00:00:05,582 --> 00:00:07,006
de devoir manipuler des dates

3
00:00:07,106 --> 00:00:09,012
et en particulier des séries temporelles.

4
00:00:09,168 --> 00:00:10,489
Nous allons voir dans cette vidéo

5
00:00:10,589 --> 00:00:11,584
la gestion des dates

6
00:00:11,684 --> 00:00:12,701
et des séries temporelles

7
00:00:12,801 --> 00:00:14,084
en NumPy et pandas.

8
00:00:14,492 --> 00:00:15,766
Ouvrons maintenant un notebook

9
00:00:15,866 --> 00:00:16,814
pour commencer à jouer

10
00:00:16,914 --> 00:00:17,699
avec ces notions.

11
00:00:18,582 --> 00:00:20,642
NumPy a deux types pour gérer les dates,

12
00:00:20,742 --> 00:00:23,160
un type qui s'appelle datetime64

13
00:00:23,260 --> 00:00:24,799
pour gérer spécifiquement les dates,

14
00:00:24,899 --> 00:00:27,602
et un type qui s'appelle timedelta64

15
00:00:27,702 --> 00:00:29,197
qui est pour gérer les intervalles de temps.

16
00:00:30,052 --> 00:00:32,591
Ces deux objets sont codés sur 64 bits

17
00:00:32,691 --> 00:00:34,076
avec un codage qui est très malin.

18
00:00:34,176 --> 00:00:36,650
En fait, on peut spécifier à NumPy

19
00:00:36,750 --> 00:00:38,747
la résolution temporelle que l'on veut avoir,

20
00:00:38,847 --> 00:00:40,481
par exemple, la seconde, la milliseconde,

21
00:00:40,581 --> 00:00:41,582
l'année, le jour,

22
00:00:41,955 --> 00:00:44,818
et l'encodage va automatiquement s'adapter

23
00:00:44,918 --> 00:00:46,158
à la contrainte de 64 bits

24
00:00:46,258 --> 00:00:48,263
pour coder le maximum de dates possible.

25
00:00:48,634 --> 00:00:50,485
Pour vous donner un exemple de cela,

26
00:00:50,585 --> 00:00:51,773
si nous choisissons

27
00:00:51,873 --> 00:00:53,264
la résolution de la nanoseconde,

28
00:00:53,364 --> 00:00:54,424
une résolution très faible,

29
00:00:54,846 --> 00:00:56,766
on est capable de coder toutes les dates

30
00:00:56,866 --> 00:01:00,195
allant de 1678 à 2262.

31
00:01:01,083 --> 00:01:02,143
Si on a besoin

32
00:01:02,243 --> 00:01:04,470
d'un plus vaste éventail de dates

33
00:01:04,570 --> 00:01:05,625
on peut prendre par exemple

34
00:01:05,725 --> 00:01:07,329
la résolution de la milliseconde

35
00:01:07,429 --> 00:01:09,187
qui permet de codes des dates

36
00:01:09,287 --> 00:01:11,037
couvrant 600 millions d'années.

37
00:01:11,551 --> 00:01:12,483
Donc on voit que c'est un codage

38
00:01:12,583 --> 00:01:13,563
extrêmement flexible

39
00:01:13,663 --> 00:01:16,186
qui permet une grande facilité d'utilisation.

40
00:01:17,578 --> 00:01:18,729
Maintenant, on va voir comment

41
00:01:18,829 --> 00:01:19,715
est-ce qu'on peut créer un objet

42
00:01:19,815 --> 00:01:21,530
datetime64.

43
00:01:21,630 --> 00:01:22,412
Donc pour cela,

44
00:01:22,917 --> 00:01:31,229
on va appeler la fonction datetime64

45
00:01:31,329 --> 00:01:33,301
et on va lui passer une date

46
00:01:33,401 --> 00:01:35,435
qui doit être dans un format particulier,

47
00:01:35,535 --> 00:01:37,801
le format ISO 8601.

48
00:01:38,181 --> 00:01:39,600
On ne va pas rentrer dans le détail de ce format,

49
00:01:39,700 --> 00:01:40,996
je vais juste vous donner quelques exemples.

50
00:01:41,356 --> 00:01:43,156
Ici, on va l'écrire de la manière suivante :

51
00:01:43,256 --> 00:01:46,619
2018 juin 30.

52
00:01:46,719 --> 00:01:48,099
Ça s'écrit comme ça,

53
00:01:48,541 --> 00:01:52,364
donc ici, j'ai donné la date qui correspond

54
00:01:52,464 --> 00:01:53,892
au 30 juin 2018.

55
00:01:54,423 --> 00:01:55,408
J'exécute cela

56
00:01:55,508 --> 00:01:59,024
et j'ai donc créé un objet datetime64

57
00:01:59,328 --> 00:02:00,861
qui correspond au 30 juin 2018.

58
00:02:01,309 --> 00:02:02,982
Maintenant, je peux évidemment également

59
00:02:03,082 --> 00:02:04,179
spécifier une heure.

60
00:02:05,298 --> 00:02:08,066
Donc je vais spécifier l'heure de la manière suivante :

61
00:02:08,166 --> 00:02:08,943
je vais dire par exemple

62
00:02:09,043 --> 00:02:12,825
8 heures 35 minutes 23 secondes.

63
00:02:13,304 --> 00:02:14,182
Je l'exécute

64
00:02:14,282 --> 00:02:15,272
et j'ai créé mon nouvel objet

65
00:02:15,372 --> 00:02:16,462
en prenant en compte l'heure.

66
00:02:16,877 --> 00:02:18,994
Et pour finir, je peux également spécifier

67
00:02:19,353 --> 00:02:20,541
la granularité,

68
00:02:21,019 --> 00:02:22,293
dont j'ai parlé tout à l'heure,

69
00:02:22,393 --> 00:02:23,472
donc ici, je peux dire par exemple :

70
00:02:23,797 --> 00:02:25,341
je vais prendre comme granularité

71
00:02:25,441 --> 00:02:26,534
la nanoseconde

72
00:02:26,773 --> 00:02:28,392
et donc maintenant, j'ai créé mon nouvel objet

73
00:02:28,492 --> 00:02:30,661
avec la granularité qui est de la nanoseconde.

74
00:02:31,581 --> 00:02:32,748
Pour finir, je vais vous montrer

75
00:02:32,848 --> 00:02:34,613
une manière de créer des objets

76
00:02:35,221 --> 00:02:36,697
timedelta64.

77
00:02:36,797 --> 00:02:38,561
En fait, un objet timedelta64

78
00:02:38,661 --> 00:02:39,910
s'obtient automatiquement

79
00:02:40,010 --> 00:02:41,676
lorsque l'on va faire des opérations,

80
00:02:41,776 --> 00:02:42,911
de différence par exemple,

81
00:02:43,011 --> 00:02:44,042
entre deux dates.

82
00:02:44,409 --> 00:02:45,693
Ici, je vais faire une opération

83
00:02:45,793 --> 00:02:49,197
entre le 30 et le 20 juin

84
00:02:49,568 --> 00:02:51,271
à 8h37.

85
00:02:52,234 --> 00:02:53,949
J'exécute cela

86
00:02:54,049 --> 00:02:55,730
et j'obtiens donc automatiquement

87
00:02:55,830 --> 00:02:56,904
un objet timedelta

88
00:02:57,004 --> 00:02:58,161
qui va me donner la différence,

89
00:02:58,261 --> 00:02:59,581
dans ce cas-là en secondes,

90
00:02:59,681 --> 00:03:00,723
entre ces deux dates.

91
00:03:01,904 --> 00:03:04,067
En pratique, on ne manipule pas directement

92
00:03:04,167 --> 00:03:07,838
des types datetime64 ou timedelta64

93
00:03:07,938 --> 00:03:09,468
lorsque l'on fait de la data science.

94
00:03:09,668 --> 00:03:11,504
On utilise plutôt les types natifs

95
00:03:11,604 --> 00:03:12,650
fournis par pandas.

96
00:03:12,959 --> 00:03:14,971
pandas fournit trois types d'objets

97
00:03:15,071 --> 00:03:16,173
pour manipuler les dates.

98
00:03:16,482 --> 00:03:18,422
Ce sont les objets timestamp,

99
00:03:18,522 --> 00:03:20,185
pour manipuler des dates,

100
00:03:20,409 --> 00:03:21,015
period,

101
00:03:21,115 --> 00:03:23,050
pour manipuler une date associée à une durée,

102
00:03:23,150 --> 00:03:24,424
par exemple, le 1er juin

103
00:03:24,524 --> 00:03:26,384
et une semaine après le 1er juin,

104
00:03:26,484 --> 00:03:27,489
ou alors timedelta

105
00:03:27,589 --> 00:03:29,812
pour manipuler des intervalles

106
00:03:29,912 --> 00:03:30,744
entre deux dates.

107
00:03:31,733 --> 00:03:34,904
Ces types pandas ont deux avantages majeurs.

108
00:03:35,273 --> 00:03:36,269
Le premier avantage,

109
00:03:36,369 --> 00:03:37,809
c'est qu'ils permettent un parsing des dates

110
00:03:37,909 --> 00:03:39,146
beaucoup plus flexible

111
00:03:39,246 --> 00:03:41,954
que la contrainte de l'ISO 8601

112
00:03:42,054 --> 00:03:42,865
que l'on a en NumPy.

113
00:03:43,260 --> 00:03:44,290
Un deuxième avantage,

114
00:03:44,390 --> 00:03:45,159
c'est qu'on peut créer

115
00:03:45,259 --> 00:03:46,806
à partir de ces objets des index.

116
00:03:47,109 --> 00:03:49,034
C'est ce que nous allons voir dans la suite.

117
00:03:49,251 --> 00:03:50,762
Dans la suite, je vais uniquement parler

118
00:03:50,862 --> 00:03:52,094
de l'objet timestamp

119
00:03:52,194 --> 00:03:53,393
et de son index associé

120
00:03:53,493 --> 00:03:55,755
qui s'appelle datetimeIndex.

121
00:03:56,554 --> 00:03:58,521
Vous noterez que datetimeIndex

122
00:03:58,621 --> 00:04:00,008
a peut-être un nom qui n'est pas très bien choisi,

123
00:04:00,108 --> 00:04:01,583
on aurait préféré avoir un objet

124
00:04:01,683 --> 00:04:02,919
qui s'appelle timestampIndex,

125
00:04:03,019 --> 00:04:04,595
ça fait partie des petites inconsistances

126
00:04:04,695 --> 00:04:05,851
que l'on peut trouver en pandas.

127
00:04:06,213 --> 00:04:07,812
De nouveau, timestamp,

128
00:04:07,912 --> 00:04:08,962
c'est l'objet qui gère les dates,

129
00:04:09,322 --> 00:04:10,450
et datetimeIndex,

130
00:04:10,550 --> 00:04:11,896
c'est l'index que l'on construit

131
00:04:11,996 --> 00:04:13,027
à partir des timestamps.

132
00:04:13,388 --> 00:04:14,814
En pandas, vous avez une fonction

133
00:04:14,914 --> 00:04:15,777
qui est un petit peu magique,

134
00:04:15,877 --> 00:04:17,292
qui s'appelle to_datetime.

135
00:04:17,706 --> 00:04:19,272
Cette fonction to_datetime,

136
00:04:19,372 --> 00:04:20,709
lorsqu'on lui passe une date,

137
00:04:20,809 --> 00:04:21,974
est capable de la parser

138
00:04:22,074 --> 00:04:23,836
à peu près quel que soit son format,

139
00:04:23,936 --> 00:04:25,579
et de fournir un objet timestamp,

140
00:04:25,804 --> 00:04:27,927
ou alors, si on lui passe une séquence de dates,

141
00:04:28,027 --> 00:04:28,942
elle est capable de produire

142
00:04:29,042 --> 00:04:30,330
un index automatiquement.

143
00:04:30,430 --> 00:04:31,563
Regardons un exemple.

144
00:04:33,107 --> 00:04:37,184
Donc je vais prendre to_datetime

145
00:04:37,537 --> 00:04:39,122
et je vais lui passer une date

146
00:04:39,222 --> 00:04:40,157
dans un format

147
00:04:40,257 --> 00:04:41,353
qui n'est pas du tout un format ISO,

148
00:04:41,453 --> 00:04:42,522
qui est un format standard,

149
00:04:42,868 --> 00:04:44,337
10 juin

150
00:04:44,437 --> 00:04:45,692
alors évidemment, il faut le donner en anglais

151
00:04:46,242 --> 00:04:48,490
10 june 1973

152
00:04:48,590 --> 00:04:49,772
à 8h30.

153
00:04:49,872 --> 00:04:50,952
Donc ici, je n'ai pas les :,

154
00:04:51,052 --> 00:04:54,109
j'ai un format très classique.

155
00:04:54,298 --> 00:04:55,876
Et donc ici, il a bien été capable

156
00:04:55,976 --> 00:04:57,282
de créer un objet timestamp

157
00:04:57,382 --> 00:04:59,409
en parsant correctement cette date.

158
00:04:59,888 --> 00:05:01,195
Maintenant,

159
00:05:01,295 --> 00:05:03,902
si à to_datetime, je lui passe

160
00:05:04,002 --> 00:05:04,994
non plus une date,

161
00:05:05,094 --> 00:05:06,686
mais une séquence de dates,

162
00:05:06,786 --> 00:05:07,367
nous allons voir

163
00:05:07,467 --> 00:05:08,811
qu'il va créer automatiquement

164
00:05:08,911 --> 00:05:11,626
un objet datetimeIndex.

165
00:05:11,726 --> 00:05:13,492
Regardons cet exemple.

166
00:05:13,592 --> 00:05:16,262
Ici, je passe mon 10 juin à 8h30

167
00:05:16,362 --> 00:05:17,842
et je vais lui passer un autre format,

168
00:05:18,322 --> 00:05:24,887
22-JUNE-1973.

169
00:05:24,987 --> 00:05:26,402
Donc, je vois que les deux formats

170
00:05:26,502 --> 00:05:27,611
sont complètement différents.

171
00:05:28,378 --> 00:05:30,069
Alors, j'ai une mauvaise syntaxe

172
00:05:30,169 --> 00:05:32,699
parce que j'ai rajouté une parenthèse

173
00:05:32,799 --> 00:05:33,669
là où il n'en fallait pas.

174
00:05:34,100 --> 00:05:35,633
Je réexécute et on voit que

175
00:05:35,733 --> 00:05:37,362
malgré ces formats très différents

176
00:05:37,778 --> 00:05:39,878
de la première date et de la deuxième date,

177
00:05:40,150 --> 00:05:42,073
to_datetime a été capable de les parser

178
00:05:42,173 --> 00:05:44,753
et de produire l'objet correct correspondant.

179
00:05:46,144 --> 00:05:47,956
Alors on a une autre méthode

180
00:05:48,056 --> 00:05:49,330
extrêmement pratique

181
00:05:49,430 --> 00:05:51,499
qui s'appelle date_range,

182
00:05:51,599 --> 00:05:52,682
qui me permet de produire

183
00:05:56,196 --> 00:05:57,519
des index de dates.

184
00:05:57,619 --> 00:05:59,330
Regardons un exemple de cela.

185
00:05:59,955 --> 00:06:01,899
Je vais écrire index égale

186
00:06:03,845 --> 00:06:04,622
date_range

187
00:06:05,795 --> 00:06:07,313
et donc ici, je vais lui spécifier

188
00:06:07,413 --> 00:06:08,290
une date de départ,

189
00:06:08,623 --> 00:06:11,174
avec la même facilité de parsing

190
00:06:11,274 --> 00:06:12,909
que l'on a avec to_datetime.

191
00:06:13,009 --> 00:06:14,186
Donc je vais spécifier par exemple

192
00:06:14,286 --> 00:06:16,928
1er janvier 2018.

193
00:06:17,752 --> 00:06:19,327
Ensuite, je vais lui spécifier

194
00:06:19,427 --> 00:06:20,171
une période,

195
00:06:20,271 --> 00:06:21,971
c'est-à-dire le nombre de dates

196
00:06:22,071 --> 00:06:22,907
que je veux produire,

197
00:06:23,340 --> 00:06:24,699
donc ici, je vais en produire mille,

198
00:06:25,261 --> 00:06:26,995
et je vais lui spécifier la fréquence,

199
00:06:27,095 --> 00:06:28,368
c'est-à-dire quel est l'intervalle

200
00:06:28,468 --> 00:06:29,480
que j'ai entre deux dates.

201
00:06:29,580 --> 00:06:30,870
Et ici, je vais lui spécifier

202
00:06:30,970 --> 00:06:32,579
la journée, un jour.

203
00:06:33,113 --> 00:06:34,197
J'exécute cela,

204
00:06:34,297 --> 00:06:36,741
et donc, je vois que ce date_range

205
00:06:36,841 --> 00:06:38,228
m'a produit un index

206
00:06:38,328 --> 00:06:40,650
qui part au 1er janvier 2018,

207
00:06:40,750 --> 00:06:42,653
avec mille dates,

208
00:06:42,753 --> 00:06:44,077
qui sont toutes séparées

209
00:06:44,177 --> 00:06:44,807
d'un jour.

210
00:06:45,935 --> 00:06:47,709
Une des grandes forces de pandas

211
00:06:47,809 --> 00:06:49,656
dans la gestion des index de dates,

212
00:06:49,756 --> 00:06:51,615
c'est qu'on peut spécifier des fréquences

213
00:06:51,715 --> 00:06:52,895
extrêmement flexibles.

214
00:06:52,995 --> 00:06:54,816
Ici, je vais vous montrer un autre exemple.

215
00:06:55,918 --> 00:06:57,469
Je vais recréer un index.

216
00:06:57,569 --> 00:06:58,827
Mais cette fois, au lieu de lui dire

217
00:06:58,927 --> 00:06:59,458
que mes dates sont

218
00:06:59,558 --> 00:07:01,240
simplement séparées d'un seul jour,

219
00:07:01,340 --> 00:07:02,386
je vais donner une fréquence

220
00:07:02,486 --> 00:07:04,750
beaucoup plus originale.

221
00:07:04,850 --> 00:07:05,697
Je vais donner par exemple

222
00:07:05,797 --> 00:07:08,252
43 heures et 36 minutes.

223
00:07:08,352 --> 00:07:09,494
Alors vous noterez qu'ici

224
00:07:09,594 --> 00:07:11,219
j'utilise un t pour minutes,

225
00:07:11,319 --> 00:07:12,771
en fait, on peut utiliser soit min

226
00:07:12,871 --> 00:07:13,823
soit t,

227
00:07:13,923 --> 00:07:15,992
le m tout seul est réservé pour le mois.

228
00:07:16,679 --> 00:07:18,982
Donc ici, je spécifie un nouvel index

229
00:07:19,082 --> 00:07:20,775
qui va commencer au 1er janvier 2018

230
00:07:20,875 --> 00:07:21,781
avec mille dates

231
00:07:21,881 --> 00:07:23,113
qui vont toutes être séparées

232
00:07:23,213 --> 00:07:24,705
de 43 heures 36 minutes.

233
00:07:24,805 --> 00:07:25,849
J'exécute.

234
00:07:26,434 --> 00:07:27,362
Je regarde mon index

235
00:07:27,462 --> 00:07:28,544
et je vois bien que j'ai un nouvel index

236
00:07:28,644 --> 00:07:29,748
qui est créé

237
00:07:29,848 --> 00:07:32,327
en fonction de ce nouvel intervalle.

238
00:07:32,427 --> 00:07:34,164
Et maintenant, je vais créer une série

239
00:07:34,264 --> 00:07:35,338
à partir de cet index.

240
00:07:36,837 --> 00:07:38,757
On va prendre une série s

241
00:07:41,856 --> 00:07:44,626
qui va contenir des nombres aléatoires

242
00:07:49,547 --> 00:07:50,297
donc je vais mettre

243
00:07:51,753 --> 00:07:53,278
des nombres aléatoires

244
00:07:53,818 --> 00:07:55,591
allant de 0 à 100.

245
00:07:56,116 --> 00:07:58,049
Et ici, je vais dire qu'il m'en faut mille

246
00:07:58,149 --> 00:07:59,729
parce que mon index a mille éléments.

247
00:08:00,533 --> 00:08:01,924
Et ensuite, je vais dire que mon index

248
00:08:02,024 --> 00:08:03,688
c'est l'index que je viens juste de créer.

249
00:08:04,417 --> 00:08:06,630
Voici. Maintenant, je viens de créer une série

250
00:08:06,730 --> 00:08:08,763
qui a pour index une date

251
00:08:09,291 --> 00:08:11,577
et qui a pour valeur un nombre aléatoire.

252
00:08:12,176 --> 00:08:13,499
Alors maintenant, j'aimerais vous montrer

253
00:08:13,599 --> 00:08:15,957
la souplesse de manipulation des séries

254
00:08:16,057 --> 00:08:18,368
lorsque notre index est une date.

255
00:08:18,904 --> 00:08:20,349
Supposons que je veuille maintenant

256
00:08:20,449 --> 00:08:21,752
obtenir toutes les dates

257
00:08:21,852 --> 00:08:23,441
qui sont en 2018.

258
00:08:23,541 --> 00:08:25,475
En fait, je n'ai qu'à mettre ici 2018

259
00:08:26,577 --> 00:08:28,590
et pandas va automatiquement

260
00:08:28,690 --> 00:08:29,773
m'extraire toutes les dates

261
00:08:29,873 --> 00:08:32,445
qui ont eu lieu en 2018.

262
00:08:33,015 --> 00:08:34,146
Maintenant, évidemment, je peux faire

263
00:08:34,246 --> 00:08:35,326
quelque chose d'un peu plus fin,

264
00:08:35,426 --> 00:08:36,458
et je peux dire par exemple

265
00:08:36,558 --> 00:08:37,245
que je veux toutes les dates

266
00:08:37,345 --> 00:08:38,953
de décembre 2018.

267
00:08:39,476 --> 00:08:40,594
Vous remarquez ici que

268
00:08:40,694 --> 00:08:41,426
de nouveau, mon format

269
00:08:41,526 --> 00:08:42,918
est extrêmement flexible

270
00:08:43,018 --> 00:08:44,179
et que pandas va être capable

271
00:08:44,279 --> 00:08:45,963
de faire le parsing correct de ce format.

272
00:08:46,063 --> 00:08:48,122
Et donc, ici, je vais récupérer toutes les dates

273
00:08:48,222 --> 00:08:50,773
qui se trouvent en décembre 2018.

274
00:08:51,417 --> 00:08:52,823
Et pour finir, je peux évidemment

275
00:08:52,923 --> 00:08:53,844
faire du slicing.

276
00:08:54,238 --> 00:08:55,517
Je vais pouvoir prendre toutes les dates

277
00:08:55,617 --> 00:08:57,180
qui vont de décembre 2018

278
00:09:02,169 --> 00:09:05,957
au 3 janvier 2019.

279
00:09:07,336 --> 00:09:08,393
Vous remarquez que là,

280
00:09:08,493 --> 00:09:10,141
mes formats sont de nouveau hétérogènes

281
00:09:10,241 --> 00:09:11,240
et que pandas sait de nouveau

282
00:09:11,340 --> 00:09:12,903
parfaitement faire le parsing de ces dates

283
00:09:13,003 --> 00:09:14,944
et me sortir les éléments de ma Series

284
00:09:15,044 --> 00:09:16,931
qui vont de décembre 2018

285
00:09:17,031 --> 00:09:18,860
au 3 janvier 2019.

286
00:09:20,002 --> 00:09:21,147
Pour finir, j'aimerais parler

287
00:09:21,247 --> 00:09:21,813
d'une opération

288
00:09:21,913 --> 00:09:23,683
qui est l'opération de rééchantillonnage

289
00:09:23,966 --> 00:09:25,674
qui permet de rééchantillonner

290
00:09:25,774 --> 00:09:27,840
des séries qui ont des datetimeIndex.

291
00:09:27,940 --> 00:09:29,694
C'est quelque chose qui est extrêmement puissant

292
00:09:30,185 --> 00:09:31,574
et très pratique à utiliser

293
00:09:31,674 --> 00:09:32,559
et qui est dans l'esprit

294
00:09:32,659 --> 00:09:33,662
assez proche du groupby.

295
00:09:34,135 --> 00:09:35,573
On va rééchantillonner des dates,

296
00:09:35,673 --> 00:09:37,282
donc on va les regrouper par semaine,

297
00:09:37,382 --> 00:09:38,262
par mois, par jour,

298
00:09:38,362 --> 00:09:40,070
et on va pouvoir appliquer l'opération

299
00:09:40,170 --> 00:09:41,135
à chacun de ces groupes.

300
00:09:41,478 --> 00:09:42,562
Je vais vous montrer un exemple.

301
00:09:43,019 --> 00:09:44,754
Je vais reprendre ma série de tout à l'heure

302
00:09:46,014 --> 00:09:48,161
et je vais faire un resample,

303
00:09:48,688 --> 00:09:50,109
un rééchantillonnage,

304
00:09:50,562 --> 00:09:51,681
sur chaque mois.

305
00:09:51,781 --> 00:09:52,894
Donc si je regarde ce que j'obtiens,

306
00:09:52,994 --> 00:09:53,809
j'obtiens bien un objet

307
00:09:53,909 --> 00:09:54,946
un peu comme le groupby,

308
00:09:55,046 --> 00:09:57,014
j'obtiens un objet qui s'appelle resampler.

309
00:09:57,451 --> 00:09:59,278
Et sur cet objet, je peux appliquer une opération,

310
00:09:59,378 --> 00:10:01,335
ici, je vais appliquer une opération d'agrégation

311
00:10:01,435 --> 00:10:02,236
qui est la moyenne.

312
00:10:02,779 --> 00:10:04,738
Et donc on voit que j'ai bien obtenu

313
00:10:04,838 --> 00:10:05,771
une moyenne

314
00:10:05,871 --> 00:10:08,040
sur chacun des mois

315
00:10:08,140 --> 00:10:10,628
donc j'ai rééchantillonné par mois ma série

316
00:10:10,728 --> 00:10:11,582
et j'ai calculé la moyenne

317
00:10:11,682 --> 00:10:12,537
 sur chacun de ces groupes.

318
00:10:13,069 --> 00:10:14,817
resample est très, très puissant

319
00:10:14,917 --> 00:10:15,976
comme méthode,

320
00:10:16,076 --> 00:10:17,617
et on peut notamment spécifier

321
00:10:19,359 --> 00:10:20,473
des critères d'agrégation

322
00:10:20,573 --> 00:10:21,419
qui sont plus sophistiqués

323
00:10:21,519 --> 00:10:22,229
que simplement un jour,

324
00:10:22,329 --> 00:10:23,239
un mois, une semaine.

325
00:10:23,339 --> 00:10:25,344
Je vais vous donner un autre exemple.

326
00:10:25,782 --> 00:10:26,752
Je pourrais dire :

327
00:10:26,852 --> 00:10:28,693
je veux faire un rééchantillonnage par semaine

328
00:10:28,967 --> 00:10:31,151
mais en démarrant mes semaines le mercredi.

329
00:10:33,023 --> 00:10:35,078
Je fais ça simplement de la manière suivante.

330
00:10:35,178 --> 00:10:36,939
Je démarre à W pour semaine

331
00:10:37,039 --> 00:10:38,784
et WED pour wednesday,

332
00:10:39,113 --> 00:10:39,952
pour le mercredi,

333
00:10:40,052 --> 00:10:42,245
et maintenant, je vais calculer une moyenne

334
00:10:42,345 --> 00:10:44,003
sur mes groupes qui sont faits par semaine

335
00:10:44,103 --> 00:10:45,183
et en démarrant le mercredi.

336
00:10:46,384 --> 00:10:47,593
resample est une méthode

337
00:10:47,693 --> 00:10:48,792
qui est bien documentée,

338
00:10:48,892 --> 00:10:50,620
ce n'est pas très courant en pandas

339
00:10:50,720 --> 00:10:51,700
donc il faut en profiter.

340
00:10:51,800 --> 00:10:52,705
Donc si vous regardez

341
00:10:53,030 --> 00:10:57,433
resample?

342
00:10:57,533 --> 00:10:58,713
vous allez avoir

343
00:10:59,098 --> 00:11:01,205
la documentation avec un grand nombre d'exemples

344
00:11:01,305 --> 00:11:02,407
qui vont pouvoir vous montrer

345
00:11:02,507 --> 00:11:03,642
les différents cas d'usage

346
00:11:03,860 --> 00:11:05,405
de cette méthode resample.

347
00:11:06,396 --> 00:11:08,192
Cette vidéo conclut notre découverte

348
00:11:08,292 --> 00:11:10,227
de l'écosystème data science en Python.

349
00:11:10,634 --> 00:11:11,905
Il y aurait beaucoup plus à dire

350
00:11:12,005 --> 00:11:12,945
que ce que l'on a eu le temps de couvrir

351
00:11:13,045 --> 00:11:13,633
en une semaine.

352
00:11:13,950 --> 00:11:15,772
On aurait aimé parler des évolutions de pandas,

353
00:11:15,872 --> 00:11:16,842
des nouveaux formats de données

354
00:11:16,942 --> 00:11:18,306
ou même de la visualisation.

355
00:11:18,612 --> 00:11:20,636
Cependant, on a préféré se concentrer

356
00:11:20,736 --> 00:11:21,380
sur les briques de base

357
00:11:21,480 --> 00:11:23,100
que sont NumPy et pandas.

358
00:11:23,619 --> 00:11:24,759
Nous avons également vu

359
00:11:24,859 --> 00:11:26,526
que NumPy et pandas sont en rupture

360
00:11:26,626 --> 00:11:27,764
en termes de philosophie

361
00:11:27,864 --> 00:11:28,820
par rapport à Python.

362
00:11:29,149 --> 00:11:30,405
La performance est au coeur

363
00:11:30,505 --> 00:11:31,758
de la conception de ces librairies.

364
00:11:32,070 --> 00:11:33,118
Nous avons également vu

365
00:11:33,218 --> 00:11:34,288
qu'elles sont beaucoup moins matures

366
00:11:34,388 --> 00:11:36,509
et que donc, des évolutions fondamentales

367
00:11:36,609 --> 00:11:38,184
sont à prévoir dans un avenir proche.

368
00:11:38,569 --> 00:11:39,913
Vous devez donc prendre le temps

369
00:11:40,013 --> 00:11:41,481
d'acquérir ces nouveaux concepts

370
00:11:41,720 --> 00:11:42,783
et cette nouvelle philosophie

371
00:11:42,883 --> 00:11:43,873
pour tirer pleinement parti

372
00:11:43,973 --> 00:11:44,864
de cet écosystème.

373
00:11:45,180 --> 00:11:46,020
À bientôt !

