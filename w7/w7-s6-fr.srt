1
00:00:03,787 --> 00:00:06,176
Nous avons que NumPy était la librairie de référence

2
00:00:06,276 --> 00:00:08,794
en Python pour manipuler des tableaux multi-dimensionnels.

3
00:00:08,894 --> 00:00:11,572
Et c'est quelque chose qui est extrêmement courant d'utiliser

4
00:00:11,672 --> 00:00:13,504
notamment lorsque l'on fait du calcul matriciel.

5
00:00:14,035 --> 00:00:16,593
Cependant, en data science, on a très souvent des labels

6
00:00:16,693 --> 00:00:18,977
qui sont associés aux données que l'on manipule.

7
00:00:19,077 --> 00:00:21,278
Et on aimerait bien être capable de mettre des labels

8
00:00:21,378 --> 00:00:22,913
sur les tableaux que l'on manipule.

9
00:00:23,013 --> 00:00:25,514
C'est exactement ce que permet de faire pandas.

10
00:00:26,021 --> 00:00:27,120
Regardons un exemple.

11
00:00:27,220 --> 00:00:28,403
Ici, j'ai un tableau

12
00:00:28,503 --> 00:00:30,090
qui représente par exemple des âges,

13
00:00:30,190 --> 00:00:31,579
et j'aimerais pouvoir associer

14
00:00:31,679 --> 00:00:33,442
chaque entrée dans ce tableau

15
00:00:33,542 --> 00:00:34,565
à un prénom.

16
00:00:34,980 --> 00:00:36,157
Et bien, en pandas, je peux le faire

17
00:00:36,257 --> 00:00:37,237
en rajoutant des labels

18
00:00:38,033 --> 00:00:39,934
qui sont représentés par un objet

19
00:00:40,061 --> 00:00:40,916
que l'on appelle un index.

20
00:00:42,090 --> 00:00:44,057
Et cet objet à une dimension

21
00:00:44,157 --> 00:00:45,545
s'appelle en pandas une Series.

22
00:00:46,989 --> 00:00:50,019
Maintenant, imaginons que j'aie un tableau à deux dimensions,

23
00:00:50,119 --> 00:00:51,879
où la première colonne représente des âges

24
00:00:51,979 --> 00:00:53,632
et la deuxième colonne représente des tailles,

25
00:00:54,201 --> 00:00:56,570
j'aimerais pouvoir rajouter des labels sur les colonnes,

26
00:00:57,258 --> 00:00:58,260
Age et Taille,

27
00:00:58,360 --> 00:01:00,880
et j'aimerais pouvoir rajouter des labels sur les lignes,

28
00:01:00,980 --> 00:01:02,035
qui correspondent à des prénoms.

29
00:01:02,526 --> 00:01:04,766
De nouveau, c'est ce que permet pandas

30
00:01:04,866 --> 00:01:05,772
avec une structure de données

31
00:01:05,872 --> 00:01:07,752
 qui s'appelle le DataFrame.

32
00:01:08,254 --> 00:01:09,973
Donc en résumé, il y a en pandas

33
00:01:10,073 --> 00:01:11,291
deux grandes structures de données,

34
00:01:11,391 --> 00:01:14,498
les Series, pour les données à une dimension,

35
00:01:14,598 --> 00:01:15,635
et les DataFrames,

36
00:01:15,735 --> 00:01:17,318
pour les données à deux dimensions.

37
00:01:17,894 --> 00:01:20,429
Une grande partie de la complexité de pandas

38
00:01:20,529 --> 00:01:22,766
vient de la maîtrise de cette notion d'index.

39
00:01:22,866 --> 00:01:25,607
Un index est un objet qui est très puissant

40
00:01:25,707 --> 00:01:28,006
et qui a deux caractéristiques majeures.

41
00:01:28,606 --> 00:01:31,258
Il permet un accès optimisé

42
00:01:31,358 --> 00:01:32,627
aux données dans le tableau,

43
00:01:33,174 --> 00:01:34,470
et il permet également

44
00:01:34,570 --> 00:01:36,023
une notion d'alignement automatique

45
00:01:36,123 --> 00:01:37,217
lors des opérations.

46
00:01:37,317 --> 00:01:38,216
Prenons un exemple,

47
00:01:38,316 --> 00:01:40,882
imaginez que vous ayez à additionner deux DataFrames,

48
00:01:40,982 --> 00:01:42,477
l'opération d'addition

49
00:01:42,577 --> 00:01:44,077
ne s'appliquera qu'aux éléments

50
00:01:44,177 --> 00:01:46,049
qui ont exactement le même label.

51
00:01:46,510 --> 00:01:49,258
Dans cette vidéo, nous allons principalement parler

52
00:01:49,358 --> 00:01:51,596
de la notion de Series, et d'index.

53
00:01:51,696 --> 00:01:52,798
Ouvrons maintenant un notebook

54
00:01:52,898 --> 00:01:54,060
pour jouer avec ces deux notions.

55
00:01:55,313 --> 00:01:57,319
Un index est un objet immuable

56
00:01:57,419 --> 00:01:59,789
qui est à la frontière du set et de la liste.

57
00:02:00,404 --> 00:02:03,271
Un index contient des éléments qui sont hashables,

58
00:02:03,556 --> 00:02:04,489
comme un set,

59
00:02:04,809 --> 00:02:06,031
et il est sliceable,

60
00:02:06,131 --> 00:02:06,824
comme une liste.

61
00:02:06,924 --> 00:02:09,321
De plus, l'index va définir une relation d'ordre

62
00:02:09,421 --> 00:02:11,287
sur les éléments qui sont stockés,

63
00:02:11,387 --> 00:02:13,549
et il peut contenir des éléments dupliqués.

64
00:02:14,564 --> 00:02:15,717
Un index sur une Series

65
00:02:15,817 --> 00:02:17,502
va permettre d'offrir à la Series une interface

66
00:02:17,602 --> 00:02:19,668
qui est à la fois une interface de liste

67
00:02:19,768 --> 00:02:21,085
et une interface de dictionnaire.

68
00:02:22,018 --> 00:02:25,124
En pratique, on crée très rarement nos propres index.

69
00:02:25,224 --> 00:02:27,441
En fait, les index vont être créés automatiquement

70
00:02:27,541 --> 00:02:28,897
à l'importation de nos données.

71
00:02:28,997 --> 00:02:31,162
Et pandas supporte une grande variété

72
00:02:31,262 --> 00:02:32,126
de formats de données,

73
00:02:32,226 --> 00:02:34,186
aussi bien en import qu'en export.

74
00:02:34,578 --> 00:02:37,032
En pandas, on peut importer des données

75
00:02:37,132 --> 00:02:39,018
sous le format csv,

76
00:02:39,118 --> 00:02:40,109
sous le format json,

77
00:02:40,209 --> 00:02:41,325
sous le format html,

78
00:02:41,425 --> 00:02:43,561
excel, sql ou pickle.

79
00:02:43,964 --> 00:02:46,653
Ce sujet ne présente pas de difficulté particulière

80
00:02:46,753 --> 00:02:48,588
et nous le couvrirons dans les compléments.

81
00:02:49,683 --> 00:02:51,191
Regardons maintenant un exemple

82
00:02:51,291 --> 00:02:52,798
de série et d'index.

83
00:02:53,626 --> 00:02:55,913
Pour cela, je vais commencer par

84
00:02:56,013 --> 00:02:57,369
importer pandas

85
00:02:57,469 --> 00:02:58,171
et la convention,

86
00:02:58,271 --> 00:03:00,043
 c'est toujours de le renommer pd.

87
00:03:00,870 --> 00:03:02,529
Et ensuite, je vais créer une série

88
00:03:02,629 --> 00:03:03,604
de la manière suivante.

89
00:03:04,106 --> 00:03:05,329
pd dot Series

90
00:03:08,241 --> 00:03:10,464
Je vais passer à ma série

91
00:03:11,038 --> 00:03:12,372
une liste d'éléments,

92
00:03:12,472 --> 00:03:16,915
20, 30, 40, 50,

93
00:03:19,142 --> 00:03:21,378
et je vais lui passer un index ;

94
00:03:21,478 --> 00:03:24,680
mon index va être

95
00:03:24,780 --> 00:03:25,763
des prénoms,

96
00:03:26,319 --> 00:03:36,218
par exemple, Eve, Bill, Liz et Bob.

97
00:03:36,590 --> 00:03:38,206
Donc, que représente cette série ?

98
00:03:38,306 --> 00:03:43,553
Elle représente l'âge de personnes,

99
00:03:43,653 --> 00:03:45,579
l'âge de Eve, de Bill, de Liz et de Bob.

100
00:03:46,500 --> 00:03:47,734
Alors, explorons cette série.

101
00:03:47,834 --> 00:03:49,494
Dans cette série, je peux récupérer

102
00:03:49,594 --> 00:03:50,372
les valeurs,

103
00:03:50,851 --> 00:03:51,913
values,

104
00:03:52,013 --> 00:03:54,144
et donc ça va me sortir le tableau NumPy

105
00:03:54,244 --> 00:03:55,768
correspondant aux valeurs

106
00:03:55,868 --> 00:03:56,992
hébergées par cette série.

107
00:03:57,665 --> 00:03:59,109
Je peux accéder à l'index

108
00:04:00,414 --> 00:04:01,579
avec l'attribut index,

109
00:04:01,679 --> 00:04:03,671
et donc ça va me retourner l'objet index

110
00:04:04,213 --> 00:04:06,246
qui est dans cette série.

111
00:04:06,981 --> 00:04:07,999
Et ensuite,

112
00:04:08,099 --> 00:04:10,769
je peux accéder aux éléments de cet objet.

113
00:04:10,869 --> 00:04:12,397
Alors, regardons un exemple.

114
00:04:12,860 --> 00:04:16,774
Je vais écrire s point loc de eve.

115
00:04:17,836 --> 00:04:19,649
Ça va me permettre d'accéder à la valeur

116
00:04:19,749 --> 00:04:21,430
correspondant au label eve.

117
00:04:21,530 --> 00:04:22,620
Donc vous remarquez ici

118
00:04:22,720 --> 00:04:24,119
que j'ai utilisé l'attribut loc ;

119
00:04:24,219 --> 00:04:25,253
c'est très important

120
00:04:25,353 --> 00:04:27,203
 de toujours utiliser cet attribut.

121
00:04:27,303 --> 00:04:29,047
Vous verrez dans certaines documentations

122
00:04:29,147 --> 00:04:29,701
ou sur internet,

123
00:04:29,801 --> 00:04:33,691
qu'il est possible d'accéder à la valeur

124
00:04:33,791 --> 00:04:35,905
stockée par eve directement de cette manière ;

125
00:04:36,290 --> 00:04:37,866
on vous déconseille très fortement

126
00:04:37,966 --> 00:04:38,905
d'utiliser cette notation

127
00:04:39,005 --> 00:04:40,533
qui a de nombreux effets de bord.

128
00:04:40,633 --> 00:04:41,726
Dans la suite, je n'utiliserai

129
00:04:41,826 --> 00:04:43,364
 que la notation loc.

130
00:04:44,933 --> 00:04:47,495
Donc, je peux accéder à eve

131
00:04:47,595 --> 00:04:49,257
mais je peux également faire un slice ;

132
00:04:49,750 --> 00:04:50,779
je peux aller par exemple

133
00:04:50,879 --> 00:04:52,564
de eve jusqu'à liz.

134
00:04:53,146 --> 00:04:54,584
Regardons le résultat

135
00:04:54,684 --> 00:04:56,695
et j'obtiens les valeurs allant de eve jusqu'à liz.

136
00:04:57,066 --> 00:04:58,939
Il y  a ici une différence notable

137
00:04:59,039 --> 00:05:01,795
avec le slice que vous connaissez habituellement,

138
00:05:02,104 --> 00:05:05,452
c'est que ici, je fais un slice de i deux points j

139
00:05:05,552 --> 00:05:08,243
mais je vais de i jusqu'à j inclus,

140
00:05:08,343 --> 00:05:10,798
donc je vais de eve jusqu'à liz inclus,

141
00:05:10,898 --> 00:05:12,591
la borne de droite est effectivement

142
00:05:13,074 --> 00:05:14,844
une borne que l'on prend en compte

143
00:05:14,944 --> 00:05:15,504
et qui est incluse.

144
00:05:19,998 --> 00:05:22,439
Comme on peut faire des slices sur les labels,

145
00:05:22,539 --> 00:05:23,932
vous vous demandez sans doute

146
00:05:24,351 --> 00:05:25,884
quelle est la relation d'ordre

147
00:05:25,984 --> 00:05:27,971
que j'ai sur mes labels.

148
00:05:28,390 --> 00:05:30,048
Cette relation d'ordre est déterminée

149
00:05:30,148 --> 00:05:31,798
à la création de ma Series

150
00:05:32,108 --> 00:05:33,307
par l'ordre dans lequel

151
00:05:33,407 --> 00:05:34,875
je vais spécifier mes labels

152
00:05:34,975 --> 00:05:36,625
lorsque je définis mon index.

153
00:05:37,024 --> 00:05:38,122
Regardons un exemple,

154
00:05:38,222 --> 00:05:39,623
je vais reprendre le cas précédent,

155
00:05:40,646 --> 00:05:42,048
donc je reprends cette série,

156
00:05:42,464 --> 00:05:44,136
que je recopie en dessous,

157
00:05:44,653 --> 00:05:46,902
mais maintenant, je vais intervertir

158
00:05:47,002 --> 00:05:47,891
bill et liz.

159
00:05:52,756 --> 00:05:54,237
J'exécute cette série.

160
00:05:54,337 --> 00:05:57,196
Je recrée le même slice que celui du dessus,

161
00:05:57,296 --> 00:05:59,328
s point loc de eve à liz

162
00:05:59,428 --> 00:06:01,019
et quel est le résultat que j'obtiens ?

163
00:06:01,119 --> 00:06:02,815
Maintenant, je vais bien de eve à liz

164
00:06:02,915 --> 00:06:04,119
mais avec une relation d'ordre

165
00:06:04,219 --> 00:06:06,337
qui est définie par l'ordre des éléments

166
00:06:06,721 --> 00:06:08,776
à la création de mon index.

167
00:06:13,904 --> 00:06:15,865
Cependant, il y a un cas pour lequel

168
00:06:15,965 --> 00:06:17,418
le slicing ne marche pas.

169
00:06:17,784 --> 00:06:19,543
Le slicing sur les labels

170
00:06:19,643 --> 00:06:20,771
ne va pas être défini

171
00:06:20,871 --> 00:06:22,877
si vous avez des labels dupliqués

172
00:06:22,977 --> 00:06:26,353
et qu'en plus, votre index n'a pas été trié.

173
00:06:26,453 --> 00:06:27,934
Donc, dit autrement,

174
00:06:28,034 --> 00:06:30,170
si vous n'avez pas de label dupliqué,

175
00:06:30,270 --> 00:06:31,794
le slicing fonctionnera toujours,

176
00:06:31,894 --> 00:06:34,115
et si votre index a été trié,

177
00:06:34,215 --> 00:06:36,043
le slicing fonctionnera toujours.

178
00:06:36,526 --> 00:06:38,296
En pratique, on ne contrôle pas les labels

179
00:06:38,396 --> 00:06:39,334
puisque les labels sont donnés

180
00:06:39,434 --> 00:06:40,319
par notre jeu de données.

181
00:06:40,419 --> 00:06:41,982
Par contre, vous pouvez toujours

182
00:06:42,082 --> 00:06:43,120
trier votre index.

183
00:06:43,220 --> 00:06:44,406
Par conséquent, on vous recommande

184
00:06:44,506 --> 00:06:45,372
de toujours le faire.

185
00:06:45,472 --> 00:06:46,685
Lorsque vous triez l'index,

186
00:06:46,785 --> 00:06:49,802
vous avez la garantie que le slicing fonctionnera toujours,

187
00:06:49,902 --> 00:06:50,896
et en plus,

188
00:06:50,996 --> 00:06:53,756
le tri de l'index améliore de manière significative

189
00:06:53,856 --> 00:06:55,172
la performance de cet index.

190
00:06:55,272 --> 00:06:56,452
Regardons un exemple.

191
00:06:57,750 --> 00:07:00,156
Pour cela, je vais créer un tableau d'animaux

192
00:07:00,256 --> 00:07:01,898
qui va contenir

193
00:07:01,998 --> 00:07:04,026
des animaux que possèdent certaines personnes,

194
00:07:04,126 --> 00:07:06,369
enfin, certains utilisateurs,

195
00:07:06,469 --> 00:07:07,703
et donc je vais avoir chien,

196
00:07:07,803 --> 00:07:09,223
je vais avoir chat,

197
00:07:09,323 --> 00:07:11,440
je vais avoir chat,

198
00:07:11,540 --> 00:07:12,194
chien,

199
00:07:12,294 --> 00:07:14,146
et poisson.

200
00:07:18,632 --> 00:07:21,144
Et ensuite, je vais avoir un tableau de propriétaires

201
00:07:21,244 --> 00:07:22,381
que je vais appeler proprio,

202
00:07:23,241 --> 00:07:24,684
et qui va contenir

203
00:07:26,020 --> 00:07:27,293
le prénom des propriétaires

204
00:07:27,393 --> 00:07:28,847
donc je vais avoir Eve qui a un chien,

205
00:07:29,385 --> 00:07:31,402
je vais avoir Bob qui a un chat,

206
00:07:31,850 --> 00:07:33,534
Eve de nouveau qui a un chat,

207
00:07:34,187 --> 00:07:36,251
Bill qui a un chien,

208
00:07:36,351 --> 00:07:37,814
et Liz qui a un poisson.

209
00:07:39,122 --> 00:07:40,453
Ici, j'ai mes deux listes.

210
00:07:40,832 --> 00:07:42,736
Et maintenant, je vais créer une série

211
00:07:42,836 --> 00:07:44,046
à partir de ces deux listes.

212
00:07:44,146 --> 00:07:45,983
Donc je vais écrire ça de la manière suivante :

213
00:07:46,083 --> 00:07:49,677
s égale Series

214
00:07:49,777 --> 00:07:51,641
et je vais passer comme valeurs les animaux

215
00:07:52,267 --> 00:07:53,426
et comme index,

216
00:07:54,200 --> 00:07:58,534
ma liste qui est index,

217
00:08:00,165 --> 00:08:01,372
pardon, et comme index,

218
00:08:01,472 --> 00:08:02,530
je vais passer ma liste qui est

219
00:08:03,447 --> 00:08:04,690
la liste des propriétaires.

220
00:08:05,686 --> 00:08:07,583
J'exécute, je regarde ma série,

221
00:08:07,683 --> 00:08:09,122
dans ma série, je vois bien que j'ai

222
00:08:09,222 --> 00:08:10,811
comme index, des prénoms,

223
00:08:10,911 --> 00:08:12,164
et comme valeurs, les animaux

224
00:08:12,264 --> 00:08:13,678
chien, chat, chat, chien, poisson.

225
00:08:14,334 --> 00:08:15,484
Alors maintenant,

226
00:08:15,584 --> 00:08:18,133
essayons de faire un slicing sur cette série.

227
00:08:18,664 --> 00:08:20,133
Je vais faire s point loc

228
00:08:20,667 --> 00:08:23,690
de eve deux points liz.

229
00:08:24,615 --> 00:08:25,834
Alors maintenant, qu'est-ce qu'il va se passer ?

230
00:08:25,934 --> 00:08:27,648
On remarque que je suis dans un cas

231
00:08:28,744 --> 00:08:30,800
pour lequel le slicing ne devrait pas fonctionner.

232
00:08:30,900 --> 00:08:32,078
J'ai des labels dupliqués

233
00:08:32,178 --> 00:08:33,992
et mon index n'a pas été trié.

234
00:08:34,092 --> 00:08:34,859
Vérifions cela.

235
00:08:35,276 --> 00:08:37,472
Ici, je remarque bien que j'ai une exception

236
00:08:37,572 --> 00:08:38,985
KeyError, et si je regarde tout en bas

237
00:08:39,085 --> 00:08:39,757
quelle est mon exception,

238
00:08:40,215 --> 00:08:44,624
Cannot get left slice bound for non-unique label : "eve"

239
00:08:44,724 --> 00:08:46,683
Mon label eve a bien été dupliqué,

240
00:08:46,783 --> 00:08:48,065
je ne peux pas faire de slicing dessus.

241
00:08:48,630 --> 00:08:49,905
Alors, comment résoudre ce problème ?

242
00:08:50,005 --> 00:08:50,596
C'est très simple,

243
00:08:51,026 --> 00:08:52,796
on l'a vu il y a juste quelques instants,

244
00:08:52,896 --> 00:08:53,868
il suffit de trier l'index.

245
00:08:55,156 --> 00:08:58,222
Donc ici, avant de faire ce slice,

246
00:08:58,322 --> 00:09:03,571
je vais faire s égale s point sort_index.

247
00:09:04,013 --> 00:09:06,013
sort_index ne fait pas de tri en place,

248
00:09:06,113 --> 00:09:08,538
il retourne une nouvelle série

249
00:09:08,638 --> 00:09:09,999
avec laquelle l'index a été trié,

250
00:09:10,099 --> 00:09:11,019
donc on doit le réaffecter.

251
00:09:11,375 --> 00:09:12,636
Et ensuite, maintenant,

252
00:09:12,736 --> 00:09:14,080
je peux bien calculer mon slice,

253
00:09:14,180 --> 00:09:14,933
donc j'exécute ça,

254
00:09:15,275 --> 00:09:17,203
et maintenant, je vois que mon slice est bien défini,

255
00:09:17,564 --> 00:09:19,245
et si je regarde ma nouvelle série,

256
00:09:20,359 --> 00:09:21,680
avec l'index qui a été trié,

257
00:09:21,780 --> 00:09:22,562
je vois bien maintenant que j'ai bien

258
00:09:22,662 --> 00:09:24,781
Bill, Bob, Eve, Eve et Liz.

259
00:09:26,585 --> 00:09:28,728
Pour finir sur cette notion d'indexation,

260
00:09:29,492 --> 00:09:30,675
il existe sur les séries

261
00:09:30,775 --> 00:09:32,993
un autre attribut qui s'appelle iloc.

262
00:09:33,656 --> 00:09:35,074
Donc, iloc me permet

263
00:09:35,174 --> 00:09:36,816
d'accéder à des attributs

264
00:09:36,916 --> 00:09:37,940
non plus par leur label,

265
00:09:38,040 --> 00:09:39,913
mais par leur rang dans l'index.

266
00:09:40,286 --> 00:09:42,213
iloc de 0, ça me permet d'obtenir

267
00:09:42,313 --> 00:09:44,211
le premier élément de la Series,

268
00:09:45,705 --> 00:09:48,724
et s point iloc de 4

269
00:09:48,824 --> 00:09:49,598
me permet d'accéder

270
00:09:49,698 --> 00:09:51,187
au dernier élément de la Series.

271
00:09:52,329 --> 00:09:54,355
Il y a ici quelque chose d'important à comprendre,

272
00:09:54,455 --> 00:09:57,291
c'est que si jamais je fais un slice sur iloc

273
00:09:57,391 --> 00:09:59,389
par exemple, slice de 1 deux points 3,

274
00:09:59,736 --> 00:10:02,187
comme il s'agit d'un slice sur des indices,

275
00:10:02,287 --> 00:10:05,191
je retrouve le comportement classique des slices.

276
00:10:05,439 --> 00:10:08,457
Ce qui veut dire que je vais de i à j moins un

277
00:10:08,557 --> 00:10:09,377
par pas de k

278
00:10:09,865 --> 00:10:12,737
donc ici, s.iloc de 1 deux points 3

279
00:10:12,999 --> 00:10:14,290
ça va me retourner deux éléments,

280
00:10:14,390 --> 00:10:16,137
l'élément 1 et l'élément 2.

281
00:10:16,237 --> 00:10:17,179
Donc, en résumé,

282
00:10:17,279 --> 00:10:20,152
lorsque je fais un slice sur les labels avec loc,

283
00:10:20,252 --> 00:10:21,980
je vais de i à j inclus,

284
00:10:22,080 --> 00:10:24,999
lorsque je fais un slice sur les indices avec iloc,

285
00:10:25,099 --> 00:10:27,113
je vais de i à j moins 1.

286
00:10:28,243 --> 00:10:29,496
Comme les tableaux NumPy,

287
00:10:29,596 --> 00:10:30,769
les Series acceptent également

288
00:10:30,869 --> 00:10:32,286
la notion d'indexation avancée.

289
00:10:32,386 --> 00:10:33,424
Regardons un exemple.

290
00:10:33,878 --> 00:10:36,189
Je vais prendre ma série s,

291
00:10:36,289 --> 00:10:37,917
et je vais récupérer tous les éléments

292
00:10:38,253 --> 00:10:40,965
pour lesquels la valeur, c'est chien.

293
00:10:41,376 --> 00:10:43,042
J'exécute et j'obtiens bien

294
00:10:43,505 --> 00:10:46,418
la série pour laquelle la valeur est chien.

295
00:10:46,776 --> 00:10:48,859
Je peux évidemment faire de l'indexation

296
00:10:49,747 --> 00:10:50,978
plus sophistiquée,

297
00:10:51,343 --> 00:10:53,819
donc je prends s égale chien ou

298
00:10:55,658 --> 00:10:59,640
s égale à poisson,

299
00:11:02,998 --> 00:11:04,753
et donc je vais récupérer la liste,

300
00:11:04,853 --> 00:11:06,166
la série

301
00:11:06,932 --> 00:11:09,406
qui contient des chiens et des poissons,

302
00:11:09,853 --> 00:11:13,491
et je peux au final faire de l'affectation

303
00:11:16,098 --> 00:11:18,054
sur cet index avancé,

304
00:11:18,154 --> 00:11:19,476
et donc je peux dire ici que

305
00:11:21,182 --> 00:11:22,554
tous ceux qui sont

306
00:11:22,654 --> 00:11:23,936
qui valent chien ou poisson

307
00:11:24,036 --> 00:11:25,482
sont maintenant remplacés par autre.

308
00:11:25,582 --> 00:11:27,509
Si je regarde maintenant ma série s,

309
00:11:27,609 --> 00:11:28,863
je n'ai bien plus que chat,

310
00:11:29,289 --> 00:11:32,157
et chien et poisson ont été remplacés par autre.

311
00:11:33,755 --> 00:11:35,723
Pour finir, j'aimerais parler de la notion

312
00:11:35,823 --> 00:11:36,891
d'alignement d'index

313
00:11:36,991 --> 00:11:38,682
qui est une notion extrêmement importante

314
00:11:38,782 --> 00:11:40,994
lorsque l'on parle de séries en Python

315
00:11:41,423 --> 00:11:42,416
dans pandas.

316
00:11:42,516 --> 00:11:43,640
Regardons un exemple.

317
00:11:44,145 --> 00:11:45,350
Je vais maintenant créer

318
00:11:45,450 --> 00:11:46,354
deux séries.

319
00:11:46,454 --> 00:11:49,651
s1 qui est égale à Series

320
00:11:50,090 --> 00:11:55,465
de 1, 2, 3

321
00:11:56,574 --> 00:11:57,635
avec un index

322
00:11:58,101 --> 00:11:59,533
qui est égal à

323
00:11:59,898 --> 00:12:01,649
une liste qui contient

324
00:12:02,400 --> 00:12:03,453
abc.

325
00:12:04,073 --> 00:12:07,199
Et donc je vais créer une deuxième série s2

326
00:12:07,299 --> 00:12:08,389
qui est égale à,

327
00:12:10,382 --> 00:12:13,158
je vais la copier pour gagner un petit peu de temps,

328
00:12:13,258 --> 00:12:16,301
et maintenant, je vais remplacer par 5, 6, 7.

329
00:12:16,401 --> 00:12:18,485
Et ma série maintenant va contenir

330
00:12:19,089 --> 00:12:22,525
mon index va contenir a, c et d.

331
00:12:23,509 --> 00:12:25,464
J'ai donc deux séries s1

332
00:12:27,250 --> 00:12:28,318
et s2

333
00:12:29,438 --> 00:12:32,545
s1 a pour index a, b, c et contient la valeur 1, 2, 3

334
00:12:32,645 --> 00:12:37,188
s2 a pour index a, c, d et contient la valeur 5, 6, 7.

335
00:12:37,564 --> 00:12:39,153
Regardons maintenant ce qu'il se passe

336
00:12:39,253 --> 00:12:40,173
si je fais une addition.

337
00:12:40,273 --> 00:12:41,619
s1 plus s2.

338
00:12:41,719 --> 00:12:42,734
Comme je vous l'ai expliqué,

339
00:12:43,216 --> 00:12:45,105
pandas va automatiquement

340
00:12:45,205 --> 00:12:45,939
aligner les labels,

341
00:12:46,039 --> 00:12:48,053
c'est-à-dire que l'opération ne sera définie

342
00:12:48,615 --> 00:12:50,411
que pour les valeurs qui ont le même label

343
00:12:50,511 --> 00:12:51,534
à gauche et à droite.

344
00:12:51,634 --> 00:12:52,574
Exécutons cela.

345
00:12:52,982 --> 00:12:56,295
Je vois bien que j'ai bien un a dans s1 et dans s2,

346
00:12:56,395 --> 00:12:57,438
je fais la somme, ça me donne 6 ;

347
00:12:58,443 --> 00:13:00,326
je n'ai b que dans s1

348
00:13:00,426 --> 00:13:03,159
et par conséquent, l'addition n'est pas définie

349
00:13:03,259 --> 00:13:04,399
et le résultat, c'est NaN,

350
00:13:04,499 --> 00:13:05,365
Not a Number ;

351
00:13:06,371 --> 00:13:09,007
c est bien défini dans s1 et dans s2,

352
00:13:09,107 --> 00:13:09,933
le résultat, c'est 9 ;

353
00:13:10,447 --> 00:13:13,362
et pour finir, d  n'est défini que dans s2,

354
00:13:13,882 --> 00:13:15,680
et pas dans s1, et par conséquent,

355
00:13:15,780 --> 00:13:17,252
de nouveau, le résultat, c'est NaN,

356
00:13:17,352 --> 00:13:18,079
Not a Number.

357
00:13:18,417 --> 00:13:20,892
Donc lorsqu'il me manque une valeur

358
00:13:20,992 --> 00:13:22,072
pour un label donné

359
00:13:22,172 --> 00:13:23,373
dans une des deux séries,

360
00:13:23,473 --> 00:13:25,495
le résultat de l'opération sera NaN.

361
00:13:25,897 --> 00:13:27,172
Vous remarquez également

362
00:13:27,272 --> 00:13:27,934
que mes deux séries,

363
00:13:28,034 --> 00:13:30,243
ce sont des séries qui sont des int64.

364
00:13:31,085 --> 00:13:33,985
Et que le résultat, c'est un float64.

365
00:13:34,085 --> 00:13:35,019
Pourquoi ?

366
00:13:35,119 --> 00:13:36,470
Et bien parce qu'il y a des opérations

367
00:13:36,570 --> 00:13:37,187
qui ne sont pas définies,

368
00:13:37,287 --> 00:13:38,244
je dois représenter

369
00:13:38,344 --> 00:13:40,179
l'opération non définie par un NaN,

370
00:13:40,556 --> 00:13:42,292
et une limitation de NumPy,

371
00:13:42,392 --> 00:13:44,035
c'est que le NaN n'existe que pour les floats

372
00:13:44,135 --> 00:13:46,470
donc tout est converti en float64.

373
00:13:47,247 --> 00:13:48,127
On peut évidemment

374
00:13:48,227 --> 00:13:49,392
contrôler ce comportement

375
00:13:49,830 --> 00:13:52,878
avec la méthode add.

376
00:13:52,978 --> 00:13:58,055
s1 point add s2

377
00:13:58,155 --> 00:14:00,174
va me donner exactement le même résultat ;

378
00:14:00,659 --> 00:14:02,386
mais maintenant, je peux passer

379
00:14:02,486 --> 00:14:04,667
un argument qui s'appelle fill_value

380
00:14:05,049 --> 00:14:06,187
et qui va consister à dire :

381
00:14:06,287 --> 00:14:08,384
s'il me manque un élément

382
00:14:08,603 --> 00:14:09,750
à gauche ou à droite,

383
00:14:09,850 --> 00:14:11,425
je vais le remplacer par une valeur par défaut.

384
00:14:11,525 --> 00:14:12,789
Et donc ici, la valeur par défaut

385
00:14:12,889 --> 00:14:13,980
qu'on va mettre, c'est 50.

386
00:14:14,299 --> 00:14:15,437
J'exécute cela

387
00:14:15,751 --> 00:14:17,929
et je vois bien que l'élément manquant

388
00:14:18,029 --> 00:14:19,305
a été remplacé par 50 ;

389
00:14:19,405 --> 00:14:20,744
maintenant, j'ai pu donner un sens

390
00:14:20,844 --> 00:14:21,743
à mon addition.

391
00:14:22,162 --> 00:14:23,536
Vous remarquez cependant

392
00:14:23,636 --> 00:14:26,756
que bien que s1 et s2 soient des séries d'entiers

393
00:14:27,263 --> 00:14:29,717
et que ma fill_value soit également un entier,

394
00:14:30,043 --> 00:14:31,905
le résultat est un float64 ;

395
00:14:32,290 --> 00:14:33,514
il s'agit d'une limitation

396
00:14:33,614 --> 00:14:36,285
de la méthode add avec l'attribut fill_value.

397
00:14:37,497 --> 00:14:38,667
Dans cette vidéo, nous avons vu

398
00:14:38,767 --> 00:14:40,390
la notion d'index et de série.

399
00:14:40,490 --> 00:14:42,357
Les index sont des objets très puissants

400
00:14:42,457 --> 00:14:43,518
qui donnent aux séries

401
00:14:43,618 --> 00:14:45,244
à la fois une interface de liste,

402
00:14:45,344 --> 00:14:46,428
donc on peut faire du slicing,

403
00:14:46,528 --> 00:14:47,869
et une interface de dictionnaire,

404
00:14:47,969 --> 00:14:50,555
on peut accéder à des éléments d'une série

405
00:14:50,655 --> 00:14:51,925
à partir d'un label.

406
00:14:52,217 --> 00:14:53,703
Nous avons également vu que

407
00:14:53,803 --> 00:14:56,644
pandas faisait de l'alignement automatique des labels

408
00:14:56,744 --> 00:14:58,889
lorsque l'on fait des opérations sur les séries.

409
00:14:59,441 --> 00:15:00,180
À bientôt !

