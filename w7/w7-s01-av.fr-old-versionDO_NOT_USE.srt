1
00:00:12,203 --> 00:00:13,538
Bonjour à tous.

2
00:00:13,738 --> 00:00:15,884
Cette semaine, nous allons voir une introduction aux

3
00:00:16,084 --> 00:00:17,256
outils qui servent, de près ou de loin,

4
00:00:17,456 --> 00:00:18,992
à ce que l'on appelle le data science.

5
00:00:19,192 --> 00:00:21,155
On pourrait dire calcul scientifique.

6
00:00:21,355 --> 00:00:23,011
Ce sont toutes les applications

7
00:00:23,211 --> 00:00:25,316
qui sont très demandeuses en cycles

8
00:00:25,516 --> 00:00:27,296
qui font des calculs mathématiques importants.

9
00:00:27,496 --> 00:00:29,874
Ce sont des applications telles que

10
00:00:30,074 --> 00:00:32,866
le traitement du signal, le traitement d'images,

11
00:00:33,066 --> 00:00:37,486
les statistiques, l'intelligence artificielle.

12
00:00:37,686 --> 00:00:39,913
Bref, tout un tas de domaines qui sont

13
00:00:40,113 --> 00:00:42,379
demandeurs de ce genre de technologie.

14
00:00:42,579 --> 00:00:43,384
Ce que nous allons faire,

15
00:00:43,584 --> 00:00:45,115
parce que le sujet est très, très vaste,

16
00:00:45,315 --> 00:00:46,275
c'est, en une semaine,

17
00:00:46,475 --> 00:00:51,018
juste introduire les différentes notions.

18
00:00:51,218 --> 00:00:51,695
En fait, ce qui nous intéresse,

19
00:00:51,895 --> 00:00:53,515
c'est que vous sachiez que ça existe.

20
00:00:53,715 --> 00:00:56,866
Ce qui nous intéresse aussi, c'est de vous montrer

21
00:00:57,066 --> 00:00:59,872
l'apport qu'a le tableau numpy,

22
00:01:00,072 --> 00:01:03,522
dans l'ensemble des types qui sont disponibles.

23
00:01:03,722 --> 00:01:05,216
Et c'est ce que je vais vous faire, aujourd'hui,

24
00:01:05,416 --> 00:01:06,866
dans cette vidéo principalement.

25
00:01:07,066 --> 00:01:12,308
Donc numpy, c'est une librairie qu'on importe

26
00:01:12,508 --> 00:01:13,952
comme n'importe quelle librairie.

27
00:01:14,152 --> 00:01:16,496
Et c'est une librairie qui nous permet de

28
00:01:16,696 --> 00:01:19,729
de faire des tableaux, des tableaux de chiffres.

29
00:01:19,929 --> 00:01:22,484
Donc avant que de voir comment on formule numpy,

30
00:01:22,686 --> 00:01:25,112
je vais vous montrer comment on peut essayer de les

31
00:01:25,312 --> 00:01:27,290
modéliser avec des types de base normaux,

32
00:01:27,490 --> 00:01:28,856
je dirai, de Python.

33
00:01:29,056 --> 00:01:30,905
Donc, la première idée que l'on peut avoir,

34
00:01:31,105 --> 00:01:33,328
si je veux modéliser, par exemple,

35
00:01:33,528 --> 00:01:34,737
une matrice à deux dimensions,

36
00:01:34,937 --> 00:01:37,070
c'est de faire une liste de listes comme ceci.

37
00:01:37,270 --> 00:01:39,499
Bon, première façon de faire.

38
00:01:39,699 --> 00:01:42,249
J'aurai éventuellement une autre idée

39
00:01:42,449 --> 00:01:46,013
qui pourrait aussi me permettre de créer un dictionnaire

40
00:01:46,213 --> 00:01:47,536
qui est indexé par des tuples.

41
00:01:47,736 --> 00:01:49,064
On pourrait faire quelque chose comme ceci,

42
00:01:49,264 --> 00:01:50,144
par exemple.

43
00:01:50,344 --> 00:01:53,025
Alors, dans un premier cas, j'accéderai aux éléments

44
00:01:53,225 --> 00:01:55,004
en faisant mat1[1][2].

45
00:01:55,204 --> 00:01:57,921
Dans le deuxième cas, je ferai mat2[2,3].

46
00:01:58,121 --> 00:02:01,086
Enfin, dans tous les cas, c'est à peu près les seuls outils

47
00:02:01,286 --> 00:02:03,552
que j'ai aujourd'hui, avec les types de base

48
00:02:03,752 --> 00:02:04,895
que nous avons vus, dans le tronc commun,

49
00:02:05,095 --> 00:02:06,758
pour modéliser des tableaux.

50
00:02:06,958 --> 00:02:08,127
On peut en envisager plein d'autres,

51
00:02:08,327 --> 00:02:10,593
mais je veux dire que ce sont les seuls

52
00:02:10,793 --> 00:02:13,129
qui seraient raisonnement efficaces à première vue.

53
00:02:13,329 --> 00:02:16,932
Donc, si on essaie, en oubliant ça, de voir

54
00:02:17,132 --> 00:02:19,978
comment cela se présenterait dans un langage compilé.

55
00:02:20,178 --> 00:02:24,428
On peut penser à C, par exemple, C++

56
00:02:24,628 --> 00:02:27,383
Lorsque on fait des tableaux de ce genre,

57
00:02:27,583 --> 00:02:28,501
en C ou en C++,

58
00:02:28,701 --> 00:02:30,853
en fait, on crée des tableaux qui sont homogènes

59
00:02:31,053 --> 00:02:33,347
c'est-à-dire que toutes les cellules sont de même type.

60
00:02:33,547 --> 00:02:35,649
Et l'autre caractéristique, c'est que, bien souvent,

61
00:02:35,849 --> 00:02:37,339
les dimensions sont connues.

62
00:02:37,539 --> 00:02:38,301
Ce n'est pas strictement nécessaire, mais

63
00:02:38,501 --> 00:02:40,358
très souvent, les dimensions sont connues.

64
00:02:40,558 --> 00:02:42,926
Alors ce que ça veut dire, c'est que

65
00:02:43,126 --> 00:02:45,466
avec des langages de ce genre, on est capable

66
00:02:45,666 --> 00:02:50,256
d'implémenter des tableaux de la façon suivante :

67
00:02:50,456 --> 00:02:52,356
j'ai un tableau, je connais sa dimension,

68
00:02:52,556 --> 00:02:54,982
je connais son type, je sais qu'il va être homogène.

69
00:02:55,182 --> 00:02:55,949
Il n'y aura que des complexes,

70
00:02:56,149 --> 00:02:59,482
donc je connais la taille de chacune des cellules

71
00:02:59,682 --> 00:03:00,651
qu'il va falloir que j'alloue en mémoire.

72
00:03:00,851 --> 00:03:04,015
Donc, du coup, au lieu d'allouer mes cellules un peu

73
00:03:04,215 --> 00:03:05,939
n'importe où, ce que je vais avoir envie de faire,

74
00:03:06,139 --> 00:03:07,991
c'est, tout simplement, de les aplatir.

75
00:03:08,191 --> 00:03:10,826
Je vais créer une structure de mémoire contiguë.

76
00:03:11,026 --> 00:03:13,412
Et avec un simple mécanisme d'indexation,

77
00:03:13,612 --> 00:03:14,533
je vais pouvoir dire :

78
00:03:14,733 --> 00:03:18,025
si vous me donnez les coordonnées i j,

79
00:03:18,225 --> 00:03:20,494
comme je connais la largeur et la hauteur,

80
00:03:20,694 --> 00:03:22,092
en occurrence, je n'ai besoin que de la largeur,

81
00:03:22,292 --> 00:03:24,418
je peux créer une toute petite fonction qui va être

82
00:03:24,618 --> 00:03:26,640
super rapide et qui va me permettre d'accéder

83
00:03:26,840 --> 00:03:30,326
à partir d'un index, à une case mémoire.

84
00:03:30,526 --> 00:03:31,935
Un deuxième index,

85
00:03:32,135 --> 00:03:33,334
on ferait exactement la même chose.

86
00:03:33,534 --> 00:03:36,413
L'autre avantage de cette structure de données, c'est

87
00:03:36,613 --> 00:03:40,516
que si je veux itérer sur ma structure, et bien

88
00:03:40,716 --> 00:03:43,561
en fait, je pars du début et j'ajoute une constante,

89
00:03:43,761 --> 00:03:45,248
à chaque fois; ce qui fait que là, de nouveau,

90
00:03:45,448 --> 00:03:47,944
j'ai une opération qui est extrêmement rapide.

91
00:03:48,144 --> 00:03:52,052
Donc, si je sors de cette animation

92
00:03:52,252 --> 00:03:54,398
et que je regarde ce que je serai capable de faire

93
00:03:54,598 --> 00:03:56,066
maintenant, avec Python.

94
00:03:56,266 --> 00:03:58,576
Les types de base que j'ai,

95
00:03:58,776 --> 00:04:00,084
par définition, ils sont hétérogènes.

96
00:04:00,284 --> 00:04:03,196
Je n'ai pas qu'un moyen, aujourd'hui, de décider que

97
00:04:03,396 --> 00:04:05,619
je vais faire une liste avec que des complexes,

98
00:04:05,819 --> 00:04:06,753
par exemple.

99
00:04:06,953 --> 00:04:09,008
Et, en plus, ils sont de taille variable.

100
00:04:09,208 --> 00:04:12,330
Donc, c'est exactement à ce sujet que s'adresse

101
00:04:12,530 --> 00:04:15,126
le tableau en numpy.

102
00:04:15,326 --> 00:04:19,181
Donc, il existe un type qui s'appelle numpy.ndarray

103
00:04:19,381 --> 00:04:22,624
qui est très central dans numpy et

104
00:04:22,824 --> 00:04:24,618
dans tout le reste de l'écosystème,

105
00:04:24,818 --> 00:04:26,468
dont les caractéristiques c'est que

106
00:04:26,668 --> 00:04:28,525
c'est une structure de données homogènes;

107
00:04:28,725 --> 00:04:30,614
je ne peux mettre que des objets du même type.

108
00:04:30,814 --> 00:04:31,777
Cela peut être des complexes,

109
00:04:31,977 --> 00:04:33,313
cela peut être un tableau avec que des complexes,

110
00:04:33,513 --> 00:04:35,291
cela peut être un tableau avec que des entiers,

111
00:04:35,491 --> 00:04:37,713
cela peut être un tableau avec que des objets structurés

112
00:04:37,913 --> 00:04:40,450
aussi, mais, c'est un tableau qui est homogène,

113
00:04:40,650 --> 00:04:42,657
et de taille fixe.

114
00:04:42,857 --> 00:04:45,244
On aura l'occasion d'en reparler tout à l'heure.

115
00:04:46,369 --> 00:04:48,918
Donc, pour vous montrer à quel point le paradigme est

116
00:04:49,118 --> 00:04:52,425
efficace, j'ai préparé un certain nombre de benchmarks.

117
00:04:52,625 --> 00:04:54,531
Donc la première chose que je vais faire,

118
00:04:54,731 --> 00:04:55,404
c'est de comparer

119
00:04:55,604 --> 00:05:00,391
une liste de listes avec l'implémentation numpy.

120
00:05:00,591 --> 00:05:02,005
Donc j'évalue ma cellule,

121
00:05:02,205 --> 00:05:04,517
donc là, je viens de créer une liste de

122
00:05:04,717 --> 00:05:08,316
10 000 entiers, random entre 0 et 1.

123
00:05:08,516 --> 00:05:11,759
Je vais maintenant créer un tableau ndarray

124
00:05:11,959 --> 00:05:13,617
avec le même contenu.

125
00:05:13,817 --> 00:05:17,491
Et maintenant, nous allons pouvoir comparer

126
00:05:17,691 --> 00:05:20,537
le temps que prendrait l'opération qui consiste à

127
00:05:20,737 --> 00:05:22,795
calculer tous les cosinus de ces nombres

128
00:05:22,995 --> 00:05:24,438
et de les ranger dans une structure

129
00:05:24,638 --> 00:05:25,401
qui est de la même nature

130
00:05:25,601 --> 00:05:26,804
que ce qu'on avait en entrée donc.

131
00:05:27,004 --> 00:05:29,856
Pour la liste, j'ai construit une compréhension de liste,

132
00:05:30,056 --> 00:05:32,446
et, en gros, vous voyez, il me faut environ

133
00:05:32,646 --> 00:05:36,337
une milliseconde par opération.

134
00:05:36,537 --> 00:05:38,691
Alors que si je le fais en ndarray,

135
00:05:38,891 --> 00:05:41,239
je fais 91 microsecondes

136
00:05:41,439 --> 00:05:43,400
Donc, en gros, je vais 10-12 fois plus vite.

137
00:05:43,600 --> 00:05:44,884
C'est déjà pas mal.

138
00:05:45,084 --> 00:05:48,206
Je fais le même test avec une implémentation

139
00:05:48,406 --> 00:05:51,080
sur la base d'un dictionnaire, indexé par des tuples.

140
00:05:51,280 --> 00:05:54,404
Donc, je vous laisse le soin de vous assurer

141
00:05:54,604 --> 00:05:55,604
que je ne fais pas de bêtises.

142
00:05:55,804 --> 00:06:01,426
En gros, l'implémentation ndarray sera la même.

143
00:06:01,626 --> 00:06:10,131
Nous allons pouvoir comparer, de nouveau,

144
00:06:10,331 --> 00:06:12,438
l'opération qui consiste à calculer le cosinus

145
00:06:12,638 --> 00:06:19,186
de cette matrice carrée 100 100, un par un.

146
00:06:19,386 --> 00:06:21,818
Donc, si j'utilise la version Python, je fais

147
00:06:22,018 --> 00:06:25,386
quelque chose de l'ordre de 1.7 ms,

148
00:06:25,586 --> 00:06:26,919
alors que la version numpy, c'est la même que

149
00:06:27,119 --> 00:06:28,491
toute à l'heure,à peu près exactement.

150
00:06:28,691 --> 00:06:30,090
Donc là, on est dans un rapport

151
00:06:30,290 --> 00:06:32,850
qui est plutôt de l'ordre de 15, un peu plus.

152
00:06:33,050 --> 00:06:35,585
Si je fais un troisième benchmark,

153
00:06:35,785 --> 00:06:38,827
dans lequel je vais calculer, alors ça ne se voit pas bien,

154
00:06:39,027 --> 00:06:43,564
mais j'ai ici un million de nombres toujours

155
00:06:43,764 --> 00:06:45,174
random entre 0 et 1,

156
00:06:45,374 --> 00:06:50,392
je prends le ndarray qui correspond,

157
00:06:50,592 --> 00:06:52,575
et maintenant si j'essaie de calculer les carrés,

158
00:06:52,775 --> 00:06:54,625
c'est seulement une fonction très, très simple

159
00:06:54,825 --> 00:06:56,197
qui calcule les carrés des deux,

160
00:06:56,397 --> 00:06:58,627
vous allez voir que je suis dans un rapport

161
00:06:58,827 --> 00:07:03,820
de performance qui est plutôt de l'ordre de 150 environ.

162
00:07:04,020 --> 00:07:05,598
Vous voyez que c'est plusieurs ordres de grandeur

163
00:07:05,798 --> 00:07:06,919
qui sont en jeu.

164
00:07:08,081 --> 00:07:10,191
Nous venons de voir que les tableaux numpy

165
00:07:10,391 --> 00:07:12,612
nous permettent de gagner, très sensiblement,

166
00:07:12,812 --> 00:07:14,071
en terme de performance,

167
00:07:14,271 --> 00:07:18,097
au prix d'une très légère perte de fonctionnalité

168
00:07:18,297 --> 00:07:19,465
parce qu'avant, on pouvait faire des tableaux

169
00:07:19,665 --> 00:07:21,975
qui étaient très flexibles, qui avaient des tailles mobiles,

170
00:07:22,175 --> 00:07:24,193
 etc., donc on ne peut plus le faire, mais ça n'a pas

171
00:07:24,393 --> 00:07:26,853
d'importance, dans le contexte du calcul scientifique.

172
00:07:27,053 --> 00:07:30,498
Mais, par contre, on gagne fortement en performance.

173
00:07:30,698 --> 00:07:33,414
Il y a une autre caractéristique des tableaux numpy

174
00:07:33,614 --> 00:07:34,572
que je voudrais vous montrer,

175
00:07:34,772 --> 00:07:37,410
dans une vidéo, avant qu'on ne passe à des notebooks.

176
00:07:37,610 --> 00:07:40,731
C'est le fait, qu'en fait, les tableaux numpy se prêtent

177
00:07:40,931 --> 00:07:42,426
à des références partagées.

178
00:07:42,626 --> 00:07:44,117
En fait, ce sont des références partagées

179
00:07:44,317 --> 00:07:46,219
qu'on manipule la plupart du temps.

180
00:07:46,419 --> 00:07:48,110
Je vais vous montrer ça sur un tout petit exemple.

181
00:07:48,310 --> 00:07:51,722
Donc un tableau, vous pouvez considérer qu'un tableau

182
00:07:51,922 --> 00:07:54,882
c'est, en fait, un peu comme une vue;

183
00:07:55,082 --> 00:07:57,554
on a déjà vu l'occasion de voir des vues,

184
00:07:57,754 --> 00:07:59,086
à plusieurs reprises, en Python.

185
00:07:59,286 --> 00:08:00,790
Je vais vous montrer ça, sur un exemple très simple.

186
00:08:00,990 --> 00:08:03,044
Je me crée un petit tableau a,

187
00:08:03,244 --> 00:08:08,122
voilà, qui est rectangulaire à douze éléments,

188
00:08:08,322 --> 00:08:11,106
et puis, je regarde la forme de ce tableau,

189
00:08:11,306 --> 00:08:14,382
donc ça fait partie des attributs d'un tableau numpy

190
00:08:14,582 --> 00:08:17,097
sa forme, sa forme c'est 3*4

191
00:08:17,297 --> 00:08:21,897
et je peux, maintenant, avec une fonction numpy simple,

192
00:08:22,097 --> 00:08:25,498
créer une, comment dirai-je, une vue

193
00:08:25,698 --> 00:08:28,587
sur la même donnée, mais avec une autre géométrie.

194
00:08:28,787 --> 00:08:30,401
Donc ça s'appelle la fonction reshape.

195
00:08:30,601 --> 00:08:32,826
Dans ce que je vais vous montrer, ce n'est pas propre

196
00:08:33,026 --> 00:08:33,782
à la fonction reshape.

197
00:08:33,982 --> 00:08:36,091
C'est vraiment dans les internes du tableau

198
00:08:36,291 --> 00:08:38,565
que nous avons ces propriétés.

199
00:08:38,765 --> 00:08:40,832
Le point qui est important, c'est que si, maintenant,

200
00:08:41,032 --> 00:08:43,584
je modifie une des cases de a,

201
00:08:43,784 --> 00:08:45,645
on écrit 600 à un endroit donné,

202
00:08:45,845 --> 00:08:47,779
et bien dans b, je retrouve 600,

203
00:08:47,979 --> 00:08:50,457
à un endroit qui à l'air un peu random,

204
00:08:50,657 --> 00:08:51,419
donc je vais vous expliquer pourquoi

205
00:08:51,619 --> 00:08:53,065
il atterrit à cet endroit là.

206
00:08:53,265 --> 00:08:55,996
Donc ça se passe de cette façon-ci :

207
00:08:56,196 --> 00:08:59,029
Si je clique sur une petite animation

208
00:08:59,229 --> 00:09:01,749
comme, tout à l'heure, je vous montre la zone contiguë.

209
00:09:01,949 --> 00:09:04,439
En fait, lorsque je crée mon tableau a

210
00:09:04,639 --> 00:09:07,321
ce que je fais, c'est de créer deux choses qui sont

211
00:09:07,521 --> 00:09:09,874
les données, cette zone contiguë de mémoire

212
00:09:10,074 --> 00:09:11,771
où il y a vraiment la matière qui m'intéresse,

213
00:09:11,971 --> 00:09:13,763
et un point de vue sur ces données,

214
00:09:13,963 --> 00:09:16,243
qui sont conditionnées, notamment, par le shape;

215
00:09:16,443 --> 00:09:20,379
il y a aussi le type, mais je simplifie, aujourd'hui,

216
00:09:20,579 --> 00:09:22,333
je vous montre uniquement la forme.

217
00:09:22,533 --> 00:09:24,593
Quand je crée une deuxième vue

218
00:09:24,793 --> 00:09:25,553
sur les mêmes données,

219
00:09:25,753 --> 00:09:27,595
ben évidemment lorsque je vais modifier a,

220
00:09:27,795 --> 00:09:29,133
je vais faire mes calculs d'index,

221
00:09:29,333 --> 00:09:33,352
je vais calculer que je dois écrire, en fait, dans la case 6

222
00:09:33,552 --> 00:09:35,974
et vue de b, avec la géométrie de b,

223
00:09:36,174 --> 00:09:38,861
il se trouve que ça correspond à l'adresse 3 0,

224
00:09:39,061 --> 00:09:40,191
celle qu'on va trouver à cet endroit là

225
00:09:40,391 --> 00:09:43,727
dans la modification de b.

226
00:09:44,645 --> 00:09:46,315
Dans la deuxième séquence de cette semaine,

227
00:09:46,515 --> 00:09:48,241
nous parlerons de la librairie pandas

228
00:09:48,441 --> 00:09:50,097
Donc l'objet central de pandas,

229
00:09:50,297 --> 00:09:52,152
ça s'appelle le dataframe

230
00:09:52,352 --> 00:09:55,098
Vous pouvez penser un dataframe, en gros, comme

231
00:09:55,298 --> 00:09:57,657
un tableau d'Excel mais sur stéroïdes, c'est-à-dire

232
00:09:57,857 --> 00:10:00,494
un mécanisme qui va nous permettre de faire

233
00:10:00,694 --> 00:10:02,884
de l'indexation à peu près dans tous les sens

234
00:10:03,084 --> 00:10:04,537
- par ligne, par colonne, par slice -

235
00:10:04,737 --> 00:10:08,966
de manière très efficace, des opérations de type,

236
00:10:09,166 --> 00:10:11,570
disons base de données pour faire simple

237
00:10:11,770 --> 00:10:14,442
- des join, ou des group, ou des selection -,

238
00:10:14,642 --> 00:10:16,943
c'est, en particulier, très bien adapté pour

239
00:10:17,143 --> 00:10:19,143
tous les calculs qui sont liés à des séries temporelles.

240
00:10:20,088 --> 00:10:22,479
Donc, je vous invite, pour approfondir ce sujet là,

241
00:10:22,679 --> 00:10:24,299
à nous rejoindre sur les notebooks de la

242
00:10:24,499 --> 00:10:25,627
séquence numéro 2.

243
00:10:25,827 --> 00:10:29,360
Nous avons, en fin de semaine,

244
00:10:29,560 --> 00:10:31,550
une séquence sur matplotlib.

245
00:10:31,750 --> 00:10:34,683
Donc matplotlib, c'est la librairie de visualisation

246
00:10:34,883 --> 00:10:39,551
disons la plus répandue dans l'écosystème Python.

247
00:10:39,751 --> 00:10:43,682
Il y a un certain nombre d'alternatives,

248
00:10:43,882 --> 00:10:45,631
on en dira vraiment très, très peu.

249
00:10:45,831 --> 00:10:47,419
Ce que je vais faire, dans l'immédiat,

250
00:10:47,619 --> 00:10:50,003
c'est vous montrer, simplement, deux visualisations

251
00:10:50,203 --> 00:10:51,287
qu'on peut faire.

252
00:10:51,487 --> 00:10:53,698
Alors très rapidement, je crée un tableau

253
00:10:53,898 --> 00:10:56,694
qui est un échantillon régulièrement espacé,

254
00:10:56,894 --> 00:10:58,658
de l'espace 0 10

255
00:10:58,858 --> 00:11:01,606
sur cet ensemble de x, je vais calculer les

256
00:11:01,806 --> 00:11:05,987
y comme étant le résultat d'une fonction sinus(x)+1,

257
00:11:06,187 --> 00:11:10,691
et puis pour l'afficher, j'utilise simplement la fonction plot

258
00:11:10,891 --> 00:11:14,265
qui va me permettre de représenter cette fonction

259
00:11:14,465 --> 00:11:15,712
très simple, en deux dimensions.

260
00:11:15,912 --> 00:11:18,057
Il y a également des fonctionnalités

261
00:11:18,257 --> 00:11:19,821
pour faire des dessins en trois dimensions,

262
00:11:20,021 --> 00:11:23,295
donc là, je vous montre une gaussienne.

263
00:11:23,495 --> 00:11:25,683
Là, c'est pareil, je crée deux tableaux X Y

264
00:11:25,883 --> 00:11:28,840
qui sont des échantillons régulièrement espacés

265
00:11:29,040 --> 00:11:31,187
sur un carré-3 +3.

266
00:11:31,387 --> 00:11:35,396
Je calcule en Z essentiellement une pseudo-gaussienne

267
00:11:35,596 --> 00:11:37,171
et, lorsque je l'affiche,

268
00:11:37,371 --> 00:11:40,130
vous pouvez avoir ce genre de visualisation.

269
00:11:40,330 --> 00:11:42,313
On verra dans les notebooks qu'on peut même avoir

270
00:11:42,513 --> 00:11:45,551
des visualisations qu'on peut modifier en temps réel.

271
00:11:45,751 --> 00:11:47,402
On parlera d'un certain nombre d'autres techniques

272
00:11:47,602 --> 00:11:49,707
mais, ça restera un survol.

273
00:11:49,907 --> 00:11:52,222
Il y aurait énormément à dire sur matplotlib

274
00:11:52,422 --> 00:11:53,917
mais, c'est un sujet quasiment infini donc

275
00:11:54,117 --> 00:11:56,375
on en restera à des grands principes.

276
00:11:56,575 --> 00:12:00,429
Voilà qui conclut notre présentation

277
00:12:00,629 --> 00:12:03,899
Donc je répète, on refera trois séquences différentes:

278
00:12:04,099 --> 00:12:08,244
numpy qui est essentiellement le rajout d'un type

279
00:12:08,444 --> 00:12:09,696
qui mériterait probablement d'être dans

280
00:12:09,896 --> 00:12:11,191
la librairie de base,

281
00:12:11,391 --> 00:12:13,859
si ce n'était pas pour des questions liées à des

282
00:12:14,059 --> 00:12:16,286
paternités ou à des maintenances

283
00:12:16,486 --> 00:12:18,005
C'est un type qui est vraiment central

284
00:12:18,205 --> 00:12:21,533
dans tout l'écosystème qui est lié au calcul scientifique.

285
00:12:21,733 --> 00:12:24,647
ça sera l'objet de notre première séquence.

286
00:12:24,847 --> 00:12:26,096
Dans la deuxième séquence, on parlera beaucoup

287
00:12:26,296 --> 00:12:28,850
de pandas, pour tout ce qui est

288
00:12:29,000 --> 00:12:31,116
tableaux structurés et récupération de données.

289
00:12:31,316 --> 00:12:34,785
Et enfin, de matplotlib pour la visualisation

290
00:12:34,985 --> 00:12:36,313
À bientôt !



