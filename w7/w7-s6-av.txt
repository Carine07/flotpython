# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Introduction aux Series et aux indexes en pandas
## Temp total: (14m30)

## Sujet de la vidéo (25s)

Nous avons vu que numpy était la librairie de référence en Python pour
manipuler des tableaux. C'est exactement ce qu'il faut lorsqu'on fait
du calcul matriciel. Cependant, en data science, on a très souvent des
données qui sont associées à des labels. On aimerait donc pouvoir
ajouter à un tableau un index sur les lignes et un index sur les
colonnes pour accéder aux éléments du tableau de manière plus
expressive qu'avec un simple numéro de ligne et de colonne.

[[TP: il m'a fallu relire ca plusieurs fois; ce serait peut-être plus clair si tu
  mets dans le powerpoint ces noms en filigrane; je tripote le powerpoint
  pour illustrer ce que je veux dire mais je ne touche pas aux animations etc..]]
[AL: to discuss]

Regardons un exemple.

>>>>>>>>>> INCLUDE W7-S6-AV-slide1.pptx <<<<<<<<<< (1m30)

Imaginons que j'ai un tableau d'age, j'aimerais pouvoir ajouter un
index de noms me permettant d'accéder à chaque age par un nom, plutôt
que par un numéro de ligne. Un tableau à une dimension avec un index
s'appel une Series en pandas.

Imaginons maintenant que j'ai un tableau à deux dimensions où la
première colonne représente des ages et la deuxième colonne représente
des tailles

[TP: !! pourquoi pas des noms justement alors ?; je ne
comprends
pas où tu nous emmènes là].
[AL: to discuss]


J'aimerais pouvoir ajouter un index sur les colonne et un
index sur les lignes me permettant d'accéder facilement à la taille de
Bob. Un tableau à deux dimensions avec un index sur les lignes et les
colonnes s'appelle une DataFrame

En résumé, il y a en pandas deux grands types pour représenter des
données indexées : les Series pour les données à une dimension et les
DataFrame pour les données à deux dimensions.

Une grande partie de la complexité de pandas vient de la maîtrise de
cette notion d'index. Les indexes ont deux intérêts majeurs :
 - un accès optimisé aux éléments de la Series ou de la DataFrame et
 - un alignement automatique des indexes sur toutes les
opérations. Cela veut dire que si vous additionnez deux Series,
uniquement les valeurs qui ont le même index seront additionnées entre
elles.

Dans cette vidéos nous allons introduire les Series et les index en
pandas. Ouvrons maintenant un notebook pour jouer avec ces notions.

>>>>>>>>>> INCLUDE w7-s6-av-exo1.py <<<<<<<<<< (12m10)




### Conclusion (20s)

Dans cette vidéo, nous avons vu la notion d'index et de Series en
Python. Les indexes sont aux coeurs du fonctionnement de pandas en
permettant de donner des labels aux valeurs stockées. Ces labels
peuvent être utilisés pour accéder aux valeurs d'un Series, mais ils
sont aussi automatiquement pris en compte lors des opérations sur les
Series pour faire de l'alignement automatique.

À bientôt
