1
00:00:12,203 --> 00:00:13,538
Bonjour à tous.

2
00:00:13,738 --> 00:00:15,884
Cette semaine, nous allons voir une introduction aux

3
00:00:16,084 --> 00:00:19,163
outils qui servent, de près ou de loin, à ce que l'on nomme le data science.

4
00:00:19,363 --> 00:00:21,155
On pourrait dire calcul scientifique.

5
00:00:21,355 --> 00:00:25,285
Ce sont toutes les applications qui sont très demandeuses en cycles

6
00:00:25,485 --> 00:00:27,296
qui font des calculs mathématiques importants.

7
00:00:27,496 --> 00:00:29,874
Ce sont des applications telles que

8
00:00:30,074 --> 00:00:32,866
le traitement du signal, le traitement d'images,

9
00:00:33,066 --> 00:00:37,486
les statistiques, l'intelligence artificielle.

10
00:00:37,686 --> 00:00:42,684
Bref, tout un tas de domaines qui sont demandeurs de ce genre de technologie.

11
00:00:42,884 --> 00:00:44,947
Ce que nous allons faire, parce que le sujet est très très vaste,

12
00:00:45,147 --> 00:00:51,000
c'est en une semaine, juste introduire les différentes notions.

13
00:00:51,200 --> 00:00:53,546
En fait, ce qui nous intéresse, c'est que vous sachiez que ça existe

14
00:00:53,746 --> 00:00:56,866
Ce qui nous intéresse aussi, c'est de vous montrer

15
00:00:57,066 --> 00:01:02,920
l'apport qu'a le tableau numpy, dans l'ensemble des types qui sont disponibles.

16
00:01:03,120 --> 00:01:07,639
Et c'est ce que je vais vous faire aujourd'hui dans cette vidéo principalement.

17
00:01:07,839 --> 00:01:12,308
Donc Numpy, c'est une librairie qu'on importe

18
00:01:12,508 --> 00:01:13,952
comme n'importe quelle librairie.

19
00:01:14,152 --> 00:01:18,111
Et c'est une librairie qui nous permet de faire des tableaux,

20
00:01:18,311 --> 00:01:19,729
des tableaux de chiffres.

21
00:01:19,929 --> 00:01:22,484
Donc avant que de voir comment on formule numpy,

22
00:01:22,686 --> 00:01:25,112
je vais vous montrer comment on peut essayer de les

23
00:01:25,312 --> 00:01:28,516
modéliser avec des types de base normaux, je dirai, de Python.

24
00:01:28,716 --> 00:01:30,905
Donc, la première idée que l'on peut avoir,

25
00:01:31,105 --> 00:01:34,883
si je veux modéliser, par exemple, une matrice à deux dimensions,

26
00:01:35,083 --> 00:01:37,070
c'est de faire une liste de listes comme ceci.

27
00:01:37,270 --> 00:01:39,499
Bon, première façon de faire.

28
00:01:39,699 --> 00:01:42,249
J'aurai éventuellement une autre idée

29
00:01:42,449 --> 00:01:47,700
qui pourrait aussi me permettre de créer un dictionnaire qui est indexé par des tuples.

30
00:01:47,900 --> 00:01:50,167
On pourrait faire quelque chose comme ceci, par exemple.

31
00:01:50,367 --> 00:01:53,025
Alors, dans un premier cas, j'accéderai aux éléments

32
00:01:53,225 --> 00:01:55,004
en faisant mat1[1][2].

33
00:01:55,204 --> 00:01:57,923
Dans le deuxième cas, je ferai mat2[2,3].

34
00:01:58,123 --> 00:02:02,305
Enfin, dans tous les cas, c'est à peu près les seuls outils que j'ai aujourd'hui

35
00:02:02,505 --> 00:02:04,895
avec les types de base que nous avons vus dans le tronc commun,

36
00:02:05,095 --> 00:02:06,758
pour modéliser des tableaux.

37
00:02:06,958 --> 00:02:09,411
On peut en envisager plein d'autres, mais je veux dire que

38
00:02:09,611 --> 00:02:13,129
ce sont les seuls qui seraient raisonnement efficaces à première vue.

39
00:02:13,329 --> 00:02:16,494
Donc, si on essaie, en oubliant ça,

40
00:02:16,694 --> 00:02:19,978
de voir comment cela se présenterait dans un langage compilé.

41
00:02:20,178 --> 00:02:24,428
On peut penser à C, par exemple, C++

42
00:02:24,628 --> 00:02:28,448
Lorsque on fait des tableaux de ce genre, en C ou en C++,

43
00:02:28,648 --> 00:02:30,853
en fait, on crée des tableaux qui sont homogènes

44
00:02:31,053 --> 00:02:33,347
c'est-à-dire que toutes les cellules sont de même type.

45
00:02:33,547 --> 00:02:37,247
Et l'autre caractéristique, c'est que, bien souvent, les dimensions sont connues.

46
00:02:37,447 --> 00:02:40,016
Ce n'est pas strictement nécessaire, mais très souvent, les dimensions sont connues.

47
00:02:40,216 --> 00:02:42,926
Alors ce que ça veut dire c'est que

48
00:02:43,126 --> 00:02:45,466
avec des langages de ce genre, on est capable

49
00:02:45,666 --> 00:02:50,256
d'implémenter des tableaux de la façon suivante :

50
00:02:50,456 --> 00:02:52,356
j'ai un tableau, je connais sa dimension,

51
00:02:52,556 --> 00:02:54,982
je connais son type, je sais qu'il va être homogène.

52
00:02:55,182 --> 00:02:57,697
Il n'y aura que des complexes, donc je connais la taille de

53
00:02:57,897 --> 00:03:00,651
chacune des cellules qu'il va falloir que j'alloue en mémoire.

54
00:03:00,851 --> 00:03:04,662
Donc, du coup, au lieu d'allouer mes cellules un peu n'importe où

55
00:03:04,862 --> 00:03:05,939
ce que je vais avoir envie de faire,

56
00:03:06,139 --> 00:03:07,991
c'est, tout simplement, de les aplatir.

57
00:03:08,191 --> 00:03:10,826
Je vais créer une structure de mémoire contiguë.

58
00:03:11,026 --> 00:03:14,556
Et avec un simple mécanisme d'indexation, je vais pouvoir dire :

59
00:03:14,756 --> 00:03:19,484
si vous me donnez les coordonnées i j, comme je connais la largeur

60
00:03:19,684 --> 00:03:22,092
et la hauteur, en occurrence, je n'ai besoin que de la largeur,

61
00:03:22,292 --> 00:03:24,418
je peux créer une toute petite fonction qui va être

62
00:03:24,618 --> 00:03:26,640
super rapide et qui va me permettre d'accéder

63
00:03:26,840 --> 00:03:30,326
à partir d'un index, à une case mémoire.

64
00:03:30,526 --> 00:03:33,444
Un deuxième index, on ferait exactement la même chose.

65
00:03:33,644 --> 00:03:36,413
L'autre avantage de cette structure de données, c'est

66
00:03:36,613 --> 00:03:40,516
que si je veux itérer sur ma structure, et bien

67
00:03:40,716 --> 00:03:44,292
en fait, je pars du début et j'ajoute une constante, à chaque fois;

68
00:03:44,492 --> 00:03:47,944
ce que là, de nouveau, j'ai une opération qui est extrêmement rapide.

69
00:03:48,144 --> 00:03:52,052
Donc, si je sors de cette animation

70
00:03:52,252 --> 00:03:54,398
et que je regarde ce que je serai capable de faire

71
00:03:54,598 --> 00:03:56,066
maintenant avec Python.

72
00:03:56,266 --> 00:03:58,576
Les types de base que j'ai,

73
00:03:58,776 --> 00:04:00,084
par définition, ils sont hétérogènes.

74
00:04:00,284 --> 00:04:03,782
Je n'ai pas qu'un moyen, aujourd'hui, de décider que je vais faire

75
00:04:03,982 --> 00:04:06,476
une liste avec que des complexes, par exemple.

76
00:04:06,676 --> 00:04:09,008
Et, en plus, ils sont de taille variable.

77
00:04:09,208 --> 00:04:12,330
Donc, c'est exactement à ce sujet que s'adresse

78
00:04:12,530 --> 00:04:15,126
le tableau en numpy.

79
00:04:15,326 --> 00:04:19,181
Donc, il existe un type qui s'appelle numpy.ndarray

80
00:04:19,381 --> 00:04:22,624
qui est très central dans numpy et

81
00:04:22,824 --> 00:04:24,618
dans tout le reste de l'écosystème,

82
00:04:24,818 --> 00:04:28,716
dont les caractéristiques c'est que c'est une structure de données homogènes;

83
00:04:28,916 --> 00:04:30,614
je ne peux mettre que des objets du même type.

84
00:04:30,814 --> 00:04:31,777
Cela peut être des complexes,

85
00:04:31,977 --> 00:04:33,313
cela peut être un tableau avec que des complexes,

86
00:04:33,513 --> 00:04:35,291
cela peut être un tableau avec que des entiers,

87
00:04:35,491 --> 00:04:38,185
cela peut être un tableau avec que des objets structurés aussi

88
00:04:38,385 --> 00:04:40,450
mais, c'est un tableau qui est homogène,

89
00:04:40,650 --> 00:04:42,657
et de taille fixe.

90
00:04:42,857 --> 00:04:45,244
On aura l'occasion d'en reparler tout à l'heure.

91
00:04:45,444 --> 00:04:49,328
Donc, pour vous montrer à quel point le paradigme est efficace,

92
00:04:49,528 --> 00:04:52,425
j'ai préparé un certain nombre de benchmarks.

93
00:04:52,625 --> 00:04:55,295
Donc la première chose que je vais faire est de comparer

94
00:04:55,495 --> 00:05:00,391
une liste de listes avec l'implémentation numpy.

95
00:05:00,591 --> 00:05:02,005
Donc j'évalue ma cellule,

96
00:05:02,205 --> 00:05:08,213
donc là, je viens de créer une liste de 10 000 entiers random entre 0 et 1.

97
00:05:08,413 --> 00:05:13,665
Je vais maintenant créer un tableau ndarray avec le même contenu.

98
00:05:13,865 --> 00:05:17,491
Et maintenant, nous allons pouvoir comparer

99
00:05:17,691 --> 00:05:20,537
le temps que prendrait l'opération qui consiste à

100
00:05:20,737 --> 00:05:22,795
calculer tous les cosinus de ces nombres

101
00:05:22,995 --> 00:05:24,438
et de les ranger dans une structure

102
00:05:24,638 --> 00:05:26,945
qui est de la même nature que ce qu'on avait en entrée donc.

103
00:05:27,145 --> 00:05:29,856
Pour la liste, j'ai construit une compréhension de liste,

104
00:05:30,056 --> 00:05:36,473
et, en gros, vous voyez, il me faut environ une milliseconde par opération

105
00:05:36,673 --> 00:05:41,304
Alors que si je le fais en mdarray, je fais 91 microsecondes

106
00:05:41,504 --> 00:05:43,400
En gros, je vais 10-12 fois plus vite.

107
00:05:43,600 --> 00:05:44,884
C'est déjà pas mal.

108
00:05:45,084 --> 00:05:49,634
Je fais le même test avec une implémentation sur la base d'un dictionnaire

109
00:05:49,834 --> 00:05:51,080
indexé par des tuples.

110
00:05:51,280 --> 00:05:55,626
Donc, je vous laisse le soin de vous assurer que je ne fais pas de bêtises.

111
00:05:55,826 --> 00:06:01,426
En gros, l'implémentation mdarray sera la même.

112
00:06:01,626 --> 00:06:10,131
Nous allons pouvoir comparer, de nouveau,

113
00:06:10,331 --> 00:06:12,438
l'opération qui consiste à calculer le cosinus

114
00:06:12,638 --> 00:06:19,186
de cette matrice carrée 100 100, un par un.

115
00:06:19,386 --> 00:06:21,818
Donc, si j'utilise la version Python, je fais

116
00:06:22,018 --> 00:06:25,386
quelque chose de l'ordre de 1.7 ms,

117
00:06:25,586 --> 00:06:28,835
alors que la version numpy, c'est la même que toute à l'heure, à peu près exactement.

118
00:06:29,035 --> 00:06:32,706
Donc là, on est dans un rapport qui est plutôt de l'ordre de 15, un peu plus.

119
00:06:32,906 --> 00:06:35,585
Si je fais un troisième benchmark,

120
00:06:35,785 --> 00:06:38,827
dans lequel je vais calculer, alors ça ne se voit pas bien,

121
00:06:39,027 --> 00:06:45,563
mais j'ai ici un million de nombres toujours random entre 0 et 1,

122
00:06:45,763 --> 00:06:50,392
je prends le mdarray qui correspond,

123
00:06:50,592 --> 00:06:52,575
et maintenant si j'essaie de calculer les carrés,

124
00:06:52,775 --> 00:06:54,625
c'est seulement une fonction très très simple

125
00:06:54,825 --> 00:06:56,197
qui calcule les carrés des deux,

126
00:06:56,397 --> 00:06:59,648
vous allez voir que je suis dans un rapport de performance

127
00:06:59,848 --> 00:07:03,820
qui est plutôt de l'ordre de 150 environ.

128
00:07:04,020 --> 00:07:07,057
Vous voyez que c'est plusieurs ordres de grandeur qui sont en jeu.

129
00:07:07,257 --> 00:07:10,191
Nous venons de voir que les tableaux numpy

130
00:07:10,391 --> 00:07:14,368
nous permettent de gagner, très sensiblement, en terme de performance,

131
00:07:14,568 --> 00:07:18,097
au prix d'une très légère perte de fonctionnalité

132
00:07:18,297 --> 00:07:20,553
parce qu'avant on pouvait faire des tableaux qui étaient très flexibles,

133
00:07:20,753 --> 00:07:23,548
qui avaient des tailles mobiles etc. donc on ne peut plus le faire

134
00:07:23,748 --> 00:07:26,853
mais ça n'a pas d'importance, dans le contexte du calcul scientifique.

135
00:07:27,053 --> 00:07:30,498
Mais, par contre, on gagne fortement en performance.

136
00:07:30,698 --> 00:07:33,414
Il y a une autre caractéristique des tableaux numpy

137
00:07:33,614 --> 00:07:34,572
que je voudrais vous montrer,

138
00:07:34,772 --> 00:07:37,410
dans une vidéo, avant qu'on ne passe à des notebooks.

139
00:07:37,610 --> 00:07:41,667
C'est le fait, qu'en fait, les tableaux numpy se prêtent à des

140
00:07:41,867 --> 00:07:46,379
références partagées. Ce sont des références partagées qu'on manipule la plupart du temps.

141
00:07:46,579 --> 00:07:48,110
Je vais vous montrer ça sur un tout petit exemple.

142
00:07:48,310 --> 00:07:51,722
Donc un tableau, vous pouvez considérer qu'un tableau

143
00:07:51,922 --> 00:07:54,882
c'est, en fait, un peu comme une vue;

144
00:07:55,082 --> 00:07:59,143
on a déjà vu l'occasion de voir des vues, à plusieurs reprises, en Python.

145
00:07:59,343 --> 00:08:00,790
Je vais vous montrer ça, sur un exemple très simple.

146
00:08:00,990 --> 00:08:07,132
Je me crée un petit tableau a, voilà, qui est rectangulaire

147
00:08:07,332 --> 00:08:11,106
à douze éléments et puis, je regarde la forme de ce tableau,

148
00:08:11,306 --> 00:08:14,382
donc ça fait partie des attributs d'un tableau numpy

149
00:08:14,582 --> 00:08:17,097
sa forme, sa forme c'est 3*4

150
00:08:17,297 --> 00:08:21,897
et je peux, maintenant, avec une fonction numpy simple,

151
00:08:22,097 --> 00:08:26,611
créer une, comment dirai-je, une vue sur la même donnée,

152
00:08:26,811 --> 00:08:28,587
mais avec une autre géométrie.

153
00:08:28,787 --> 00:08:30,401
Donc ça s'appelle la fonction reshape.

154
00:08:30,601 --> 00:08:33,966
Dans ce que je vais vous montrer, ce n'est pas propre à la fonction reshape.

155
00:08:34,166 --> 00:08:38,672
C'est vraiment dans les internes du tableau que nous avons ces propriétés.

156
00:08:38,872 --> 00:08:41,971
Le point qui est important, c'est que si maintenant je modifie

157
00:08:42,171 --> 00:08:46,392
une des cases de a, on écrit 600 à un endroit donné,

158
00:08:46,592 --> 00:08:50,776
et bien dans b, je retrouve 600, à un endroit qui à l'air un peu random,

159
00:08:50,976 --> 00:08:53,159
donc je vais vous expliquer pourquoi il atterrit à cet endroit là.

160
00:08:53,359 --> 00:08:55,996
Donc ça se passe de cette façon-ci :

161
00:08:56,196 --> 00:08:59,029
Si je clique sur une petite animation

162
00:08:59,229 --> 00:09:01,749
comme, tout à l'heure, je vous montre la zone contiguë.

163
00:09:01,949 --> 00:09:04,439
En fait, lorsque je crée mon tableau a

164
00:09:04,639 --> 00:09:07,321
ce que je fais, c'est de créer deux choses qui sont

165
00:09:07,521 --> 00:09:11,868
les données, cette zone contiguë de mémoire où il y a vraiment la matière qui m'intéresse,

166
00:09:12,068 --> 00:09:13,763
et un point de vue sur ces données,

167
00:09:13,963 --> 00:09:16,846
qui sont conditionnées, notamment, par le shape; il y a aussi

168
00:09:17,046 --> 00:09:22,333
le type, mais je simplifie aujourd'hui, je vous montre uniquement la forme.

169
00:09:22,533 --> 00:09:25,617
Quand je crée une deuxième vue sur les mêmes données,

170
00:09:25,817 --> 00:09:27,595
ben évidemment lorsque je vais modifier a,

171
00:09:27,795 --> 00:09:29,133
je vais faire mes calculs d'index,

172
00:09:29,333 --> 00:09:33,352
je vais calculer que je dois écrire, en fait, dans la case 6

173
00:09:33,552 --> 00:09:35,974
et vue de b, avec la géométrie de b,

174
00:09:36,174 --> 00:09:38,861
il se trouve que ça correspond à l'adresse 3 0,

175
00:09:39,061 --> 00:09:43,930
celle qu'on va trouver à cet endroit là dans la modification de b.

176
00:09:44,130 --> 00:09:46,847
Dans la deuxième séquence de cette semaine, nous parlerons

177
00:09:47,047 --> 00:09:48,241
de la librairie pandas

178
00:09:48,441 --> 00:09:52,305
Donc l'objet central de pandas, ça s'appelle le dataframe

179
00:09:52,505 --> 00:09:55,098
Vous pouvez penser un dataframe, en gros, comme

180
00:09:55,298 --> 00:09:57,657
un tableau d'Excel mais sur stéroïdes, c'est-à-dire

181
00:09:57,857 --> 00:10:00,494
un mécanisme qui va nous permettre de faire

182
00:10:00,694 --> 00:10:02,884
de l'indexation à peu près dans tous les sens

183
00:10:03,084 --> 00:10:06,657
- par ligne, par colonne, par slice - de manière très efficace,

184
00:10:06,857 --> 00:10:11,570
des opérations de type, disons base de données pour faire simple

185
00:10:11,770 --> 00:10:14,442
- des join, ou des group, ou des selection -,

186
00:10:14,642 --> 00:10:19,888
c'est, en particulier, très bien adapté pour tous les calculs qui sont liés à des séries temporelles.

187
00:10:20,088 --> 00:10:22,479
Donc, je vous invite, pour approfondir ce sujet là,

188
00:10:22,679 --> 00:10:25,467
à nous rejoindre sur les notebooks de la séquence numéro 2

189
00:10:25,667 --> 00:10:31,475
Nous avons, en fin de semaine, une séquence sur matplotlib.

190
00:10:31,675 --> 00:10:34,683
Donc matplotlib, c'est la librairie de visualisation

191
00:10:34,883 --> 00:10:39,551
disons la plus répandue dans l'écosystème Python.

192
00:10:39,751 --> 00:10:45,606
Il y a un certain nombre d'alternatives, on en dira vraiment très très peu.

193
00:10:45,806 --> 00:10:47,419
Ce que je vais faire, dans l'immédiat,

194
00:10:47,619 --> 00:10:51,070
c'est vous montrer simplement deux visualisations qu'on peut faire.

195
00:10:51,270 --> 00:10:53,698
Alors très rapidement, je crée un tableau

196
00:10:53,898 --> 00:10:58,406
qui est un échantillon régulièrement espacé, de l'espace 0 10

197
00:10:58,606 --> 00:11:01,606
sur cet ensemble de x, je vais calculer les

198
00:11:01,806 --> 00:11:05,987
y comme étant le résultat d'une fonction sinus(x)+1,

199
00:11:06,187 --> 00:11:10,691
et puis, pour l'afficher, j'utilise simplement la fonction plot

200
00:11:10,891 --> 00:11:14,265
qui va me permettre de représenter cette fonction

201
00:11:14,465 --> 00:11:15,712
très simple, en deux dimensions.

202
00:11:15,912 --> 00:11:19,733
Il y a également des fonctionnalités pour faire des dessins en trois dimensions,

203
00:11:19,933 --> 00:11:23,295
donc là, je vous montre une gaussienne.

204
00:11:23,495 --> 00:11:25,683
Là, c'est pareil, je crée deux tableaux X Y

205
00:11:25,883 --> 00:11:31,172
qui sont des échantillons régulièrement espacés sur un carré -3 +3.

206
00:11:31,372 --> 00:11:35,396
Je calcule en Z essentiellement une pseudo-gaussienne

207
00:11:35,596 --> 00:11:37,171
et, lorsque je l'affiche,

208
00:11:37,371 --> 00:11:40,130
vous pouvez avoir ce genre de visualisation.

209
00:11:40,330 --> 00:11:43,128
On verra dans les notebooks qu'on peut même avoir des visualisations

210
00:11:43,328 --> 00:11:45,551
qu'on peut modifier en temps réel.

211
00:11:45,751 --> 00:11:47,572
On parlera d'un certain nombre d'autres techniques mais,

212
00:11:47,772 --> 00:11:49,707
ça restera un survol.

213
00:11:49,907 --> 00:11:52,222
Il y aurait énormément à dire sur matplotlib

214
00:11:52,422 --> 00:11:53,917
mais, c'est un sujet quasiment infini donc

215
00:11:54,117 --> 00:11:56,375
on en restera à des grands principes.

216
00:11:56,575 --> 00:12:00,429
Voilà qui conclut notre présentation

217
00:12:00,629 --> 00:12:03,899
Donc je répète, on refera trois séquences différentes:

218
00:12:04,099 --> 00:12:08,244
numpy qui est essentiellement le rajout d'un type

219
00:12:08,444 --> 00:12:10,866
qui mériterait probablement d'être dans la librairie de base,

220
00:12:11,066 --> 00:12:16,274
si ce n'était pas pour des questions liées à des paternités ou à des maintenances

221
00:12:16,474 --> 00:12:18,005
C'est un type qui est vraiment central

222
00:12:18,205 --> 00:12:21,533
dans tout l'écosystème qui est lié au calcul scientifique.

223
00:12:21,733 --> 00:12:24,647
ça sera l'objet de notre première séquence.

224
00:12:24,847 --> 00:12:27,193
Dans la deuxième séquence, on parlera beaucoup de pandas

225
00:12:27,393 --> 00:12:31,116
pour tout ce qui est tableaux structurés et récupération de données.

226
00:12:31,316 --> 00:12:34,785
Et enfin, de matplotlib pour la visualisation

227
00:12:34,985 --> 00:12:36,313
A bientôt.




