1
00:00:05,296 --> 00:00:06,903
La librairie NumPy est la librairie

2
00:00:07,003 --> 00:00:09,467
qui permet de manipuler des tableaux multidimensionnels

3
00:00:09,567 --> 00:00:10,845
que l'on appelle ndarray

4
00:00:10,945 --> 00:00:12,622
pour n-dimensional array.

5
00:00:13,308 --> 00:00:16,435
En NumPy, il y a quatre notions fondamentales à maîtriser :

6
00:00:17,078 --> 00:00:18,893
évidemment, la notion de ndarray,

7
00:00:18,992 --> 00:00:20,769
la notion d'indexation avancée

8
00:00:20,869 --> 00:00:22,286
la notion de vectorisation

9
00:00:22,386 --> 00:00:23,637
et la notion de broadcasting.

10
00:00:24,110 --> 00:00:26,054
Dans cette vidéo, je parlerai uniquement

11
00:00:26,154 --> 00:00:27,394
de la notion de ndarray,

12
00:00:27,494 --> 00:00:28,895
nous couvrirons les autres concepts

13
00:00:28,995 --> 00:00:30,559
dans de prochaines vidéos.

14
00:00:31,216 --> 00:00:34,054
Alors, qu'est-ce que c'est, un tableau NumPy ou un ndarray ?

15
00:00:34,154 --> 00:00:36,106
J'utiliserai dans la suite le terme tableau NumPy.

16
00:00:36,758 --> 00:00:38,337
Un tableau NumPy, c'est un tableau

17
00:00:38,437 --> 00:00:40,609
qui est stocké dans une zone de mémoire contiguë

18
00:00:40,709 --> 00:00:43,461
et qui ne contient que des éléments du même type.

19
00:00:43,962 --> 00:00:45,540
Cela a deux avantages majeurs.

20
00:00:45,640 --> 00:00:47,315
Le premier avantage, c'est que vous pouvez écrire

21
00:00:47,415 --> 00:00:49,499
des fonctions hyper spécialisées

22
00:00:50,059 --> 00:00:51,367
pour un type donné.

23
00:00:51,582 --> 00:00:54,536
C'est donc ce que vous fournit la librairie NumPy

24
00:00:54,636 --> 00:00:55,898
avec des fonctions spécialisées

25
00:00:55,998 --> 00:00:57,347
pour chaque type d'objet

26
00:00:57,447 --> 00:00:59,093
que vous pouvez avoir dans un tableau NumPy.

27
00:00:59,735 --> 00:01:01,411
Le deuxième avantage, c'est que comme

28
00:01:01,511 --> 00:01:03,721
les données sont stockées dans une zone de mémoire contiguë,

29
00:01:03,821 --> 00:01:05,396
vous pouvez parcourir un tableau

30
00:01:05,496 --> 00:01:07,717
de manière extrêmement efficace.

31
00:01:08,424 --> 00:01:10,548
Ouvrons maintenant un notebook

32
00:01:10,648 --> 00:01:13,561
pour commencer à jouer avec les tableaux NumPy.

33
00:01:14,785 --> 00:01:16,461
Avant toute opération, on va commencer

34
00:01:16,561 --> 00:01:18,620
par importer le module NumPy.

35
00:01:18,720 --> 00:01:20,347
Donc on l'importe toujours de la même manière,

36
00:01:20,447 --> 00:01:21,342
import numpy,

37
00:01:21,442 --> 00:01:22,762
et on le renomme toujours np,

38
00:01:22,862 --> 00:01:26,099
c'est une convention dans cette communauté.

39
00:01:26,723 --> 00:01:30,320
Un tableau NumPy peut avoir une, deux ou plus de dimensions.

40
00:01:30,420 --> 00:01:31,978
Pour illustrer ce propos,

41
00:01:32,504 --> 00:01:34,541
je vais prendre l'exemple de la fonction ones

42
00:01:34,641 --> 00:01:36,141
qui permet de créer des tableaux NumPy

43
00:01:36,241 --> 00:01:37,526
ne contenant que des 1.

44
00:01:37,626 --> 00:01:38,690
Donc regardons un exemple.

45
00:01:39,108 --> 00:01:40,328
np.ones

46
00:01:40,746 --> 00:01:42,581
et à ones, je vais lui passer un argument shape

47
00:01:43,235 --> 00:01:45,382
et je vais lui dire, qui prend

48
00:01:45,803 --> 00:01:47,060
comme valeur 3.

49
00:01:47,160 --> 00:01:47,886
Donc, ça veut dire quoi ?

50
00:01:47,986 --> 00:01:49,659
Ça veut dire qu'il va me créer un tableau à une dimension

51
00:01:49,759 --> 00:01:51,243
qui contient trois éléments.

52
00:01:52,343 --> 00:01:53,887
Ensuite, je peux tout à fait

53
00:01:54,880 --> 00:01:56,144
passer à shape

54
00:01:57,244 --> 00:01:59,089
non pas un entier,

55
00:01:59,189 --> 00:02:00,581
mais un tuple, et dans ce cas-là,

56
00:02:00,681 --> 00:02:02,625
ça va définir un tableau dans notre cas

57
00:02:02,725 --> 00:02:03,832
qui va avoir deux dimensions

58
00:02:03,932 --> 00:02:05,854
donc c'est un tableau à deux lignes et deux colonnes.

59
00:02:05,954 --> 00:02:06,983
Regardons cet exemple.

60
00:02:07,083 --> 00:02:08,882
J'ai bien un tableau à deux lignes et deux colonnes.

61
00:02:09,146 --> 00:02:11,344
Et ensuite, je peux évidemment aller plus loin que ça

62
00:02:11,444 --> 00:02:13,190
et définir, par exemple, un tableau

63
00:02:13,290 --> 00:02:16,749
deux lignes, deux colonnes et puis une troisième dimension.

64
00:02:17,491 --> 00:02:20,524
L'argument shape étant le premier argument passé à ones,

65
00:02:20,624 --> 00:02:22,076
il est optionnel, et donc on peut tout à fait

66
00:02:22,176 --> 00:02:24,131
écrire quelque chose de la manière suivante :

67
00:02:24,231 --> 00:02:28,660
a égale np.ones de 2 virgule 2

68
00:02:28,760 --> 00:02:30,647
et donc j'ai créé un tableau à deux dimensions

69
00:02:30,747 --> 00:02:31,629
avec deux lignes et deux colonnes.

70
00:02:32,729 --> 00:02:34,530
Les tableaux NumPy sont des objets

71
00:02:34,630 --> 00:02:35,935
qui sont mutables.

72
00:02:36,035 --> 00:02:38,076
Ça veut dire que je peux modifier les valeurs

73
00:02:38,176 --> 00:02:39,842
des éléments dans certaines cases du tableau.

74
00:02:39,942 --> 00:02:41,021
Regardons un exemple.

75
00:02:41,151 --> 00:02:43,379
J'ai mon tableau a, et je vais dire

76
00:02:43,479 --> 00:02:45,847
que je vais changer l'élément de coordonnées 1, 1

77
00:02:45,947 --> 00:02:47,589
et il va maintenant être égal à 18.

78
00:02:47,689 --> 00:02:50,008
Vous remarquez la manière

79
00:02:50,108 --> 00:02:52,389
que j'utilise pour modifier l'élément dans un tableau :

80
00:02:52,489 --> 00:02:54,477
je mets les coordonnées entre crochets

81
00:02:54,577 --> 00:02:56,585
et chaque dimension est séparée par une virgule.

82
00:02:57,020 --> 00:02:59,908
Il y a plusieurs manières de spécifier un élément dans un tableau NumPy

83
00:03:00,008 --> 00:03:01,752
mais on vous recommande d'utiliser cette manière

84
00:03:01,852 --> 00:03:04,433
qui est la manière la plus sûre et la plus efficace.

85
00:03:04,533 --> 00:03:05,427
Regardons cela,

86
00:03:05,527 --> 00:03:07,036
a de 1, 1 égale 18

87
00:03:07,136 --> 00:03:10,196
j'ai bien donc modifié la case 1, 1 de mon tableau

88
00:03:10,296 --> 00:03:12,100
avec une valeur qui vaut maintenant 18.

89
00:03:13,200 --> 00:03:15,900
Alors, attention lorsque je vous dis qu'un tableau NumPy est mutable,

90
00:03:16,000 --> 00:03:17,753
il ne faut pas que vous croyiez que l'on peut

91
00:03:17,853 --> 00:03:20,622
ajouter des éléments dans ce tableau.

92
00:03:20,722 --> 00:03:23,599
Un tableau NumPy est défini par une zone contiguë de mémoire

93
00:03:23,699 --> 00:03:27,044
et par conséquent, on n'a pas d'opération du type append

94
00:03:27,144 --> 00:03:29,327
comme ce que l'on aurait par exemple sur des listes.

95
00:03:29,427 --> 00:03:30,918
Donc un tableau, une fois qu'il est créé,

96
00:03:31,018 --> 00:03:32,835
est défini par une zone de mémoire contiguë

97
00:03:32,935 --> 00:03:33,775
qui est fixée.

98
00:03:34,875 --> 00:03:36,933
Une autre caractéristique très importante

99
00:03:37,033 --> 00:03:38,741
des tableaux NumPy, c'est qu'ils sont définis,

100
00:03:38,841 --> 00:03:40,913
les éléments stockés dans le tableau sont définis

101
00:03:41,013 --> 00:03:42,807
par un argument que l'on appelle dtype.

102
00:03:42,907 --> 00:03:44,696
En général, dans cet argument dtype,

103
00:03:44,796 --> 00:03:46,487
on va mettre ce qu'on appelle des types scalaires,

104
00:03:46,587 --> 00:03:47,880
des entiers, des floats,

105
00:03:47,980 --> 00:03:50,250
mais on peut également spécifier des types composites

106
00:03:50,350 --> 00:03:51,929
que vous verrez dans les compléments.

107
00:03:52,029 --> 00:03:53,877
Regardons les différents types scalaires

108
00:03:53,977 --> 00:03:56,265
que je peux mettre dans un tableau NumPy.

109
00:03:56,427 --> 00:03:58,339
Je vous rappelle que dans un tableau NumPy,

110
00:03:58,439 --> 00:04:00,850
tous les éléments doivent avoir le même dtype.

111
00:04:01,646 --> 00:04:02,620
Regardons cela.

112
00:04:04,817 --> 00:04:07,714
Dans np scalaire type,

113
00:04:07,814 --> 00:04:08,854
je vais avoir

114
00:04:10,974 --> 00:04:13,120
tous les éléments scalaires qui sont disponibles

115
00:04:13,220 --> 00:04:14,214
dans mon tableau NumPy.

116
00:04:15,314 --> 00:04:18,804
Je vais avoir des types entiers,

117
00:04:19,483 --> 00:04:21,885
int8, int16, int32 et int64,

118
00:04:21,985 --> 00:04:24,626
qui signifient que j'ai des entiers codés sur 8 bits,

119
00:04:24,726 --> 00:04:26,537
16 bits, 32 bits, 64 bits,

120
00:04:26,701 --> 00:04:28,754
j'ai des types unsigned int,

121
00:04:28,854 --> 00:04:30,160
donc des entiers qui démarrent à 0,

122
00:04:30,260 --> 00:04:32,571
codés sur 8, 16, 32, 64 bits,

123
00:04:32,671 --> 00:04:33,517
des types float

124
00:04:33,617 --> 00:04:35,150
codés sur 16, 32, 64 bits,

125
00:04:35,250 --> 00:04:36,811
des types complexes et d'autres types

126
00:04:36,911 --> 00:04:38,863
sur lesquels je reviendrai un peu plus tard.

127
00:04:39,963 --> 00:04:42,486
Donc maintenant, prenons un exemple.

128
00:04:43,568 --> 00:04:47,133
Je vais faire a égale np.array

129
00:04:48,233 --> 00:04:51,321
et donc la fonction array me permet de convertir

130
00:04:51,421 --> 00:04:53,479
typiquement, une liste Python,

131
00:04:53,579 --> 00:04:54,778
en un tableau NumPy.

132
00:04:55,878 --> 00:04:58,879
À ma fonction array, je vais lui passer

133
00:04:59,459 --> 00:05:01,538
1, 100 et 110.

134
00:05:02,089 --> 00:05:04,061
Et je vais spécifier le dtype

135
00:05:04,161 --> 00:05:08,548
dtype égale np.int8

136
00:05:08,717 --> 00:05:10,707
J'exécute ça et je regarde mon tableau ;

137
00:05:10,807 --> 00:05:12,566
mon tableau, c'est un tableau tout à fait normal,

138
00:05:13,076 --> 00:05:16,633
un tableau NumPy qui contient 1, 100 et 110,

139
00:05:16,733 --> 00:05:18,708
et le type des éléments stockés dans le tableau,

140
00:05:18,808 --> 00:05:20,834
ce sont des éléments entiers codés sur 8 bits.

141
00:05:21,934 --> 00:05:24,000
Donc maintenant, je peux explorer mon tableau

142
00:05:24,100 --> 00:05:24,864
de la manière suivante :

143
00:05:24,964 --> 00:05:28,417
je peux regarder le dtype des objets stockés dans mon tableau,

144
00:05:28,977 --> 00:05:29,679
int8,

145
00:05:29,588 --> 00:05:36,213
je peux regarder la taille d'un élément,

146
00:05:36,313 --> 00:05:37,100
en bytes,

147
00:05:37,479 --> 00:05:39,861
donc ici, les éléments sont codés sur 8 bits,

148
00:05:39,961 --> 00:05:41,963
ont donc une taille de 1 byte,

149
00:05:42,655 --> 00:05:46,494
et ensuite, je peux regarder avec nbytes

150
00:05:47,398 --> 00:05:49,773
je peux regarder la taille globale de mon tableau

151
00:05:49,873 --> 00:05:51,980
de nouveau exprimée en bytes.

152
00:05:53,645 --> 00:05:55,369
Mais maintenant, regardons le cas suivant.

153
00:05:56,093 --> 00:05:58,556
Je vais reprendre un tableau NumPy,

154
00:05:59,475 --> 00:06:03,408
mais maintenant, je vais lui passer 1, 4.5 et 128.

155
00:06:04,036 --> 00:06:05,806
Et je vais spécifier comme dtype

156
00:06:06,906 --> 00:06:09,878
toujours np.int8.

157
00:06:10,790 --> 00:06:13,168
Exécutons cela et regardons ce que l'on obtient.

158
00:06:13,854 --> 00:06:14,664
Alors ici, on obtient quelque chose

159
00:06:14,764 --> 00:06:16,000
qui peut paraître un peu surprenant.

160
00:06:16,100 --> 00:06:17,567
On a toujours notre 1,

161
00:06:18,232 --> 00:06:20,365
notre 4.5 a été tronqué,

162
00:06:20,669 --> 00:06:22,388
donc ça, ça n'est pas la chose la plus surprenante

163
00:06:22,488 --> 00:06:23,869
parce qu'on sait bien que même en Python,

164
00:06:23,969 --> 00:06:25,995
lorsque l'on convertit un float en entier,

165
00:06:26,095 --> 00:06:28,365
et ici, c'est bien un entier, int8, ce sont des entiers,

166
00:06:28,465 --> 00:06:30,614
en général, on tronque la partie décimale.

167
00:06:30,714 --> 00:06:32,093
Donc on se retrouve avec 4.

168
00:06:32,525 --> 00:06:33,704
Mais la partie la plus surprenante,

169
00:06:33,804 --> 00:06:37,148
c'est que mon 128 s'est transformé en -128.

170
00:06:37,685 --> 00:06:38,885
Alors, qu'est-ce qu'il s'est passé ici ?

171
00:06:39,434 --> 00:06:40,876
En fait, je vous rappelle que le type

172
00:06:40,976 --> 00:06:42,100
des éléments stockés dans mon tableau,

173
00:06:42,200 --> 00:06:44,443
ce sont des entiers codés sur 8 bits.

174
00:06:44,543 --> 00:06:46,703
Ils ne peuvent donc prendre que 256 valeurs.

175
00:06:47,191 --> 00:06:53,386
Et en fait, ces entiers vont de -128 à 127.

176
00:06:53,726 --> 00:06:55,654
Or ici, j'ai voulu entrer la valeur 128

177
00:06:55,754 --> 00:06:56,328
donc qu'est-ce qu'il se passe ?

178
00:06:56,428 --> 00:06:58,308
J'ai dépassé la précision de mon int8.

179
00:06:58,789 --> 00:07:00,400
Dans ce cas-là, j'arrive à la dernière valeur,

180
00:07:00,500 --> 00:07:01,848
127, c'est la dernière valeur,

181
00:07:02,010 --> 00:07:03,983
je reboucle à la première valeur.

182
00:07:04,083 --> 00:07:05,494
Et quelle est la première valeur ?

183
00:07:05,594 --> 00:07:06,852
C'est -128.

184
00:07:07,474 --> 00:07:09,559
Si dans mon tableau, j'avais donné 129,

185
00:07:10,566 --> 00:07:12,203
j'aurais obtenu la deuxième valeur,

186
00:07:12,303 --> 00:07:14,276
c'est-à-dire -127.

187
00:07:15,984 --> 00:07:17,196
Alors, il y a une dernière chose importante

188
00:07:17,296 --> 00:07:18,914
à connaître sur les tableaux NumPy,

189
00:07:19,014 --> 00:07:20,445
c'est qu'il est courant en data science

190
00:07:20,545 --> 00:07:22,307
d'avoir des valeurs qui sont invalides,

191
00:07:22,407 --> 00:07:24,272
que l'on appelle, de manière courante,

192
00:07:24,372 --> 00:07:26,087
des valeurs NaN, Not a Number.

193
00:07:26,594 --> 00:07:27,699
Donc regardons cela.

194
00:07:28,520 --> 00:07:30,560
Je vais prendre un tableau a

195
00:07:34,380 --> 00:07:35,528
qui va contenir

196
00:07:36,352 --> 00:07:39,679
1, 2 et la valeur np.nan.

197
00:07:41,884 --> 00:07:44,241
Et donc maintenant, regardons le dtype de cela.

198
00:07:46,136 --> 00:07:47,824
Je vois que c'est float64.

199
00:07:48,321 --> 00:07:50,883
En fait, l'objet NaN

200
00:07:50,983 --> 00:07:54,757
n'est défini que pour les floats.

201
00:07:55,206 --> 00:07:57,200
Par conséquent, vous ne pouvez pas avoir un NaN

202
00:07:57,300 --> 00:07:58,481
dans un tableau d'entiers.

203
00:07:59,171 --> 00:08:02,435
Donc même si j'ai spécifié un entier 1, un entier 2 et NaN,

204
00:08:02,535 --> 00:08:05,739
ces entiers sont automatiquement convertis en float64.

205
00:08:06,312 --> 00:08:07,825
C'est une des limitations de NumPy,

206
00:08:07,925 --> 00:08:09,086
c'est une des limitations importantes,

207
00:08:09,186 --> 00:08:12,640
le fait que l'on n'ait pas de notion de Not a Number

208
00:08:12,740 --> 00:08:13,812
pour les entiers.

209
00:08:19,074 --> 00:08:21,946
Alors, un autre point important avec les tableaux NumPy,

210
00:08:22,411 --> 00:08:24,735
c'est que NumPy peut faire de la conversion silencieuse.

211
00:08:24,835 --> 00:08:25,750
Regardons un exemple.

212
00:08:27,112 --> 00:08:29,974
a égale np.array

213
00:08:30,606 --> 00:08:33,171
et donc ici, je vais spécifier le tableau

214
00:08:33,271 --> 00:08:37,257
1, 2, np.nan

215
00:08:37,357 --> 00:08:40,097
et maintenant ici, je vais spécifier le type

216
00:08:41,197 --> 00:08:44,294
np.int32

217
00:08:44,755 --> 00:08:46,857
J'exécute et qu'est-ce que j'obtiens ici ?

218
00:08:47,954 --> 00:08:49,151
J'obtiens une erreur

219
00:08:49,251 --> 00:08:51,900
cannot convert float NaN to integer

220
00:08:52,000 --> 00:08:53,651
Donc ici, c'est un point très important.

221
00:08:54,130 --> 00:08:56,840
Vous avez vu que lorsque je n'ai pas spécifié mon dtype,

222
00:08:56,940 --> 00:08:57,803
ici,

223
00:08:58,351 --> 00:09:01,365
NumPy a fait une conversion implicite de type.

224
00:09:01,812 --> 00:09:03,933
Par contre, si je spécifie le dtype,

225
00:09:04,398 --> 00:09:07,043
dans ce cas-là, la conversion n'est plus faite de manière implicite

226
00:09:07,143 --> 00:09:08,158
et une erreur est lancée.

227
00:09:08,258 --> 00:09:10,309
C'est pourquoi on vous recommande fortement

228
00:09:10,409 --> 00:09:13,539
de toujours spécifier le dtype dans un tableau NumPy

229
00:09:13,820 --> 00:09:15,290
pour éviter des problèmes liés

230
00:09:15,390 --> 00:09:17,620
à des conversions implicites de type.

231
00:09:18,720 --> 00:09:22,077
Pour finir, revenons aux types scalaires

232
00:09:22,177 --> 00:09:23,497
dans la catégorie Autres.

233
00:09:23,597 --> 00:09:24,617
Regardons cela.

234
00:09:24,717 --> 00:09:27,426
Je vais faire np.sctype

235
00:09:29,457 --> 00:09:32,771
et ici, je vais regarder ceux qui sont dans la catégorie others.

236
00:09:32,871 --> 00:09:34,161
Donc regardons ce qu'on a dedans.

237
00:09:34,261 --> 00:09:38,207
Donc on a bool, on a object, on a bytes, str et numpy.void.

238
00:09:38,913 --> 00:09:40,743
Lorsqu'on voit notamment bytes et str,

239
00:09:40,843 --> 00:09:42,531
on pourrait imaginer qu'en fait,

240
00:09:42,631 --> 00:09:44,464
on peut spécifier dans un tableau NumPy

241
00:09:44,564 --> 00:09:46,232
des chaînes de caractères de taille quelconque.

242
00:09:46,682 --> 00:09:47,595
Ce n'est pas du tout le cas.

243
00:09:47,695 --> 00:09:49,027
Regardons un exemple.

244
00:09:50,009 --> 00:09:51,533
Je vais créer mon tableau NumPy.

245
00:09:52,985 --> 00:09:54,008
qui va contenir

246
00:09:56,241 --> 00:09:57,812
les chaînes de caractères 'spam'

247
00:09:58,912 --> 00:10:00,571
et 'bean'.

248
00:10:01,122 --> 00:10:02,314
Et ici je spécifie,

249
00:10:02,414 --> 00:10:03,260
donc je vous rappelle maintenant

250
00:10:03,360 --> 00:10:04,140
c'est une bonne pratique

251
00:10:04,240 --> 00:10:06,104
de toujours contrôler votre dtype

252
00:10:06,204 --> 00:10:08,335
et donc de le spécifier pour ne pas laisser à NumPy

253
00:10:08,435 --> 00:10:09,486
le choix pour vous.

254
00:10:10,151 --> 00:10:11,237
Je regarde mon tableau

255
00:10:11,337 --> 00:10:12,234
et mon tableau contient bien

256
00:10:12,334 --> 00:10:14,533
les chaînes de caractères 'spam' et 'bean'.

257
00:10:14,633 --> 00:10:17,024
Donc on voit ici que ce sont des chaînes de caractères

258
00:10:17,124 --> 00:10:17,948
unicode

259
00:10:18,741 --> 00:10:21,101
qui contiennent quatre caractères.

260
00:10:21,728 --> 00:10:22,920
Donc le u, c'est pour unicode,

261
00:10:23,020 --> 00:10:24,194
et le 4, c'est pour quatre caractères.

262
00:10:24,785 --> 00:10:26,279
On voit donc ici que

263
00:10:26,837 --> 00:10:28,807
automatiquement, NumPy a détecté

264
00:10:28,907 --> 00:10:30,549
que la plus grande chaîne faisait 4 caractères

265
00:10:30,649 --> 00:10:31,924
et a codé toutes les chaînes de caractères

266
00:10:32,024 --> 00:10:32,666
sur quatre caractères.

267
00:10:33,276 --> 00:10:34,643
Regardons maintenant ce qu'il se passe

268
00:10:34,743 --> 00:10:36,222
si jamais je modifie

269
00:10:37,013 --> 00:10:37,794
la taille des chaînes.

270
00:10:37,894 --> 00:10:39,648
Par exemple, au lieu d'avoir 'bean', je prends 'beans'.

271
00:10:39,748 --> 00:10:40,930
J'exécute

272
00:10:41,308 --> 00:10:42,343
et je vois maintenant

273
00:10:43,591 --> 00:10:44,838
que NumPy a détecté

274
00:10:44,938 --> 00:10:46,762
que ma plus grande chaîne faisait 5 caractères,

275
00:10:47,206 --> 00:10:48,457
et par conséquent,

276
00:10:48,557 --> 00:10:49,503
toutes les chaînes de caractères

277
00:10:49,603 --> 00:10:51,132
sont stockées maintenant sur cinq caractères.

278
00:10:51,876 --> 00:10:53,000
Donc d'une manière générale,

279
00:10:53,100 --> 00:10:55,046
avec les types qui ont des tailles variables,

280
00:10:55,502 --> 00:10:57,883
il est beaucoup plus prudent de spécifier vous-mêmes

281
00:10:57,983 --> 00:11:00,318
la taille maximum des chaînes de caractères stockées.

282
00:11:00,475 --> 00:11:01,686
Regardons cela.

283
00:11:02,100 --> 00:11:04,366
Je vais reprendre mon tableau NumPy ici.

284
00:11:05,228 --> 00:11:06,611
Et maintenant, dans mon dtype,

285
00:11:06,711 --> 00:11:07,674
je peux lui passer un tuple

286
00:11:07,774 --> 00:11:08,656
qui va être le type

287
00:11:09,332 --> 00:11:10,781
et le nombre d'éléments stockés.

288
00:11:11,111 --> 00:11:13,427
Donc ici, je vais stocker deux caractères

289
00:11:14,167 --> 00:11:15,040
dans mon tableau.

290
00:11:15,140 --> 00:11:15,837
Regardons cela.

291
00:11:16,299 --> 00:11:18,114
J'ai bien une chaîne de caractères

292
00:11:19,214 --> 00:11:20,114
unicode

293
00:11:20,435 --> 00:11:21,829
qui ne contient que deux caractères

294
00:11:21,929 --> 00:11:23,602
et donc tout le reste a évidemment été tronqué,

295
00:11:23,702 --> 00:11:26,437
je n'ai stocké que cette chaîne de deux caractères.

296
00:11:28,012 --> 00:11:31,226
Pour finir, si on revient à nos fameux types scalaires,

297
00:11:32,807 --> 00:11:33,509
scalaire types,

298
00:11:33,953 --> 00:11:35,331
et que je reprends "others"

299
00:11:36,431 --> 00:11:37,724
je vois que dedans j'ai également

300
00:11:37,824 --> 00:11:39,454
object et numpy.void.

301
00:11:39,554 --> 00:11:41,835
Je vais aller très rapidement sur ces deux types-là.

302
00:11:42,319 --> 00:11:44,349
object en fait vous permet de stocker

303
00:11:44,449 --> 00:11:45,598
non pas des objets

304
00:11:45,698 --> 00:11:46,505
dans votre tableau NumPy,

305
00:11:46,605 --> 00:11:48,011
mais des références vers ces objets.

306
00:11:48,352 --> 00:11:49,789
En fait, le tableau NumPy ne va maintenant

307
00:11:49,889 --> 00:11:51,239
plus stocker le contenu des objets,

308
00:11:51,339 --> 00:11:52,444
mais va stocker uniquement

309
00:11:52,544 --> 00:11:53,773
des références vers ces objets.

310
00:11:54,307 --> 00:11:56,188
C'est quelque chose qu'en général on évite de faire

311
00:11:56,288 --> 00:11:58,721
parce que lorsque l'on utilise le type object,

312
00:11:59,063 --> 00:12:01,368
on a une perte de performance importante

313
00:12:01,468 --> 00:12:03,316
sur tout ce qui est opération numérique.

314
00:12:03,834 --> 00:12:05,625
Le dernier type, c'est numpy.void

315
00:12:06,323 --> 00:12:08,510
numpy.void vous permet de stocker des objets

316
00:12:08,610 --> 00:12:09,968
de taille prédéfinie

317
00:12:10,068 --> 00:12:10,821
mais de type quelconque

318
00:12:10,921 --> 00:12:11,739
dans votre tableau NumPy,

319
00:12:11,839 --> 00:12:13,597
je n'en parlerai pas plus dans cette vidéo.

320
00:12:14,697 --> 00:12:16,040
Nous avons vu dans cette vidéo

321
00:12:16,140 --> 00:12:17,655
la notion de tableau NumPy.

322
00:12:18,238 --> 00:12:20,324
La chose la plus importante à se souvenir

323
00:12:20,424 --> 00:12:21,561
à propos de ces tableaux,

324
00:12:21,661 --> 00:12:22,872
c'est que ces tableaux sont stockés

325
00:12:22,972 --> 00:12:24,641
dans une zone de mémoire contiguë

326
00:12:25,272 --> 00:12:26,857
et qu'ils ne stockent que des éléments

327
00:12:26,957 --> 00:12:28,502
qui sont tous de même type.

328
00:12:28,945 --> 00:12:31,535
Ce type peut être spécifié avec l'argument dtype

329
00:12:31,635 --> 00:12:32,630
et on recommande fortement

330
00:12:32,730 --> 00:12:34,181
de toujours contrôler le dtype

331
00:12:34,281 --> 00:12:36,383
pour éviter les conversions implicites.

332
00:12:38,142 --> 00:12:40,220
Il est classique en data science

333
00:12:40,320 --> 00:12:42,038
d'avoir des valeurs qui sont invalides ;

334
00:12:42,138 --> 00:12:43,422
sachez qu'en NumPy,

335
00:12:43,522 --> 00:12:44,683
les seules valeurs invalides

336
00:12:44,783 --> 00:12:46,301
donc les Not a Number,

337
00:12:46,401 --> 00:12:49,099
ne sont compatibles qu'avec le type float.

338
00:12:49,729 --> 00:12:50,294
À bientôt !

