1
00:00:06,498 --> 00:00:07,630
Dans cette vidéo, nous allons voir

2
00:00:07,730 --> 00:00:10,207
comment utiliser les outils standards Python.

3
00:00:11,501 --> 00:00:13,090
On va utiliser deux familles d'outils

4
00:00:13,190 --> 00:00:13,745
dans les vidéos,

5
00:00:13,845 --> 00:00:14,602
il va y avoir

6
00:00:15,008 --> 00:00:16,206
un environnement de développement

7
00:00:16,933 --> 00:00:17,737
et puis il va y avoir

8
00:00:17,837 --> 00:00:19,339
l'interpréteur Python de base.

9
00:00:20,544 --> 00:00:22,262
Je vais commencer par vous montrer

10
00:00:22,362 --> 00:00:23,437
l'environnement de développement.

11
00:00:23,821 --> 00:00:25,687
Nous avons choisi d'utiliser IDLE

12
00:00:25,787 --> 00:00:27,143
parce qu'il fait partie de la librairie standard.

13
00:00:27,621 --> 00:00:29,011
Vous pouvez bien entendu utiliser

14
00:00:29,111 --> 00:00:31,783
de votre côté PyCharm, Spyder, Emacs

15
00:00:31,883 --> 00:00:33,325
ou ce que vous avez l'habitude d'utiliser

16
00:00:33,705 --> 00:00:36,496
mais, comme on utilise IDLE dans les vidéos,

17
00:00:36,596 --> 00:00:37,314
c'est quand même important

18
00:00:37,414 --> 00:00:40,135
que vous ayez quelques très rapides notions.

19
00:00:40,235 --> 00:00:41,013
De toute façon, on utilise

20
00:00:41,113 --> 00:00:42,210
très, très, très peu de choses.

21
00:00:44,114 --> 00:00:45,789
Je vais lancer IDLE sur ma machine.

22
00:00:47,657 --> 00:00:49,301
Vous pouvez le trouver sur Windows

23
00:00:49,401 --> 00:00:51,035
dans le menu Démarrer,

24
00:00:51,548 --> 00:00:52,702
enfin, il s'est installé avec Python

25
00:00:52,802 --> 00:00:53,388
quelque part.

26
00:00:53,589 --> 00:00:54,255
La première chose

27
00:00:54,355 --> 00:00:55,713
que je voulais vous montrer,

28
00:00:55,813 --> 00:00:57,810
c'est de bien vérifier le numéro de Python.

29
00:00:58,641 --> 00:00:59,977
Je vous répète que nos vidéos

30
00:01:00,077 --> 00:01:01,437
ont été faites avec 3.6,

31
00:01:01,834 --> 00:01:03,571
on utilise très souvent les f-strings

32
00:01:03,671 --> 00:01:06,036
donc si vous utilisez 3.5,

33
00:01:06,136 --> 00:01:07,437
il y aura un certain nombre d'exemples

34
00:01:07,537 --> 00:01:08,081
qui ne vont pas marcher

35
00:01:08,181 --> 00:01:09,129
exactement à l'identique.

36
00:01:11,478 --> 00:01:11,952
Voilà.

37
00:01:12,666 --> 00:01:15,580
Ce sur quoi je tombe

38
00:01:15,680 --> 00:01:16,777
lorsque j'ai appelé IDLE,

39
00:01:16,877 --> 00:01:18,699
c'est un interpréteur interactif

40
00:01:18,799 --> 00:01:20,704
dans lequel je peux taper simplement

41
00:01:21,494 --> 00:01:22,758
des phrases comme sur une calculette.

42
00:01:23,538 --> 00:01:25,004
Je peux faire des choses simples comme

43
00:01:25,104 --> 00:01:28,023
affecter une variable à une valeur,

44
00:01:28,123 --> 00:01:29,959
je peux imprimer cette variable,

45
00:01:33,673 --> 00:01:34,704
toutes ces choses, bien sûr,

46
00:01:34,804 --> 00:01:35,238
on y reviendra

47
00:01:35,338 --> 00:01:36,092
dans les semaines qui viennent.

48
00:01:37,175 --> 00:01:38,592
Je vais vous montrer

49
00:01:38,692 --> 00:01:41,592
comment je pourrais implémenter

50
00:01:41,692 --> 00:01:44,416
une petite fonction polynômiale.

51
00:01:45,604 --> 00:01:46,129
Je vous ai dit que

52
00:01:46,229 --> 00:01:47,759
la syntaxe était orientée par la présentation,

53
00:01:48,359 --> 00:01:49,605
je mets une indentation,

54
00:01:49,705 --> 00:01:50,499
enfin, plus exactement,

55
00:01:50,599 --> 00:01:52,351
l'outil me l'a mise déjà tout seul.

56
00:01:53,164 --> 00:01:54,737
Et je vais faire, par exemple,

57
00:01:55,096 --> 00:01:59,064
2x carré + 4 fois x + 10

58
00:02:00,967 --> 00:02:01,765
J'ai fait une petite erreur,

59
00:02:01,865 --> 00:02:03,203
ça me donne l'occasion de vous montrer

60
00:02:03,303 --> 00:02:04,317
comment je peux rectifier,

61
00:02:04,417 --> 00:02:05,675
je monte dans l'historique,

62
00:02:06,211 --> 00:02:07,325
j'appuie sur Entrée,

63
00:02:07,425 --> 00:02:09,332
ça me recopie le bloc de code

64
00:02:09,432 --> 00:02:10,266
que je viens de faire

65
00:02:10,607 --> 00:02:11,843
et je corrige mon erreur

66
00:02:11,943 --> 00:02:12,557
qui est tout simplement

67
00:02:12,657 --> 00:02:13,941
d'avoir oublié un multiplié.

68
00:02:15,752 --> 00:02:17,512
Donc j'ai défini une fonction polynôme.

69
00:02:17,612 --> 00:02:18,620
Je peux l'appeler.

70
00:02:21,729 --> 00:02:22,645
Je vous ai déjà montré

71
00:02:22,745 --> 00:02:23,941
comment on modifiait le code

72
00:02:24,041 --> 00:02:25,435
donc ça, ça ne sera pas nécessaire

73
00:02:25,535 --> 00:02:25,976
de le faire.

74
00:02:26,301 --> 00:02:27,832
Je vais appeler

75
00:02:29,927 --> 00:02:31,206
une fonction qui n'existe pas,

76
00:02:31,306 --> 00:02:32,425
je me trompe, j'ai oublié un e,

77
00:02:32,525 --> 00:02:33,830
ce qu'il se passe avec Python,

78
00:02:33,930 --> 00:02:35,259
c'est qu'il va lever

79
00:02:35,359 --> 00:02:36,273
ce qu'on appelle une exception.

80
00:02:37,317 --> 00:02:38,635
Il vous indique assez clairement que

81
00:02:39,079 --> 00:02:40,846
j'ai utilisé un nom qui n'était pas le bon,

82
00:02:40,946 --> 00:02:43,197
c'est pratiquement toujours de cette façon

83
00:02:43,297 --> 00:02:43,919
que ça se présente

84
00:02:44,019 --> 00:02:45,538
lorsque vous faites une erreur,

85
00:02:45,638 --> 00:02:46,624
vous pouvez avoir des erreurs de syntaxe,

86
00:02:46,724 --> 00:02:48,037
vous pouvez avoir des erreurs

87
00:02:48,137 --> 00:02:48,972
qui sont des exceptions.

88
00:02:49,688 --> 00:02:50,446
Avec l'expérience,

89
00:02:50,546 --> 00:02:51,898
vous allez apprendre assez vite à

90
00:02:52,395 --> 00:02:54,680
comprendre comment vous dépatouiller

91
00:02:54,780 --> 00:02:55,669
des erreurs que vous faites.

92
00:02:56,712 --> 00:02:58,009
Je vais vous montrer maintenant

93
00:02:58,694 --> 00:02:59,775
comment est-ce qu'on peut avoir

94
00:02:59,875 --> 00:03:00,549
un petit peu d'aide,

95
00:03:00,649 --> 00:03:02,114
avec des fonctionnalités qui sont

96
00:03:02,560 --> 00:03:03,714
natives en Python.

97
00:03:03,985 --> 00:03:05,163
Pour faire ça,

98
00:03:05,263 --> 00:03:07,047
j'en profite pour vous montrer également

99
00:03:07,147 --> 00:03:09,387
comment on peut importer du code,

100
00:03:09,487 --> 00:03:10,090
donc là, en l'occurrence,

101
00:03:10,190 --> 00:03:11,389
j'importe le module mathématique.

102
00:03:11,797 --> 00:03:13,886
À nouveau, on expliquera tout ça

103
00:03:13,986 --> 00:03:15,206
en long, en large et en travers,

104
00:03:15,306 --> 00:03:16,066
dans les semaines qui viennent

105
00:03:16,166 --> 00:03:16,588
mais il me faut bien

106
00:03:16,688 --> 00:03:18,841
un petit peu de matière.

107
00:03:19,737 --> 00:03:21,449
Vous pouvez sur un module

108
00:03:22,407 --> 00:03:23,298
utiliser une fonction en Python

109
00:03:23,398 --> 00:03:24,123
qui s'appelle dir

110
00:03:24,223 --> 00:03:25,247
pour obtenir la liste,

111
00:03:25,347 --> 00:03:27,074
le contenu du module en réalité.

112
00:03:27,457 --> 00:03:28,946
Par exemple, dans le module math,

113
00:03:29,046 --> 00:03:29,922
j'ai un certain nombre de fonctions

114
00:03:30,022 --> 00:03:31,450
comme les tangentes, les cosinus,

115
00:03:31,550 --> 00:03:33,274
les exponentielles, ce genre de choses.

116
00:03:33,583 --> 00:03:35,761
Je peux, par exemple, obtenir de l'aide

117
00:03:35,861 --> 00:03:37,488
aussi sur un symbole

118
00:03:37,588 --> 00:03:40,756
en faisant help de,

119
00:03:41,368 --> 00:03:42,307
en l'occurrence, je vais faire

120
00:03:42,407 --> 00:03:44,377
math point ceiling

121
00:03:46,430 --> 00:03:48,428
Tout ça repose sur le système d'aide en ligne.

122
00:03:49,881 --> 00:03:51,273
En Python, on va vous montrer comment

123
00:03:51,373 --> 00:03:54,103
on peut rajouter, à l'intérieur du code,

124
00:03:54,203 --> 00:03:56,022
la documentation qui est associée

125
00:03:56,122 --> 00:03:57,057
aux différentes fonctions,

126
00:03:58,023 --> 00:03:58,702
en l'occurrence,

127
00:03:59,779 --> 00:04:01,634
voilà la documentation de ceiling.

128
00:04:02,799 --> 00:04:03,983
Donc tout ça, c'est très bien,

129
00:04:04,083 --> 00:04:05,986
on utilisera cet interpréteur

130
00:04:06,203 --> 00:04:07,415
assez fréquemment dans le cours

131
00:04:07,685 --> 00:04:08,642
mais bien entendu,

132
00:04:08,742 --> 00:04:09,706
on ne peut pas se permettre

133
00:04:09,806 --> 00:04:12,113
de retaper à chaque fois tout le code

134
00:04:12,213 --> 00:04:12,977
et donc, on va avoir envie

135
00:04:13,077 --> 00:04:14,024
d'utiliser des fichiers.

136
00:04:14,124 --> 00:04:14,912
Je vais vous montrer

137
00:04:15,254 --> 00:04:16,719
comment ça se présente avec IDLE.

138
00:04:17,357 --> 00:04:19,740
Je crée tout simplement un nouveau fichier.

139
00:04:20,629 --> 00:04:22,072
Je vais commencer par mettre

140
00:04:22,335 --> 00:04:23,318
un commentaire,

141
00:04:24,303 --> 00:04:25,805
en Python, les commentaires

142
00:04:25,905 --> 00:04:26,892
commencent par des dièses,

143
00:04:26,992 --> 00:04:29,415
tout ce qui est après un dièse

144
00:04:30,224 --> 00:04:30,820
sur une ligne

145
00:04:30,920 --> 00:04:32,019
est considéré comme un commentaire.

146
00:04:32,761 --> 00:04:34,970
Je vais définir

147
00:04:35,070 --> 00:04:37,032
l'incontournable fonction factorielle.

148
00:04:38,397 --> 00:04:39,970
Alors, je vais aussi vous montrer

149
00:04:40,070 --> 00:04:41,754
un truc qui s'appelle docstring.

150
00:04:41,854 --> 00:04:42,664
C'est là exactement

151
00:04:42,764 --> 00:04:46,405
que va se situer la documentation en ligne

152
00:04:46,505 --> 00:04:48,369
que je viens de vous montrer avec help.

153
00:04:48,646 --> 00:04:49,430
Si je mets,

154
00:04:49,948 --> 00:04:51,300
je ne vais pas y passer deux heures,

155
00:04:51,400 --> 00:04:52,518
le factoriel,

156
00:04:56,599 --> 00:04:57,312
voilà,

157
00:04:57,924 --> 00:04:59,374
et maintenant,

158
00:04:59,474 --> 00:05:00,590
je peux rentrer mon code Python

159
00:05:00,690 --> 00:05:01,519
et je dis que

160
00:05:01,619 --> 00:05:04,309
si n est plus petit que 1

161
00:05:04,409 --> 00:05:06,037
alors je retourne 1,

162
00:05:07,410 --> 00:05:08,172
et sinon,

163
00:05:08,272 --> 00:05:09,149
je retourne,

164
00:05:10,379 --> 00:05:13,615
n fois factoriel de n moins 1

165
00:05:14,307 --> 00:05:15,690
Bon voilà, j'ai une petite fonction Python

166
00:05:15,790 --> 00:05:16,216
toute simple.

167
00:05:16,574 --> 00:05:18,260
Je vais, bien entendu, la sauver

168
00:05:20,361 --> 00:05:22,691
avec pomme + S ou save,

169
00:05:22,791 --> 00:05:23,856
enfin, comme d'habitude.

170
00:05:24,278 --> 00:05:26,524
On me demande, naturellement,

171
00:05:26,624 --> 00:05:27,612
un nom de fichier.

172
00:05:29,268 --> 00:05:30,059
Je sauve.

173
00:05:30,159 --> 00:05:30,649
Et maintenant,

174
00:05:30,749 --> 00:05:32,433
pour communiquer avec l'interpréteur,

175
00:05:32,533 --> 00:05:34,876
l'autre morceau d'IDLE si vous préférez,

176
00:05:35,322 --> 00:05:37,188
je vais utiliser une fonction

177
00:05:37,288 --> 00:05:39,307
qui s'appelle Run module

178
00:05:39,407 --> 00:05:41,575
que je peux invoquer aussi avec F5,

179
00:05:41,675 --> 00:05:43,251
et on fera pratiquement toujours F5.

180
00:05:46,538 --> 00:05:48,369
En l'occurrence, je vais faire

181
00:05:48,822 --> 00:05:49,990
Run module comme ceci.

182
00:05:50,842 --> 00:05:51,969
Ce qu'il va se passer maintenant,

183
00:05:52,246 --> 00:05:54,696
c'est que le contenu du module

184
00:05:54,796 --> 00:05:56,508
a été transmis à l'interpréteur

185
00:05:56,977 --> 00:05:59,283
qui, pour me faciliter la vie,

186
00:05:59,383 --> 00:06:00,424
s'est en fait remis à zéro.

187
00:06:00,524 --> 00:06:01,916
Ça veut dire que les symboles

188
00:06:02,016 --> 00:06:02,903
que j'avais définis tout à l'heure,

189
00:06:03,003 --> 00:06:03,631
vous vous souvenez que j'avais

190
00:06:03,731 --> 00:06:05,094
un symbole qui s'appelait polynome,

191
00:06:05,194 --> 00:06:06,596
j'avais un symbole qui s'appelait a,

192
00:06:06,929 --> 00:06:08,592
ils ont été remis à zéro,

193
00:06:08,692 --> 00:06:10,660
je suis reparti d'un interpréteur vide.

194
00:06:10,760 --> 00:06:11,314
Donc si maintenant,

195
00:06:11,414 --> 00:06:13,554
j'essaie d'évaluer polynome de 10,

196
00:06:13,654 --> 00:06:15,786
on me dit que la fonction n'existe pas.

197
00:06:16,160 --> 00:06:18,084
Par contre, je peux

198
00:06:20,154 --> 00:06:21,925
évaluer factoriel qui se trouve dans le module

199
00:06:22,025 --> 00:06:23,708
que je viens de passer à l'interpréteur.

200
00:06:30,152 --> 00:06:32,683
C'est cette boucle qui va nous permettre,

201
00:06:32,783 --> 00:06:34,482
en gros, de travailler

202
00:06:34,582 --> 00:06:35,240
en mode développement.

203
00:06:35,340 --> 00:06:36,739
C'est que vous êtes dans un fichier

204
00:06:36,839 --> 00:06:38,116
et vous faites des modifications,

205
00:06:38,632 --> 00:06:40,295
vous les passez à l'interpréteur

206
00:06:40,395 --> 00:06:41,373
qui les évalue,

207
00:06:41,473 --> 00:06:42,532
vous repassez dans le fichier

208
00:06:42,632 --> 00:06:43,604
pour faire des modifications,

209
00:06:43,704 --> 00:06:44,396
vous les évaluez, voilà !

210
00:06:44,496 --> 00:06:46,795
C'est le principe qu'il y a derrière IDLE.

211
00:06:46,895 --> 00:06:49,530
Je vais maintenant quitter IDLE.

212
00:06:51,086 --> 00:06:52,106
Je vais à présent vous montrer

213
00:06:52,206 --> 00:06:53,800
comment on utilise l'interpréteur Python.

214
00:06:54,206 --> 00:06:55,512
Donc, l'interpréteur Python,

215
00:06:56,323 --> 00:06:58,099
c'est le petit moteur

216
00:06:58,199 --> 00:06:59,518
qui fait tourner vos programmes Python,

217
00:06:59,963 --> 00:07:01,085
c'est ce dont vous avez besoin

218
00:07:01,185 --> 00:07:02,452
pour faire tourner les programmes

219
00:07:02,552 --> 00:07:04,673
chez un client ou chez un utilisateur,

220
00:07:04,773 --> 00:07:05,985
il n'y aura besoin de rien d'autre

221
00:07:06,085 --> 00:07:07,641
mais il y aura besoin d'un interpréteur Python.

222
00:07:08,599 --> 00:07:10,039
La façon dont ça fonctionne,

223
00:07:10,139 --> 00:07:10,907
je vais vous montrer.

224
00:07:11,007 --> 00:07:12,794
Je lance un terminal.

225
00:07:13,721 --> 00:07:15,694
Sous Windows, vous utilisez cmd

226
00:07:15,794 --> 00:07:16,739
pour lancer un terminal.

227
00:07:19,111 --> 00:07:21,185
Je me place dans l'endroit

228
00:07:21,285 --> 00:07:23,729
où on a sauvé factoriel tout à l'heure.

229
00:07:24,648 --> 00:07:27,379
Et je vais lancer le programme factoriel

230
00:07:27,479 --> 00:07:28,650
sauf que le programme factoriel aujourd'hui,

231
00:07:28,750 --> 00:07:29,762
il n'a rien dedans,

232
00:07:29,862 --> 00:07:30,654
tout à l'heure, on a simplement

233
00:07:30,754 --> 00:07:31,246
écrit une fonction.

234
00:07:31,711 --> 00:07:33,439
Donc je vais l'éditer

235
00:07:34,085 --> 00:07:35,788
pour lui rajouter quelque chose

236
00:07:35,888 --> 00:07:38,157
qui produise effectivement une sortie,

237
00:07:38,257 --> 00:07:39,518
pour qu'on y voie quelque chose.

238
00:07:41,483 --> 00:07:42,395
Voilà.

239
00:07:43,023 --> 00:07:45,285
Et donc, l'interpréteur Python,

240
00:07:45,385 --> 00:07:46,525
ça va se lancer exactement comme ça.

241
00:07:46,625 --> 00:07:47,548
D'abord, je vous montre

242
00:07:47,648 --> 00:07:49,068
le numéro de version,

243
00:07:49,168 --> 00:07:50,715
de nouveau pour vous montrer ça, 3.6

244
00:07:51,144 --> 00:07:52,453
mais pour le lancer

245
00:07:52,553 --> 00:07:53,498
sur un programme tout fait,

246
00:07:53,598 --> 00:07:55,083
vous donnez simplement

247
00:07:55,183 --> 00:07:56,194
le nom du programme,

248
00:07:56,720 --> 00:07:58,259
vous voyez que c'est extrêmement simple.

249
00:07:58,737 --> 00:08:00,673
Alors, maintenant, nous allons utiliser, nous,

250
00:08:00,773 --> 00:08:01,240
dans les vidéos,

251
00:08:01,862 --> 00:08:03,376
un utilitaire qui s'appelle IPython

252
00:08:03,476 --> 00:08:05,854
qui offre une fonctionnalité à peu près voisine

253
00:08:05,954 --> 00:08:08,043
simplement un petit peu plus agréable.

254
00:08:08,143 --> 00:08:09,745
Ça se présente de cette façon-là.

255
00:08:12,133 --> 00:08:13,292
Je lance IPython.

256
00:08:14,175 --> 00:08:16,080
Vous avez pour commencer une aide en ligne

257
00:08:16,180 --> 00:08:17,136
que vous pouvez joindre

258
00:08:17,236 --> 00:08:18,350
avec le point d'interrogation,

259
00:08:19,259 --> 00:08:21,395
je vous encourage à jeter un coup d'œil.

260
00:08:21,831 --> 00:08:23,416
Ce qu'on va faire avec IPython,

261
00:08:23,862 --> 00:08:25,425
dans l'immédiat,

262
00:08:25,525 --> 00:08:31,608
ça va être de définir une autre fonction,

263
00:08:31,708 --> 00:08:32,342
alors, on va changer,

264
00:08:32,442 --> 00:08:33,613
on va prendre fibonacci.

265
00:08:35,417 --> 00:08:37,203
Alors, fibonacci, c'est une fonction

266
00:08:37,303 --> 00:08:38,263
qui renvoie 1

267
00:08:38,363 --> 00:08:41,431
si l'entrée est inférieure ou égale à 1,

268
00:08:42,998 --> 00:08:44,615
et sinon, c'est

269
00:08:44,715 --> 00:08:46,983
fibonacci de n moins 1

270
00:08:48,511 --> 00:08:50,999
plus fibonacci de n moins 2.

271
00:08:51,099 --> 00:08:51,594
Alors, évidemment,

272
00:08:52,296 --> 00:08:53,751
une façon extrêmement inefficace

273
00:08:53,851 --> 00:08:54,947
d'implémenter fibonacci,

274
00:08:55,047 --> 00:08:56,115
ça n'a pas d'importance, ce n'est pas du tout

275
00:08:56,215 --> 00:08:56,935
ce que je veux vous montrer.

276
00:08:58,036 --> 00:09:00,660
Dans IPython, vous avez la complétion,

277
00:09:00,760 --> 00:09:02,385
si je fais tabulation

278
00:09:02,485 --> 00:09:03,965
alors, je n'ai qu'un seul symbole,

279
00:09:04,065 --> 00:09:06,613
je tombe là-dessus,

280
00:09:07,304 --> 00:09:08,417
vous avez également

281
00:09:08,763 --> 00:09:10,369
l'aide en ligne.

282
00:09:10,469 --> 00:09:12,443
Je fais par exemple fibonacci,

283
00:09:12,858 --> 00:09:13,798
non, pas fibonacci,

284
00:09:13,898 --> 00:09:16,454
on va prendre plutôt le module math

285
00:09:16,554 --> 00:09:17,189
comme tout à l'heure.

286
00:09:19,031 --> 00:09:20,216
Avec la complétion,

287
00:09:20,316 --> 00:09:21,945
je peux avoir une liste

288
00:09:22,501 --> 00:09:24,988
des fonctions du module,

289
00:09:25,088 --> 00:09:26,944
je vais choisir ceiling comme tout à l'heure.

290
00:09:27,044 --> 00:09:29,580
Je peux avoir l'aide en ligne

291
00:09:29,680 --> 00:09:31,452
en tapant point d'interrogation à la fin.

292
00:09:34,644 --> 00:09:35,988
Je peux bien entendu

293
00:09:36,633 --> 00:09:37,350
appeler ça.

294
00:09:37,450 --> 00:09:40,737
Et pour modifier le code dans les historiques,

295
00:09:40,837 --> 00:09:42,787
vous utilisez les flèches pour monter

296
00:09:43,395 --> 00:09:45,384
et vous éditez,

297
00:09:45,484 --> 00:09:46,559
c'est relativement simple,

298
00:09:46,659 --> 00:09:48,773
vous éditez le texte,

299
00:09:48,873 --> 00:09:49,591
simplement, vous devez aller

300
00:09:49,691 --> 00:09:50,452
à la fin de la ligne

301
00:09:50,865 --> 00:09:52,506
pour le valider.

302
00:09:52,606 --> 00:09:54,046
Vous voyez, c'est une fonctionnalité

303
00:09:54,146 --> 00:09:54,845
extrêmement simple

304
00:09:54,945 --> 00:09:58,253
d'édition et de complétion

305
00:09:58,353 --> 00:10:01,587
qui est disponible sous IPython,

306
00:10:01,687 --> 00:10:03,799
qui est à nouveau l'outil qu'on utilisera

307
00:10:03,899 --> 00:10:05,225
la plupart du temps dans les vidéos.

308
00:10:05,978 --> 00:10:07,732
Voici qui conclut la présentation

309
00:10:07,832 --> 00:10:08,554
des outils Python.

310
00:10:08,983 --> 00:10:11,038
Et je vous retrouve dans une vidéo suivante

311
00:10:11,138 --> 00:10:12,176
pour vous expliquer comment

312
00:10:12,276 --> 00:10:13,341
utiliser les notebooks.

313
00:10:13,676 --> 00:10:14,351
À bientôt !

