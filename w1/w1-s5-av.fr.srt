1
00:00:05,321 --> 00:00:07,175
Bonjour, je suis Arnaud Legout

2
00:00:07,225 --> 00:00:08,456
et nous allons passer les prochaines

3
00:00:08,556 --> 00:00:10,156
semaines de ce MOOC ensemble.

4
00:00:10,856 --> 00:00:12,015
Dans cette vidéo,

5
00:00:12,115 --> 00:00:14,175
nous allons découvrir les notions d'objet,

6
00:00:14,275 --> 00:00:16,610
de variable et de typage dynamique.

7
00:00:16,710 --> 00:00:18,200
Pourquoi est-ce que ces notions

8
00:00:18,300 --> 00:00:19,678
sont tellement importantes en Python ?

9
00:00:19,778 --> 00:00:21,278
Parce qu'en Python, tout est un objet.

10
00:00:21,378 --> 00:00:22,670
Par conséquent, dans vos programmes,

11
00:00:22,760 --> 00:00:24,646
vous aurez à manipuler de nombreux objets.

12
00:00:24,746 --> 00:00:25,660
Et le moyen en Python

13
00:00:25,760 --> 00:00:26,800
de manipuler ces objets,

14
00:00:26,900 --> 00:00:27,680
c'est de leur donner un nom

15
00:00:27,780 --> 00:00:29,096
par l'intermédiaire de variables.

16
00:00:29,196 --> 00:00:30,310
On dit que les variables

17
00:00:30,410 --> 00:00:31,772
référencent les objets.

18
00:00:31,872 --> 00:00:34,492
Regardons maintenant cette notion d'objet.

19
00:00:34,592 --> 00:00:37,674
Dans un programme informatique, un objet

20
00:00:37,774 --> 00:00:39,077
est un morceau de code

21
00:00:39,177 --> 00:00:40,836
qui va contenir des données.

22
00:00:40,936 --> 00:00:42,286
Mais il va également contenir

23
00:00:42,386 --> 00:00:43,780
un ensemble de mécanismes

24
00:00:43,880 --> 00:00:45,550
qui permettent de manipuler ces données

25
00:00:45,650 --> 00:00:47,150
et que l'on appelle méthodes.

26
00:00:47,450 --> 00:00:50,002
Les objets ont tous un type.

27
00:00:50,102 --> 00:00:52,400
Le type est le comportement par défaut

28
00:00:52,500 --> 00:00:54,134
qui va être défini pour ces objets.

29
00:00:54,234 --> 00:00:55,370
Par conséquent, le type

30
00:00:55,470 --> 00:00:56,500
va permettre de définir

31
00:00:56,600 --> 00:00:58,010
les données et les méthodes

32
00:00:58,110 --> 00:00:59,885
qui vont être associées à cet objet.

33
00:01:00,900 --> 00:01:02,300
Prenons l'analogie d'une chaîne

34
00:01:02,400 --> 00:01:03,740
de montage de voitures.

35
00:01:03,840 --> 00:01:05,230
Lorsque vous avez une usine,

36
00:01:05,330 --> 00:01:07,018
votre usine va construire des voitures,

37
00:01:07,118 --> 00:01:08,490
et c'est cette usine qui va définir

38
00:01:08,590 --> 00:01:10,100
un ensemble de comportements

39
00:01:10,200 --> 00:01:11,800
que toutes les voitures qui vont sortir

40
00:01:11,900 --> 00:01:13,450
de la chaîne de montage

41
00:01:13,550 --> 00:01:14,337
vont avoir.

42
00:01:14,437 --> 00:01:17,400
Donc par exemple, la puissance du moteur,

43
00:01:17,500 --> 00:01:18,230
le fait que votre voiture va avoir

44
00:01:18,330 --> 00:01:19,440
des clignotants, des accélérateurs,

45
00:01:19,540 --> 00:01:20,450
vont être déterminés

46
00:01:20,550 --> 00:01:21,487
par votre chaîne de montage.

47
00:01:21,687 --> 00:01:23,560
On peut donc dire que la chaîne de montage

48
00:01:23,660 --> 00:01:25,200
détermine le type des voitures

49
00:01:25,300 --> 00:01:26,683
qui vont sortir de cette chaîne

50
00:01:26,783 --> 00:01:27,900
et que la voiture est l'objet

51
00:01:28,000 --> 00:01:30,840
qui sort de cette chaîne de montage.

52
00:01:31,500 --> 00:01:32,440
Revenons maintenant

53
00:01:32,540 --> 00:01:33,880
à nos programmes informatiques,

54
00:01:33,780 --> 00:01:35,700
à nos objets informatiques.

55
00:01:36,600 --> 00:01:38,380
Je vais représenter l'ensemble des objets

56
00:01:38,480 --> 00:01:40,198
que l'on a dans la mémoire de l'ordinateur.

57
00:01:41,300 --> 00:01:42,540
Maintenant, créons un objet,

58
00:01:42,640 --> 00:01:44,050
créons notre premier objet python.

59
00:01:44,150 --> 00:01:45,440
Pour cela, nous allons créer un objet de type

60
00:01:45,540 --> 00:01:46,600
chaîne de caractères,

61
00:01:46,700 --> 00:01:47,440
nous reviendrons largement

62
00:01:47,540 --> 00:01:49,060
sur ce type d'objet dans la suite.

63
00:01:49,160 --> 00:01:50,910
Pour créer un objet chaîne de caractères

64
00:01:51,010 --> 00:01:52,680
vous mettez deux apostrophes

65
00:01:52,780 --> 00:01:53,800
et entre les apostrophes, vous mettez

66
00:01:53,900 --> 00:01:55,195
la chaîne de caractères que vous voulez créer.

67
00:01:56,000 --> 00:01:58,050
Lorsque vous appuyez sur le retour chariot,

68
00:01:58,150 --> 00:01:59,650
l'interpréteur Python va créer

69
00:01:59,750 --> 00:02:01,550
cet objet chaîne de caractères.

70
00:02:01,650 --> 00:02:02,526
Nous voyons que cet objet

71
00:02:02,626 --> 00:02:03,550
a des données associées

72
00:02:03,650 --> 00:02:04,950
c'est le mot "spam"

73
00:02:05,650 --> 00:02:06,800
et cet objet a également

74
00:02:06,900 --> 00:02:08,470
un ensemble de méthodes

75
00:02:08,570 --> 00:02:10,585
comme par exemple la méthode upper().

76
00:02:10,685 --> 00:02:11,790
D'où viennent les méthodes

77
00:02:11,890 --> 00:02:12,620
de la chaîne de caractères

78
00:02:12,720 --> 00:02:13,570
puisque nous n'avons rien

79
00:02:13,670 --> 00:02:14,460
défini nous-mêmes ?

80
00:02:15,000 --> 00:02:16,490
En fait, toutes les méthodes

81
00:02:16,600 --> 00:02:17,600
de la chaîne de caractères

82
00:02:17,700 --> 00:02:19,854
viennent grâce à son type

83
00:02:19,954 --> 00:02:21,523
le type "chaîne de caractères".

84
00:02:21,623 --> 00:02:23,310
Maintenant, nous pouvons appeler

85
00:02:23,410 --> 00:02:24,470
les méthodes sur ces objets.

86
00:02:24,570 --> 00:02:26,370
Pour appeler une méthode sur un objet,

87
00:02:26,470 --> 00:02:27,670
c'est très simple, il suffit d'utiliser

88
00:02:27,770 --> 00:02:29,000
la notation "point".

89
00:02:30,200 --> 00:02:31,852
Pour cela, nous allons mettre l'objet

90
00:02:31,952 --> 00:02:34,612
"point" la méthode que l'on veut appeler.

91
00:02:34,712 --> 00:02:36,727
et n'oublions pas de mettre les parenthèses

92
00:02:36,827 --> 00:02:37,800
ouvrante et fermante

93
00:02:37,900 --> 00:02:39,148
qui permettent de déclencher

94
00:02:39,248 --> 00:02:42,650
l'exécution de la méthode upper()

95
00:02:42,750 --> 00:02:43,840
sur l'objet "spam".

96
00:02:45,440 --> 00:02:46,860
Maintenant que nous avons vu

97
00:02:46,960 --> 00:02:49,040
cette notion d'objet,

98
00:02:49,140 --> 00:02:51,054
regardons comment nommer les objets.

99
00:02:51,154 --> 00:02:52,410
On dit les référencer.

100
00:02:53,600 --> 00:02:56,410
Pour cela, on va affecter

101
00:02:56,510 --> 00:02:58,500
un objet à un nom de variable

102
00:02:58,600 --> 00:02:59,890
particulier avec une notation

103
00:02:59,990 --> 00:03:01,640
que l'on appelle la notation d'affectation.

104
00:03:01,740 --> 00:03:04,090
Donc supposons que nous voulions

105
00:03:04,190 --> 00:03:06,560
nommer l'entier 1,

106
00:03:06,660 --> 00:03:09,160
nous allons écrire note "égale" 1,

107
00:03:09,260 --> 00:03:11,555
ce qui veut dire que la variable de nom "note"

108
00:03:11,655 --> 00:03:13,540
va maintenant référencer l'objet 1.

109
00:03:13,640 --> 00:03:15,780
On pourra ainsi manipuler cet objet

110
00:03:15,880 --> 00:03:17,830
par l'intermédiaire de ce nom de variable.

111
00:03:18,930 --> 00:03:20,390
Un nom de variable en Python

112
00:03:20,490 --> 00:03:21,370
peut être défini par

113
00:03:21,470 --> 00:03:23,590
n'importe quelle lettre en minuscule,

114
00:03:23,690 --> 00:03:25,100
n'importe quelle lettre en majuscule,

115
00:03:25,200 --> 00:03:27,390
les entiers allant de 0 à 9

116
00:03:27,490 --> 00:03:29,740
et également le caractère tiret bas

117
00:03:29,840 --> 00:03:31,500
que l'on appelle également "underscore".

118
00:03:33,080 --> 00:03:34,190
Un nom de variable peut commencer

119
00:03:34,290 --> 00:03:35,190
par une lettre,

120
00:03:35,290 --> 00:03:36,940
ça peut également commencer

121
00:03:37,040 --> 00:03:38,290
par l'underscore mais ça ne peut pas

122
00:03:38,390 --> 00:03:40,570
commencer par un chiffre.

123
00:03:43,150 --> 00:03:45,230
Un nom de variable prend en compte

124
00:03:45,330 --> 00:03:47,340
la casse, c'est-à-dire qu'un nom en minuscule

125
00:03:47,440 --> 00:03:48,900
et un nom en majuscule vont représenter

126
00:03:49,000 --> 00:03:50,520
deux variables différentes.

127
00:03:51,250 --> 00:03:53,540
Pour finir, il est très important en Python

128
00:03:53,640 --> 00:03:54,640
de donner des noms de variable

129
00:03:54,740 --> 00:03:55,800
qui sont explicites.

130
00:03:55,900 --> 00:03:58,080
Par exemple, moyenne_age_francais

131
00:03:58,180 --> 00:03:59,200
est un bon nom de variable,

132
00:03:59,300 --> 00:04:01,050
meilleur que moy_age_f

133
00:04:01,150 --> 00:04:03,450
et bien meilleur que simplement la variable x.

134
00:04:03,550 --> 00:04:05,250
Il est très important de donner

135
00:04:05,350 --> 00:04:06,100
de donner des bons noms de variable

136
00:04:06,200 --> 00:04:08,175
puisque ça participe à la documentation

137
00:04:08,275 --> 00:04:09,300
automatique de votre code.

138
00:04:09,400 --> 00:04:11,370
Et nous verrons dans les prochaines vidéos

139
00:04:11,470 --> 00:04:13,100
et les semaines suivantes que Python offre

140
00:04:13,200 --> 00:04:14,260
de nombreux mécanismes

141
00:04:14,360 --> 00:04:16,720
pour faciliter ce nommage explicite

142
00:04:16,820 --> 00:04:18,130
des objets que l'on manipule.

143
00:04:19,500 --> 00:04:21,015
Maintenant que nous avons vu les notions

144
00:04:21,115 --> 00:04:22,595
d'objet et de variable,

145
00:04:22,695 --> 00:04:24,736
parlons de la dernière notion importante

146
00:04:24,836 --> 00:04:25,770
de cette vidéo, qui est

147
00:04:25,770 --> 00:04:27,355
le typage dynamique.

148
00:04:27,500 --> 00:04:30,300
Je vous représente ici l'espace des objets

149
00:04:30,400 --> 00:04:31,440
comme nous avons vu précédemment

150
00:04:31,540 --> 00:04:33,410
qui va contenir tous les objets

151
00:04:33,510 --> 00:04:35,385
que nous avons dans l'ordinateur,

152
00:04:35,485 --> 00:04:37,350
et également l'espace des variables

153
00:04:37,450 --> 00:04:38,430
qui représente les variables

154
00:04:38,530 --> 00:04:39,790
qui vont référencer

155
00:04:39,890 --> 00:04:41,250
les objets dans notre ordinateur.

156
00:04:41,350 --> 00:04:42,490
Nous verrons dans la suite

157
00:04:42,590 --> 00:04:43,550
et dans les semaines qui viennent

158
00:04:43,650 --> 00:04:44,960
que cet espace des variables, on appelle ça

159
00:04:45,060 --> 00:04:46,460
en fait un espace de nommage.

160
00:04:47,400 --> 00:04:48,800
Supposons maintenant que je fasse

161
00:04:48,900 --> 00:04:49,700
a égale 3

162
00:04:49,800 --> 00:04:51,113
ce qui veut dire que ma variable a

163
00:04:51,213 --> 00:04:53,035
va référencer l'entier 3.

164
00:04:53,135 --> 00:04:55,300
Lorsque je fais un retour chariot,

165
00:04:55,400 --> 00:04:57,185
Python va exécuter 3 opérations.

166
00:04:57,285 --> 00:04:59,400
La première opération va consister

167
00:04:59,500 --> 00:05:01,040
à créer l'entier 3.

168
00:05:01,140 --> 00:05:02,800
Donc c'est un objet qui est créé

169
00:05:02,900 --> 00:05:03,900
dans l'espace des objets.

170
00:05:04,200 --> 00:05:06,240
Puis il va créer une variable a

171
00:05:06,340 --> 00:05:07,710
dans l'espace des variables.

172
00:05:07,810 --> 00:05:10,050
Et pour finir, il va créer une référence

173
00:05:10,150 --> 00:05:15,100
entre cette variable a et l'entier 3.

174
00:05:16,200 --> 00:05:17,390
Maintenant, supposons que je fasse

175
00:05:17,490 --> 00:05:18,670
a égale spam.

176
00:05:18,770 --> 00:05:21,100
Python va effectuer

177
00:05:21,200 --> 00:05:23,410
la même suite d'opérations

178
00:05:23,510 --> 00:05:24,150
et il va créer

179
00:05:24,250 --> 00:05:26,090
un objet de type chaîne de caractères

180
00:05:26,190 --> 00:05:27,800
qui s'appelle spam,

181
00:05:27,900 --> 00:05:29,170
puis il va créer une variable a

182
00:05:29,270 --> 00:05:30,470
mais la variable a existe déjà

183
00:05:30,570 --> 00:05:34,260
donc il va simplement déréférencer

184
00:05:34,360 --> 00:05:35,500
cette variable a,

185
00:05:35,600 --> 00:05:36,900
et lui faire référencer

186
00:05:37,000 --> 00:05:39,340
l'objet chaîne de caractères spam.

187
00:05:39,440 --> 00:05:41,180
Donc ici on voit que

188
00:05:41,280 --> 00:05:42,950
cette notion de typage dynamique

189
00:05:43,050 --> 00:05:44,000
est très importante.

190
00:05:44,100 --> 00:05:45,350
En fait, qu'est-ce que ça veut dire

191
00:05:45,450 --> 00:05:46,450
le typage dynamique ?

192
00:05:46,550 --> 00:05:47,540
Ça veut dire qu'en Python

193
00:05:47,640 --> 00:05:49,870
le type n'est pas lié à la variable

194
00:05:49,970 --> 00:05:51,000
qui référence l'objet

195
00:05:51,100 --> 00:05:52,100
mais est lié à l'objet.

196
00:05:52,200 --> 00:05:54,200
En fait, Python est un langage

197
00:05:54,300 --> 00:05:56,050
que l'on appelle un langage à typage fort,

198
00:05:56,150 --> 00:05:58,000
ça veut dire que le typage

199
00:05:58,100 --> 00:05:59,655
est lié aux objets et que l'objet

200
00:05:59,755 --> 00:06:00,800
va garder le même type

201
00:06:00,900 --> 00:06:02,490
durant toute l'exécution du programme.

202
00:06:02,590 --> 00:06:05,600
Par contre, la variable, elle, peut référencer

203
00:06:05,700 --> 00:06:07,900
des objets qui vont être de type différent

204
00:06:08,000 --> 00:06:09,350
en cours d'exécution.

205
00:06:11,900 --> 00:06:13,630
Pour finir, si je fais del de a,

206
00:06:13,730 --> 00:06:14,960
ça va me permettre de supprimer

207
00:06:15,060 --> 00:06:17,730
la variable a de mon espace des variables.

208
00:06:18,830 --> 00:06:20,540
Si mon objet n'a plus de référence,

209
00:06:20,640 --> 00:06:22,090
on a un mécanisme en Python

210
00:06:22,190 --> 00:06:23,040
qui s'appelle un mécanisme de

211
00:06:23,140 --> 00:06:24,330
garbage collector

212
00:06:24,430 --> 00:06:26,670
qui va libérer la mémoire de l'ordinateur

213
00:06:26,770 --> 00:06:27,670
une fois que les objets

214
00:06:27,770 --> 00:06:30,390
ne sont plus référencés.

215
00:06:30,600 --> 00:06:31,900
Dans cette vidéo, nous avons introduit

216
00:06:32,000 --> 00:06:34,140
les notions d'objet, de variable

217
00:06:34,240 --> 00:06:35,400
et de typage dynamique.

218
00:06:35,500 --> 00:06:37,300
Ce sont des notions clé en Python

219
00:06:37,400 --> 00:06:38,340
parce que comme nous l'avons vu

220
00:06:38,440 --> 00:06:39,900
en Python tout est un objet,

221
00:06:40,000 --> 00:06:41,050
et par conséquent, pour pouvoir

222
00:06:41,150 --> 00:06:41,750
manipuler ces objets,

223
00:06:41,850 --> 00:06:42,450
il faut être capable de

224
00:06:42,550 --> 00:06:43,890
leur donner un nom,

225
00:06:43,990 --> 00:06:44,660
et on leur donne ce nom par

226
00:06:44,760 --> 00:06:46,120
le mécanisme de référencement

227
00:06:46,220 --> 00:06:47,720
qui consiste à donner un nom de variable

228
00:06:47,820 --> 00:06:49,160
qui est égale à un objet.

229
00:06:49,260 --> 00:06:50,760
À bientôt !
