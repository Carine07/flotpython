1
00:00:05,133 --> 00:00:06,947
Nous avons vu dans de précédentes vidéos

2
00:00:07,047 --> 00:00:08,461
la notion de portée de variable,

3
00:00:08,561 --> 00:00:09,886
notamment dans le contexte

4
00:00:09,986 --> 00:00:11,373
des fonctions et des modules.

5
00:00:11,805 --> 00:00:12,875
Nous avons également vu

6
00:00:12,975 --> 00:00:14,122
la notion de recherche d'attribut

7
00:00:14,222 --> 00:00:15,170
le long des arbres d'héritage.

8
00:00:15,682 --> 00:00:17,310
Tous ces mécanismes servent à savoir

9
00:00:17,410 --> 00:00:18,771
dans quel espace de nommage

10
00:00:18,871 --> 00:00:20,424
chercher nos variables ou nos attributs.

11
00:00:20,939 --> 00:00:22,671
Il est probable qu'à ce moment du mooc

12
00:00:22,771 --> 00:00:23,853
vous n'ayez pas les idées très claires

13
00:00:23,953 --> 00:00:25,572
sur comment ces différents mécanismes

14
00:00:25,672 --> 00:00:26,524
interagissent.

15
00:00:27,041 --> 00:00:28,225
Le but de cette vidéo est

16
00:00:28,325 --> 00:00:30,126
de faire toute la lumière sur les mécanismes

17
00:00:30,309 --> 00:00:32,648
de référencement et d'affectation

18
00:00:34,011 --> 00:00:35,403
des variables et des attributs

19
00:00:35,786 --> 00:00:37,631
quel que soit le contexte.

20
00:00:38,341 --> 00:00:40,119
Commençons par faire une distinction

21
00:00:40,219 --> 00:00:42,613
entre ces notions de variable et d'attribut.

22
00:00:43,536 --> 00:00:45,070
On dit que l'on a une variable

23
00:00:45,484 --> 00:00:49,310
lorsqu'un nom est référencé ou affecté

24
00:00:49,410 --> 00:00:50,397
directement.

25
00:00:50,996 --> 00:00:52,717
Et on dit que l'on a un attribut

26
00:00:52,817 --> 00:00:53,855
lorsque ce nom

27
00:00:53,955 --> 00:00:56,737
est référencé ou affecté

28
00:00:56,837 --> 00:00:59,721
en utilisant la notation objet point.

29
00:01:00,646 --> 00:01:01,644
Alors, pourquoi est-ce que je fais

30
00:01:01,744 --> 00:01:02,167
cette distinction

31
00:01:02,267 --> 00:01:03,905
entre les variables et les attributs ?

32
00:01:04,335 --> 00:01:06,389
C'est que la recherche de ces noms

33
00:01:06,489 --> 00:01:07,727
utilise des mécanismes

34
00:01:07,827 --> 00:01:08,813
complètement différents

35
00:01:08,913 --> 00:01:10,349
suivant que j'ai une variable

36
00:01:10,449 --> 00:01:12,247
ou suivant que j'ai un attribut.

37
00:01:12,927 --> 00:01:13,972
Lorsque j'ai une variable,

38
00:01:14,072 --> 00:01:15,187
j'utilise un mécanisme qui s'appelle

39
00:01:15,287 --> 00:01:16,322
la liaison lexicale

40
00:01:16,422 --> 00:01:17,753
qui est un mécanisme statique

41
00:01:17,853 --> 00:01:18,331
qui est défini

42
00:01:18,431 --> 00:01:19,592
à l'écriture de notre programme.

43
00:01:20,236 --> 00:01:21,676
Et lorsque j'ai un attribut,

44
00:01:21,776 --> 00:01:23,958
la recherche de ce nom va être faite

45
00:01:24,058 --> 00:01:25,589
en utilisant un mécanisme que l'on appelle

46
00:01:25,689 --> 00:01:26,723
la résolution d'attribut.

47
00:01:28,058 --> 00:01:29,128
Il est important de comprendre

48
00:01:29,228 --> 00:01:30,779
que ces mécanismes de recherche

49
00:01:31,201 --> 00:01:32,233
ont pour but de définir

50
00:01:32,333 --> 00:01:33,790
dans quel espace de nommage

51
00:01:33,890 --> 00:01:35,153
ce nom a été défini.

52
00:01:36,099 --> 00:01:38,106
Maintenant, regardons plus spécifiquement

53
00:01:38,206 --> 00:01:39,176
le cas des attributs

54
00:01:39,276 --> 00:01:40,319
qui est un cas plus simple

55
00:01:40,419 --> 00:01:41,189
que le cas des variables.

56
00:01:42,064 --> 00:01:45,594
Lorsque je définis un attribut x,

57
00:01:46,197 --> 00:01:47,812
objet point x égale 10,

58
00:01:47,912 --> 00:01:49,276
on dit définir,

59
00:01:49,692 --> 00:01:51,578
on peut également dire affecter,

60
00:01:52,085 --> 00:01:56,835
je vais dire que ce nom x doit être défini

61
00:01:56,935 --> 00:01:58,710
dans l'espace de nommage de mon objet.

62
00:01:59,280 --> 00:02:02,322
Et donc ce nom x va référencer l'entier 10

63
00:02:02,422 --> 00:02:04,013
dans l'espace de nommage de objet.

64
00:02:04,767 --> 00:02:07,560
Lorsque je référence mon attribut x,

65
00:02:08,204 --> 00:02:10,134
je veux dire que je vais chercher mon attribut

66
00:02:10,234 --> 00:02:11,928
dans l'espace de nommage de objet.

67
00:02:12,028 --> 00:02:13,977
Mais là, j'ai deux cas différents

68
00:02:14,215 --> 00:02:15,602
suivant la nature de objet.

69
00:02:16,693 --> 00:02:18,594
Si jamais objet est un module,

70
00:02:19,664 --> 00:02:23,912
une référence du nom x dans l'objet

71
00:02:24,012 --> 00:02:26,283
veut dire en fait que je vais chercher x

72
00:02:26,383 --> 00:02:28,283
dans l'espace des variables globales

73
00:02:28,383 --> 00:02:28,977
de mon module,

74
00:02:29,077 --> 00:02:30,762
donc dans l'espace de nommage du module.

75
00:02:31,652 --> 00:02:32,869
Si maintenant objet

76
00:02:32,969 --> 00:02:34,725
est une classe ou une instance,

77
00:02:35,230 --> 00:02:37,444
je vais chercher mon attribut x

78
00:02:37,544 --> 00:02:39,536
le long de l'arbre d'héritage.

79
00:02:39,636 --> 00:02:40,942
On voit donc que j'ai deux mécanismes

80
00:02:41,042 --> 00:02:42,035
un tout petit peu différents ;

81
00:02:42,346 --> 00:02:43,492
pour le module, je cherche

82
00:02:43,592 --> 00:02:45,160
dans l'espace de nommage du module,

83
00:02:45,260 --> 00:02:46,749
pour les instances ou les classes,

84
00:02:46,849 --> 00:02:49,468
je cherche dans l'espace de nommage courant

85
00:02:49,568 --> 00:02:50,552
donc de mon objet,

86
00:02:50,652 --> 00:02:51,631
et si je ne le trouve pas,

87
00:02:51,731 --> 00:02:53,576
je remonte l'arbre d'héritage.

88
00:02:54,222 --> 00:02:56,339
Donc on a fini le cas des attributs ;

89
00:02:56,439 --> 00:02:57,320
vous voyez que c'est un cas

90
00:02:57,420 --> 00:02:58,719
qui est relativement simple

91
00:02:58,819 --> 00:03:00,734
et que nous avons déjà largement détaillé

92
00:03:00,834 --> 00:03:01,649
lorsque nous avons parlé

93
00:03:01,749 --> 00:03:02,943
des classes et des modules.

94
00:03:04,233 --> 00:03:05,970
Maintenant, regardons dans la suite

95
00:03:06,070 --> 00:03:07,401
le cas spécifique des variables

96
00:03:07,750 --> 00:03:09,424
qui est un cas un petit peu particulier.

97
00:03:11,539 --> 00:03:12,904
Je dis qu'une variable

98
00:03:13,004 --> 00:03:14,790
est définie dans un bloc de code

99
00:03:15,268 --> 00:03:18,874
d'une fonction, d'une classe ou d'un module,

100
00:03:20,137 --> 00:03:22,253
lorsqu'elle est écrite directement

101
00:03:22,353 --> 00:03:22,945
dans le bloc de code

102
00:03:23,045 --> 00:03:24,761
de la fonction, de la classe ou du module,

103
00:03:24,861 --> 00:03:25,630
et dans ce cas-là,

104
00:03:25,730 --> 00:03:27,412
lorsqu'elle est définie dans ce bloc de code,

105
00:03:27,512 --> 00:03:28,780
on dit qu'elle devient locale

106
00:03:29,072 --> 00:03:30,533
à ce bloc de code.

107
00:03:31,560 --> 00:03:32,503
Donc, j'insiste de nouveau

108
00:03:32,603 --> 00:03:34,093
sur ce point important ;

109
00:03:34,193 --> 00:03:35,628
les variables sont liées

110
00:03:35,728 --> 00:03:38,012
aux espaces de nommage statiquement

111
00:03:38,112 --> 00:03:39,674
en fonction de là où elles sont écrites

112
00:03:39,774 --> 00:03:41,248
au moment de l'écriture de notre programme

113
00:03:42,141 --> 00:03:43,180
avec un mécanisme qu'on appelle

114
00:03:43,280 --> 00:03:44,059
liaison lexicale.

115
00:03:46,920 --> 00:03:48,007
La seule exception

116
00:03:48,107 --> 00:03:49,283
est lorsque l'on déclare notre variable

117
00:03:49,383 --> 00:03:51,120
comme étant global ou nonlocal,

118
00:03:51,220 --> 00:03:52,033
on a déjà vu ce cas

119
00:03:52,133 --> 00:03:53,999
lorsqu'on a parlé des fonctions.

120
00:03:56,050 --> 00:03:57,369
Ce mécanisme de définition

121
00:03:57,469 --> 00:03:59,642
n'est pas lié juste à l'opération d'affectation,

122
00:03:59,742 --> 00:04:00,730
x égale 1.

123
00:04:00,830 --> 00:04:01,892
On a différentes manières

124
00:04:01,992 --> 00:04:03,273
de faire une définition,

125
00:04:03,373 --> 00:04:04,672
on dit également une liaison,

126
00:04:04,772 --> 00:04:05,240
d'une variable.

127
00:04:05,735 --> 00:04:07,858
x égale 1, l'affectation explicite

128
00:04:07,958 --> 00:04:09,504
évidemment va lier x à l'objet 1.

129
00:04:10,022 --> 00:04:11,421
Mais j'ai également une déclaration,

130
00:04:11,521 --> 00:04:12,256
par exemple, de paramètres

131
00:04:12,356 --> 00:04:13,039
dans une fonction.

132
00:04:13,357 --> 00:04:14,632
La variable a,

133
00:04:14,732 --> 00:04:16,561
définie comme paramètre de ma fonction f,

134
00:04:16,661 --> 00:04:17,873
est une variable locale,

135
00:04:17,973 --> 00:04:19,644
liée au bloc de code de ma fonction.

136
00:04:20,286 --> 00:04:21,771
Lorsque je définis un nom

137
00:04:21,871 --> 00:04:23,969
d'une classe, la classe C,

138
00:04:24,069 --> 00:04:25,820
ou le nom d'une fonction, la fonction f,

139
00:04:25,920 --> 00:04:28,193
j'ai également un mécanisme d'affectation,

140
00:04:28,293 --> 00:04:29,071
de liaison.

141
00:04:29,171 --> 00:04:29,932
C est un nom

142
00:04:30,032 --> 00:04:31,323
qui va référencer mon objet classe ;

143
00:04:31,423 --> 00:04:31,947
f est un nom

144
00:04:32,047 --> 00:04:33,465
qui va référencer mon objet fonction.

145
00:04:34,198 --> 00:04:35,062
Dans une boucle for,

146
00:04:35,162 --> 00:04:36,797
lorsque je fais for i in objet,

147
00:04:36,897 --> 00:04:37,744
i est une variable

148
00:04:37,844 --> 00:04:39,387
qui va référencer les objets

149
00:04:39,487 --> 00:04:40,865
retournés par la méthode next

150
00:04:40,965 --> 00:04:42,248
sur l'itérateur de l'objet.

151
00:04:43,467 --> 00:04:45,028
Et également, lorsque je fais un import,

152
00:04:45,631 --> 00:04:46,658
je vais définir un nom

153
00:04:46,758 --> 00:04:47,869
qui va référencer un objet,

154
00:04:47,969 --> 00:04:48,801
soit un objet module,

155
00:04:48,901 --> 00:04:50,689
soit dans le cas de import times,

156
00:04:50,789 --> 00:04:51,679
un objet fonction.

157
00:04:51,949 --> 00:04:53,533
Et j'ai également d'autres mécanismes,

158
00:04:53,633 --> 00:04:54,815
je ne vais pas tous les couvrir,

159
00:04:54,915 --> 00:04:56,255
qui permettent de faire une liaison

160
00:04:56,355 --> 00:04:58,517
entre un nom de variable et un objet.

161
00:04:59,808 --> 00:05:01,138
Maintenant, regardons le cas

162
00:05:01,238 --> 00:05:02,026
du référencement.

163
00:05:02,126 --> 00:05:03,339
On a bien compris que

164
00:05:03,439 --> 00:05:04,478
une variable est liée

165
00:05:04,578 --> 00:05:05,781
avec différents mécanismes,

166
00:05:06,223 --> 00:05:07,925
donc on définit un nom qui est lié à un objet ;

167
00:05:08,145 --> 00:05:10,008
maintenant, lorsque je référence ma variable,

168
00:05:10,108 --> 00:05:11,702
c'est par exemple lorsque je fais print de x,

169
00:05:11,802 --> 00:05:13,069
lorsque j'utilise cette variable.

170
00:05:13,441 --> 00:05:14,696
Maintenant, je veux savoir,

171
00:05:14,796 --> 00:05:15,733
cette variable x,

172
00:05:15,833 --> 00:05:16,661
je vais la prendre

173
00:05:16,761 --> 00:05:17,919
dans quel espace de nommage ?

174
00:05:18,918 --> 00:05:19,757
Pour cela,

175
00:05:19,857 --> 00:05:21,493
je vais utiliser la règle LEGB

176
00:05:21,593 --> 00:05:22,442
que nous avons déjà vue.

177
00:05:22,542 --> 00:05:23,994
Je vais chercher ma variable

178
00:05:24,094 --> 00:05:25,377
localement à la fonction ;

179
00:05:25,823 --> 00:05:27,175
si elle n'est pas définie localement,

180
00:05:27,275 --> 00:05:28,911
je remonte dans les fonctions englobantes ;

181
00:05:29,342 --> 00:05:30,944
ensuite, je vais dans le module

182
00:05:31,044 --> 00:05:31,929
et finalement, je la cherche

183
00:05:32,029 --> 00:05:33,239
dans le module builtins.

184
00:05:34,193 --> 00:05:35,239
Seulement, lorsqu'on rajoute

185
00:05:35,339 --> 00:05:36,160
le cas des classes,

186
00:05:36,260 --> 00:05:37,946
il y a un cas particulier supplémentaire

187
00:05:38,046 --> 00:05:38,752
à prendre en compte.

188
00:05:40,023 --> 00:05:41,570
Le bloc de code des classes

189
00:05:41,670 --> 00:05:43,421
est systématiquement sauté

190
00:05:43,521 --> 00:05:45,079
lors de la résolution des attributs.

191
00:05:45,179 --> 00:05:46,699
En fait, le bloc de code des classes

192
00:05:46,799 --> 00:05:47,567
est très particulier.

193
00:05:48,024 --> 00:05:49,138
Une variable définie

194
00:05:49,238 --> 00:05:50,634
dans le bloc de code d'une classe

195
00:05:50,734 --> 00:05:52,752
n'est pas accessible en dehors de la classe

196
00:05:53,251 --> 00:05:54,995
mais elle n'est pas non plus accessible

197
00:05:55,095 --> 00:05:56,546
aux méthodes de la classe.

198
00:05:57,070 --> 00:05:59,388
En fait, ça peut paraître très étrange

199
00:05:59,488 --> 00:06:00,331
de prime abord,

200
00:06:00,431 --> 00:06:01,024
mais il faut comprendre

201
00:06:01,124 --> 00:06:02,358
que ce choix architectural

202
00:06:02,458 --> 00:06:04,017
a été fait pour éviter d'avoir

203
00:06:04,117 --> 00:06:05,102
une interaction bizarre

204
00:06:05,202 --> 00:06:07,527
entre le mécanisme de résolution d'attribut

205
00:06:07,627 --> 00:06:09,653
et le mécanisme de recherche des variables.

206
00:06:09,907 --> 00:06:11,123
Les classes et les instances

207
00:06:11,223 --> 00:06:12,498
sont naturellement construites

208
00:06:12,598 --> 00:06:13,950
pour rechercher des attributs

209
00:06:14,050 --> 00:06:15,099
le long des arbres d'héritage.

210
00:06:15,384 --> 00:06:15,990
C'est pour ça qu'on a

211
00:06:16,090 --> 00:06:17,998
ce mécanisme un petit peu extrême

212
00:06:18,098 --> 00:06:19,363
lorsqu'on définit des variables

213
00:06:19,463 --> 00:06:20,075
dans les classes.

214
00:06:20,921 --> 00:06:22,364
Donc maintenant, regardons des exemples

215
00:06:22,464 --> 00:06:24,098
pour illustrer ces différents cas.

216
00:06:24,631 --> 00:06:26,829
Je vais définir un module spam.py

217
00:06:26,929 --> 00:06:29,117
qui définit une variable globale a

218
00:06:29,217 --> 00:06:29,954
qui vaut 1,

219
00:06:30,054 --> 00:06:31,245
une fonction f

220
00:06:31,345 --> 00:06:32,780
qui définit une variable locale a

221
00:06:32,880 --> 00:06:33,345
qui vaut 2.

222
00:06:34,064 --> 00:06:35,859
Et puis je définis une classe C

223
00:06:36,378 --> 00:06:38,112
qui définit une variable,

224
00:06:38,212 --> 00:06:39,355
dans le bloc de code de la classe,

225
00:06:39,455 --> 00:06:40,336
qui vaut 3,

226
00:06:40,436 --> 00:06:41,725
donc c'est une variable locale à la classe.

227
00:06:42,746 --> 00:06:44,099
Ensuite, j'appelle ma fonction

228
00:06:44,199 --> 00:06:45,516
et je crée une instance de la classe.

229
00:06:45,888 --> 00:06:46,569
La question est:

230
00:06:46,669 --> 00:06:47,944
que va m'afficher print de a ?

231
00:06:48,627 --> 00:06:50,275
Ici, vous savez que les variables

232
00:06:50,375 --> 00:06:51,217
définies dans les fonctions

233
00:06:51,317 --> 00:06:52,226
sont locales à la fonction,

234
00:06:52,502 --> 00:06:54,520
et que les variables définies dans les classes

235
00:06:54,620 --> 00:06:55,260
ne peuvent pas être vues

236
00:06:55,360 --> 00:06:56,034
en dehors de la classe ;

237
00:06:56,456 --> 00:06:58,336
donc en fait, on a la certitude

238
00:06:58,436 --> 00:06:59,814
que ce que va m'afficher print de a,

239
00:06:59,914 --> 00:07:02,360
c'est la variable globale a

240
00:07:02,460 --> 00:07:06,158
et on va donc voir l'entier 1.

241
00:07:06,525 --> 00:07:08,299
Donc en fait, si j'utilise ma règle LEGB,

242
00:07:09,100 --> 00:07:10,605
a n'est pas définie dans une fonction,

243
00:07:10,705 --> 00:07:11,133
elle n'est pas définie

244
00:07:11,233 --> 00:07:11,994
dans des fonctions englobantes,

245
00:07:12,247 --> 00:07:13,261
elle est définie globalement,

246
00:07:13,361 --> 00:07:15,195
c'est la variable a qui référence 1.

247
00:07:15,295 --> 00:07:16,624
Et donc effectivement, je vais voir

248
00:07:16,724 --> 00:07:17,605
apparaître l'entier 1.

249
00:07:18,541 --> 00:07:19,710
Maintenant, prenons un deuxième cas.

250
00:07:19,810 --> 00:07:22,163
J'ai une variable a, dans mon module,

251
00:07:22,469 --> 00:07:24,940
une classe C qui définit une variable locale a

252
00:07:25,040 --> 00:07:25,658
qui vaut 2,

253
00:07:26,177 --> 00:07:28,177
et puis, dans ma classe, j'ai une fonction f

254
00:07:28,277 --> 00:07:29,375
qui va faire un print de a

255
00:07:29,893 --> 00:07:31,600
et un print de C point a.

256
00:07:32,037 --> 00:07:33,882
Maintenant, je crée une instance de ma classe

257
00:07:35,174 --> 00:07:38,179
et j'appelle ma fonction f sur mon instance.

258
00:07:39,432 --> 00:07:40,521
Qu'est-ce qu'il va s'afficher ?

259
00:07:40,621 --> 00:07:42,293
Alors, regardons le premier print de a.

260
00:07:43,817 --> 00:07:45,615
a est une variable que je recherche

261
00:07:45,715 --> 00:07:46,884
avec la règle LEGB ;

262
00:07:46,984 --> 00:07:48,157
est-ce que a est définie localement ?

263
00:07:48,257 --> 00:07:48,619
Non.

264
00:07:49,242 --> 00:07:49,880
Est-ce qu'elle est définie

265
00:07:49,980 --> 00:07:50,930
dans des fonctions englobantes ?

266
00:07:51,030 --> 00:07:52,160
Je n'ai pas de fonction englobante.

267
00:07:52,528 --> 00:07:53,910
Est-ce qu'elle est définie globalement ?

268
00:07:54,010 --> 00:07:55,500
Oui, elle vaut 1.

269
00:07:55,600 --> 00:07:56,874
Donc c'est la variable globale a

270
00:07:56,974 --> 00:07:59,144
qui actuellement référence l'entier 1.

271
00:07:59,397 --> 00:08:00,726
On voit que dans ce mécanisme

272
00:08:01,427 --> 00:08:02,812
de recherche des variables,

273
00:08:03,123 --> 00:08:05,146
j'ai sauté le bloc de code de la classe.

274
00:08:05,773 --> 00:08:07,940
Ensuite, je fais un print de C point a.

275
00:08:08,040 --> 00:08:09,163
Là, je change de mécanisme.

276
00:08:09,626 --> 00:08:11,459
Maintenant, j'ai une résolution d'attribut.

277
00:08:11,809 --> 00:08:12,899
Quelle est la nature de C ?

278
00:08:12,999 --> 00:08:13,588
Est-ce que c'est un module

279
00:08:13,688 --> 00:08:14,362
ou est-ce que c'est une classe ?

280
00:08:14,462 --> 00:08:15,459
C est une classe,

281
00:08:15,559 --> 00:08:16,509
je vais donc le chercher

282
00:08:16,609 --> 00:08:17,521
le long de l'arbre d'héritage.

283
00:08:18,006 --> 00:08:19,909
Je regarde C point a ;

284
00:08:20,009 --> 00:08:20,781
est-ce que a est défini

285
00:08:20,881 --> 00:08:22,137
dans l'espace de nommage de ma classe ?

286
00:08:22,237 --> 00:08:22,583
Oui.

287
00:08:23,686 --> 00:08:25,576
C'est l'attribut a qui vaut 2 ;

288
00:08:25,676 --> 00:08:27,022
je vais donc référencer l'entier 2.

289
00:08:27,283 --> 00:08:28,940
Si a n'avait pas été défini dans ma classe,

290
00:08:29,040 --> 00:08:29,561
je serais remonté

291
00:08:29,661 --> 00:08:30,616
le long de l'arbre d'héritage

292
00:08:30,716 --> 00:08:31,633
dans les super-classes ;

293
00:08:31,733 --> 00:08:32,544
dans ce cas-là, en fait,

294
00:08:32,644 --> 00:08:34,128
je n'avais qu'object comme super-classe.

295
00:08:34,421 --> 00:08:35,694
Donc regardons le résultat ;

296
00:08:35,794 --> 00:08:37,191
print de a m'affiche bien 1,

297
00:08:37,717 --> 00:08:40,035
et print de C point a m'affiche bien 2.

298
00:08:40,267 --> 00:08:41,561
Donc on voit bien que les classes

299
00:08:41,661 --> 00:08:42,905
sont conçues

300
00:08:43,005 --> 00:08:44,319
pour qu'on accède à leurs attributs

301
00:08:44,419 --> 00:08:46,492
avec le mécanisme de résolution d'attribut,

302
00:08:46,592 --> 00:08:48,843
avec la notation C point quelque chose.

303
00:08:50,230 --> 00:08:51,526
Regardons un dernier exemple.

304
00:08:52,120 --> 00:08:53,794
Je définis une variable globale a,

305
00:08:53,894 --> 00:08:55,682
une classe A qui définit

306
00:08:55,782 --> 00:08:57,864
une variable locale a qui vaut 2,

307
00:08:58,235 --> 00:08:59,783
et une classe B qui définit

308
00:08:59,777 --> 00:09:02,786
une fonction f qui fait print de a.

309
00:09:03,428 --> 00:09:05,105
Je crée une instance de ma classe B

310
00:09:05,205 --> 00:09:07,042
et j'appelle f sur mon instance.

311
00:09:07,753 --> 00:09:09,591
Que va m'afficher le print de a ?

312
00:09:10,182 --> 00:09:11,273
a est une variable,

313
00:09:11,373 --> 00:09:13,736
je la recherche donc avec la règle LEGB ;

314
00:09:14,046 --> 00:09:14,800
est-ce que a est définie

315
00:09:14,900 --> 00:09:15,694
localement à ma fonction ?

316
00:09:15,794 --> 00:09:16,166
Non.

317
00:09:16,274 --> 00:09:17,770
Je n'ai pas de fonction englobante ;

318
00:09:17,870 --> 00:09:19,785
je saute tous les blocs de code des classes ;

319
00:09:19,710 --> 00:09:21,388
est-ce que a est définie globalement ?

320
00:09:21,488 --> 00:09:21,730
Oui,

321
00:09:22,248 --> 00:09:24,341
c'est la variable a qui référence l'entier 1,

322
00:09:24,441 --> 00:09:26,860
je vais donc voir apparaître l'entier 1.

323
00:09:28,226 --> 00:09:29,980
Nous avons donc vu les mécanismes

324
00:09:30,080 --> 00:09:32,006
de recherche de variable et d'attribut

325
00:09:32,106 --> 00:09:32,763
en Python,

326
00:09:33,024 --> 00:09:34,612
en prenant le cas général

327
00:09:34,712 --> 00:09:36,193
des modules, des fonctions et des classes.

328
00:09:36,462 --> 00:09:37,688
Il est important de comprendre que

329
00:09:37,788 --> 00:09:39,185
la recherche des variables

330
00:09:39,285 --> 00:09:40,056
et la recherche d'attributs

331
00:09:40,156 --> 00:09:40,841
utilisent des mécanismes

332
00:09:40,941 --> 00:09:41,870
complètement différents.

333
00:09:42,323 --> 00:09:43,325
La recherche des variables

334
00:09:43,425 --> 00:09:44,909
est faite avec un mécanisme statique,

335
00:09:45,009 --> 00:09:46,108
qui s'appelle la liaison lexicale,

336
00:09:46,539 --> 00:09:47,479
qui est déterminée au moment

337
00:09:47,579 --> 00:09:48,605
de l'écriture de votre programme,

338
00:09:48,705 --> 00:09:50,092
tandis que la recherche d'attributs

339
00:09:50,192 --> 00:09:51,381
est faite de manière dynamique

340
00:09:51,481 --> 00:09:52,338
en fonction de l'exécution

341
00:09:52,438 --> 00:09:53,079
de notre programme.

342
00:09:53,477 --> 00:09:54,511
Tous ces mécanismes

343
00:09:54,611 --> 00:09:55,728
servent à trouver des noms

344
00:09:55,828 --> 00:09:57,151
dans des espaces de nommage.

345
00:09:57,773 --> 00:09:58,437
À bientôt !

