<hr/>
Surcharge d'opérateurs (1)
=====

Quand est appelée la méthode <code>__init__</code> dans une classe ?

( ) À la création de l'objet classe
( ) Après la création de la première instance de la classe
(x) Après la création de chaque instance de la classe

[explanation]
La méthode <code>__init__</code> est la méthode qui est appelée automatiquement après la création de l'instance d'une classe, elle vous permet donc de l'initialiser.
[explanation]

<hr/>
Surcharge d'opérateurs (2)
=====

Supposons que nous ayons deux instances <code>a</code> et <code>b</code> d'une classe <code>C</code>. Cochez les opérations qu'il sera possible de définir sur les instances avec la surcharge d'opérateurs.

[x] <code>print(a, b)</code>
[x] <code>1 in a</code>
[x] <code>a > b</code>
[x] <code>a[3]</code>
[x] <code>a + b</code>

[explanation]
Avec la surcharge d'opérateurs, on peut définir pour nos propres objets toutes les opérations que l'on peut faire avec les types built-in. Les deux compléments de la séquence détaillent les méthodes à implémenter pour définir les opérations citées dans ce quiz.
[explanation]

<hr/>
Surcharge d'opérateurs (3)
=====

Avec la bibliothèque pathlib on peut écrire par exemple

<code>
<pre>
>>> from pathlib import Path
>>>
>>> Path.home() / "abc"
PosixPath('/Users/tparment/abc')
</pre>
</code>

Si maintenant je fais (évidemment ceci est déconseillé !):

<code>
<pre>
>>> def my_div(path, str):
...     return path
...
>>> Path.__truediv__ = my_div
>>>
>>> Path.home() / "abc" == Path.home()
</pre>
</code>

que va-t-il se passer ?

( ) Le test retourne False.
(x) Le test retourne True.
( ) Une exception est levée.

[explanation]
En réaffectant la méthode spéciale truediv, je modifie la façon dont l'interpréteur évalue la division, qui va maintenant retourner la partie gauche de l'expression. C'est pourquoi le test renvoie True.

Évidemment il s'agit d'un cas à vocation uniquement pédagogique, il est fortement déconseillé de modifier de cette façon le comportement de la bibliothèque standard ; si un tel comportement était réellement souhaité il faudrait créer une sous-classe de Path, bien entendu.

[explanation]
