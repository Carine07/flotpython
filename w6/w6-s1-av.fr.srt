1
00:00:13,778 --> 00:00:14,922
Bonjour !

2
00:00:15,022 --> 00:00:16,002
La programmation objet est

3
00:00:16,102 --> 00:00:17,530
un paradigme de programmation

4
00:00:17,630 --> 00:00:19,129
qui est puissant et souple,

5
00:00:19,229 --> 00:00:20,327
mais qui vient au prix

6
00:00:20,427 --> 00:00:22,293
d'un effort de conception supplémentaire.

7
00:00:22,907 --> 00:00:24,070
Cependant, comme en Python,

8
00:00:24,170 --> 00:00:24,745
tout est un objet,

9
00:00:24,845 --> 00:00:25,918
vous pouvez très rapidement

10
00:00:26,018 --> 00:00:26,938
tirer pleinenement parti

11
00:00:27,038 --> 00:00:28,459
de ce paradigme de programmation.

12
00:00:29,204 --> 00:00:30,715
Avant de pouvoir le maîtriser,

13
00:00:30,815 --> 00:00:32,384
il faut connaître un certain nombre de notions

14
00:00:32,484 --> 00:00:34,314
comme la notion de classe, d'instance,

15
00:00:34,414 --> 00:00:35,106
de méthode,

16
00:00:35,206 --> 00:00:36,578
la notion de méthode spéciale

17
00:00:36,678 --> 00:00:37,729
et la notion d'héritage.

18
00:00:38,143 --> 00:00:39,986
Dans cette semaine, nous allons couvrir

19
00:00:40,086 --> 00:00:41,458
ces différentes notions.

20
00:00:41,937 --> 00:00:43,674
Nous allons également vous expliquer

21
00:00:43,774 --> 00:00:45,073
comment, en exploitant

22
00:00:45,173 --> 00:00:46,506
ce paradigme de programmation objet,

23
00:00:46,606 --> 00:00:48,163
vous pouvez créer vos propres itérateurs,

24
00:00:48,263 --> 00:00:49,450
vos propres exceptions

25
00:00:49,550 --> 00:00:51,481
et également vos propres context managers.

26
00:00:53,157 --> 00:00:55,381
Nous avons vu, dans une précédente vidéo,

27
00:00:55,481 --> 00:00:56,666
en introduction de ce mooc,

28
00:00:57,158 --> 00:00:58,999
la notion de programmation objet

29
00:00:59,099 --> 00:01:00,383
et la notion de classe.

30
00:01:00,483 --> 00:01:01,537
Nous allons dans cette vidéo

31
00:01:01,637 --> 00:01:03,310
revenir sur ces différents concepts.

32
00:01:04,163 --> 00:01:05,355
Vous savez qu'en Python

33
00:01:05,455 --> 00:01:06,267
tout est un objet,

34
00:01:06,697 --> 00:01:07,716
les entiers, les listes,

35
00:01:07,816 --> 00:01:09,311
les chaînes de caractères, les fonctions,

36
00:01:09,411 --> 00:01:10,552
les modules, absolument tout.

37
00:01:10,990 --> 00:01:13,051
Et les caractéristiques de chaque objet

38
00:01:13,151 --> 00:01:14,626
sont définies par leur type.

39
00:01:15,147 --> 00:01:16,560
En Python, les types built-in

40
00:01:16,660 --> 00:01:17,391
sont très puissants

41
00:01:17,491 --> 00:01:18,403
mais ils ne peuvent pas couvrir

42
00:01:18,503 --> 00:01:19,272
tous vos besoins.

43
00:01:19,703 --> 00:01:22,050
C'est pourquoi vous avez le concept de classe.

44
00:01:22,150 --> 00:01:23,641
Une classe, en Python,

45
00:01:23,741 --> 00:01:25,603
vous permet de définir vos propres types,

46
00:01:26,089 --> 00:01:27,169
c'est-à-dire que vous allez pouvoir

47
00:01:27,269 --> 00:01:28,291
créer un modèle

48
00:01:28,391 --> 00:01:30,056
pour des objets que vous pouvez produire

49
00:01:30,156 --> 00:01:31,759
qui auront leurs propres caractéristiques.

50
00:01:33,009 --> 00:01:34,739
Comme en Python, tout est un objet,

51
00:01:34,839 --> 00:01:36,159
les classes également sont des objets.

52
00:01:36,581 --> 00:01:40,191
La classe est la définition des caractéristiques

53
00:01:40,291 --> 00:01:41,525
que vous allez écrire dans votre module,

54
00:01:41,719 --> 00:01:43,541
et lorsque le module sera importé,

55
00:01:43,641 --> 00:01:45,238
l'objet classe sera créé.

56
00:01:45,539 --> 00:01:46,970
Vous aurez ainsi ce qu'on appelle

57
00:01:47,070 --> 00:01:48,130
une usine à instances ;

58
00:01:48,230 --> 00:01:48,759
à chaque fois que

59
00:01:48,800 --> 00:01:49,965
vous appellerez votre classe,

60
00:01:50,355 --> 00:01:52,563
votre classe va créer de nouvelles instances.

61
00:01:52,895 --> 00:01:54,807
Et vous allez avoir une relation particulière

62
00:01:54,907 --> 00:01:57,304
entre l'instance et sa classe.

63
00:01:57,774 --> 00:01:59,011
En fait, on dit que l'on a

64
00:01:59,111 --> 00:01:59,914
une relation d'héritage

65
00:02:00,014 --> 00:02:01,127
entre l'instance et la classe.

66
00:02:01,227 --> 00:02:02,318
Ce qui veut dire que

67
00:02:02,418 --> 00:02:05,053
l'instance va pouvoir hériter,

68
00:02:05,153 --> 00:02:06,754
observer tous les attributs

69
00:02:06,854 --> 00:02:08,226
qui sont définis dans la classe.

70
00:02:08,687 --> 00:02:10,959
Cette relation d'héritage est en fait liée

71
00:02:11,059 --> 00:02:12,430
à la notion d'espace de nommage.

72
00:02:13,084 --> 00:02:15,501
Une classe a son propre espace de nommage.

73
00:02:15,785 --> 00:02:16,726
Et une instance

74
00:02:16,826 --> 00:02:18,331
a son propre espace de nommage.

75
00:02:18,575 --> 00:02:20,096
Lorsque vous recherchez un attribut

76
00:02:20,196 --> 00:02:20,837
dans une instance,

77
00:02:21,137 --> 00:02:22,120
vous allez le chercher

78
00:02:22,220 --> 00:02:23,866
dans l'espace de nommage de l'instance.

79
00:02:23,966 --> 00:02:25,462
Si vous ne le trouvez pas dans l'instance,

80
00:02:25,562 --> 00:02:27,075
vous allez remonter l'arbre d'héritage

81
00:02:27,175 --> 00:02:28,966
et le chercher dans l'espace de nommage

82
00:02:29,066 --> 00:02:30,035
de sa classe.

83
00:02:30,417 --> 00:02:32,122
C'est cette recherche d'attribut

84
00:02:32,222 --> 00:02:33,331
dans les espaces de nommage

85
00:02:33,431 --> 00:02:34,705
de l'instance et de la classe

86
00:02:34,805 --> 00:02:36,627
que l'on appelle arbre d'héritage.

87
00:02:37,135 --> 00:02:38,819
Ouvrons maintenant un éditeur IDLE

88
00:02:38,919 --> 00:02:40,491
pour jouer avec ces notions d'instance,

89
00:02:40,591 --> 00:02:42,482
de classe et d'arbre d'héritage.

90
00:02:44,164 --> 00:02:46,004
Commençons par créer une classe.

91
00:02:46,104 --> 00:02:47,560
Donc, pour créer une classe, je vous rappelle

92
00:02:47,660 --> 00:02:49,245
qu'on utilise l'instruction class

93
00:02:49,668 --> 00:02:50,995
suivie du nom de la classe.

94
00:02:51,095 --> 00:02:52,807
Ici, je vais créer une classe

95
00:02:52,907 --> 00:02:53,653
qui s'appelle Phrase.

96
00:02:54,116 --> 00:02:55,381
Et ensuite, dans ma classe,

97
00:02:55,481 --> 00:02:56,229
je vais créer un attribut

98
00:02:56,329 --> 00:02:57,854
qui s'appelle ma_phrase

99
00:03:01,695 --> 00:03:04,375
et qui va référencer une chaîne de caractères

100
00:03:04,475 --> 00:03:08,037
qui vaut "je fais un mooc sur python"

101
00:03:09,474 --> 00:03:10,386
J'ai créé ma classe,

102
00:03:10,486 --> 00:03:11,875
je la sauvegarde avec Ctrl-S,

103
00:03:11,975 --> 00:03:13,055
je l'évalue avec F5.

104
00:03:13,785 --> 00:03:15,885
Maintenant, regardons cet objet Phrase.

105
00:03:16,156 --> 00:03:18,323
J'ai un objet Phrase ;

106
00:03:18,423 --> 00:03:19,928
on voit bien que cet objet a été créé ;

107
00:03:20,336 --> 00:03:23,151
et maintenant, à partir de ma classe Phrase,

108
00:03:23,251 --> 00:03:24,671
je vais pouvoir produire des instances ;

109
00:03:24,771 --> 00:03:25,809
je vous rappelle qu'une classe,

110
00:03:25,909 --> 00:03:27,119
c'est une usine à instances.

111
00:03:27,424 --> 00:03:29,066
Donc je vais définir une instance p

112
00:03:30,072 --> 00:03:32,027
qui va être une instance de ma Phrase ;

113
00:03:32,127 --> 00:03:33,129
donc pour produire l'instance,

114
00:03:33,229 --> 00:03:34,461
il faut que je mette des parenthèses

115
00:03:34,561 --> 00:03:35,878
après le nom de la classe,

116
00:03:35,978 --> 00:03:36,933
donc j'appelle ma classe

117
00:03:37,033 --> 00:03:37,924
comme une fonction.

118
00:03:39,234 --> 00:03:43,597
J'exécute et je regarde que référence p ;

119
00:03:43,819 --> 00:03:45,663
p est en fait également un objet.

120
00:03:45,763 --> 00:03:48,036
Je vois que ma classe et que mon instance

121
00:03:48,136 --> 00:03:49,378
sont toutes les deux des objets.

122
00:03:50,453 --> 00:03:52,549
Je peux accéder aux espaces de nommage

123
00:03:52,649 --> 00:03:54,531
de ces objets avec un attribut particulier

124
00:03:54,631 --> 00:03:57,116
qui s'appelle __dict__ ;

125
00:03:57,376 --> 00:03:58,624
donc je peux vous montrer ça

126
00:03:58,724 --> 00:04:03,000
avec __dict__,

127
00:04:03,100 --> 00:04:04,546
je vois l'espace de nommage

128
00:04:04,646 --> 00:04:06,126
mais je vous rappelle qu'en pratique

129
00:04:06,295 --> 00:04:08,064
nous n'utilisons pas ces méthodes spéciales

130
00:04:08,164 --> 00:04:09,063
directement à la main,

131
00:04:09,163 --> 00:04:10,579
nous avons toujours des fonctions built-in

132
00:04:10,679 --> 00:04:11,866
ou des opérateurs pour y accéder,

133
00:04:12,247 --> 00:04:13,347
et en fait, la fonction built-in

134
00:04:13,447 --> 00:04:14,474
qui me permet d'accéder à ce dictionnaire,

135
00:04:14,574 --> 00:04:15,226
c'est vars.

136
00:04:15,326 --> 00:04:16,484
C'est ce que j'utiliserai par la suite.

137
00:04:17,195 --> 00:04:19,234
Regardons cet espace de nommage.

138
00:04:19,480 --> 00:04:20,946
Je vois dans mon espace de nommage

139
00:04:21,046 --> 00:04:22,064
un certain nombre d'attributs,

140
00:04:22,164 --> 00:04:24,870
l'attribut module qui référence main

141
00:04:24,970 --> 00:04:26,054
donc ça veut dire que ma classe

142
00:04:26,154 --> 00:04:27,024
est dans le module main,

143
00:04:27,124 --> 00:04:28,780
et je vois également

144
00:04:28,880 --> 00:04:30,261
un attribut ma_phrase,

145
00:04:30,764 --> 00:04:31,991
que j'ai défini dans la classe,

146
00:04:32,091 --> 00:04:33,949
qui référence la chaîne de caractères

147
00:04:34,049 --> 00:04:35,197
"je fais un mooc sur python".

148
00:04:36,235 --> 00:04:37,426
Donc ça, c'est l'espace de nommage.

149
00:04:37,526 --> 00:04:38,358
Vous pouvez remarquer également

150
00:04:38,458 --> 00:04:39,700
que l'espace de nommage de ma classe

151
00:04:39,800 --> 00:04:41,129
a un objet un peu particulier

152
00:04:41,229 --> 00:04:42,456
qui s'appelle un mappingproxy ;

153
00:04:42,889 --> 00:04:44,251
vous devez savoir que la manière

154
00:04:44,351 --> 00:04:45,179
dont sont implémentés

155
00:04:45,279 --> 00:04:46,273
les espaces de nommage en Python

156
00:04:46,373 --> 00:04:47,986
sont vraiment des détails d'implémentation.

157
00:04:48,256 --> 00:04:49,142
Donc nous n'avons pas vraiment

158
00:04:49,242 --> 00:04:50,396
à nous soucier des caractéristiques

159
00:04:50,496 --> 00:04:52,331
de cet objet.

160
00:04:52,431 --> 00:04:54,290
Sachez simplement que le mappingproxy

161
00:04:54,390 --> 00:04:55,102
pour une classe

162
00:04:55,202 --> 00:04:57,173
est une sorte de dictionnaire

163
00:04:57,273 --> 00:04:59,131
qui ne peut être qu'en lecture seule,

164
00:04:59,231 --> 00:05:00,623
on ne peut pas le modifier directement.

165
00:05:00,973 --> 00:05:02,316
Cependant, une classe est malgré tout

166
00:05:02,416 --> 00:05:03,091
un objet mutable ;

167
00:05:03,191 --> 00:05:04,028
ça veut simplement dire

168
00:05:04,128 --> 00:05:05,274
qu'on ne peut pas modifier

169
00:05:05,374 --> 00:05:06,246
le dictionnaire à la main

170
00:05:06,346 --> 00:05:07,983
et en fait, ce choix a été fait pour des raisons

171
00:05:08,083 --> 00:05:09,535
de stabilité et de performance.

172
00:05:10,110 --> 00:05:11,309
Donc maintenant regardons

173
00:05:11,409 --> 00:05:12,828
l'espace de nommage de mon instance.

174
00:05:13,082 --> 00:05:14,600
Je vais faire un vars de p,

175
00:05:14,700 --> 00:05:16,151
p étant mon instance, et je vois que

176
00:05:16,251 --> 00:05:18,119
mon espace de nommage est vide.

177
00:05:18,219 --> 00:05:19,797
Donc lorsque je crée une instance,

178
00:05:20,251 --> 00:05:21,129
l'instance est créée

179
00:05:21,229 --> 00:05:22,447
avec un espace de nommage vide

180
00:05:22,547 --> 00:05:23,384
mais je vous rappelle que

181
00:05:23,484 --> 00:05:24,730
l'on a une relation d'héritage

182
00:05:25,047 --> 00:05:26,628
entre l'instance et la classe ;

183
00:05:26,985 --> 00:05:28,963
ça veut dire que si je cherche un attribut

184
00:05:29,063 --> 00:05:30,217
à partir de mon instance

185
00:05:30,317 --> 00:05:30,957
et que je ne le trouve pas

186
00:05:31,057 --> 00:05:32,389
dans l'espace de nommage de l'instance,

187
00:05:32,603 --> 00:05:33,820
je vais aller le chercher

188
00:05:33,920 --> 00:05:35,268
dans l'espace de nommage de la classe.

189
00:05:35,368 --> 00:05:36,034
Regardons cela.

190
00:05:36,578 --> 00:05:40,805
Je vais faire un p point ma_phrase

191
00:05:44,358 --> 00:05:46,061
alors, je recommence,

192
00:05:46,575 --> 00:05:46,891
voilà ;

193
00:05:46,991 --> 00:05:48,650
et je vais donc chercher l'attribut ma_phrase

194
00:05:48,750 --> 00:05:49,545
dans mon instance.

195
00:05:49,797 --> 00:05:52,520
Or, on a vu que l'espace de nommage

196
00:05:52,620 --> 00:05:53,447
de mon instance était vide.

197
00:05:53,676 --> 00:05:55,463
Pourtant, j'arrive à y accéder.

198
00:05:55,771 --> 00:05:57,754
En fait, je cherche l'attribut dans l'instance,

199
00:05:57,854 --> 00:05:58,712
je remonte l'arbre d'héritage,

200
00:05:58,812 --> 00:05:59,766
je le trouve dans la classe.

201
00:06:00,041 --> 00:06:01,676
Et donc si je regarde est-ce que j'ai bien

202
00:06:01,776 --> 00:06:04,666
ma_phrase directement dans ma classe,

203
00:06:04,766 --> 00:06:05,611
évidemment, je l'ai ;

204
00:06:05,711 --> 00:06:07,065
on l'a vu dans l'espace de nommage

205
00:06:07,165 --> 00:06:07,894
et on l'a défini à la main.

206
00:06:07,994 --> 00:06:09,373
Donc ici, il n'y a aucune surprise.

207
00:06:10,843 --> 00:06:12,958
Les classes et les instances

208
00:06:13,058 --> 00:06:14,292
sont des objets mutables.

209
00:06:14,577 --> 00:06:16,209
Et la résolution des attributs

210
00:06:16,309 --> 00:06:17,351
le long de l'arbre d'héritage

211
00:06:17,451 --> 00:06:18,453
est fait de manière dynamique

212
00:06:18,804 --> 00:06:19,921
en fonction de l'état

213
00:06:20,021 --> 00:06:20,707
des espaces de nommage

214
00:06:20,807 --> 00:06:21,423
au moment où on fait

215
00:06:21,523 --> 00:06:22,724
la résolution de l'attribut.

216
00:06:22,961 --> 00:06:24,162
Regardons un exemple.

217
00:06:25,797 --> 00:06:28,277
Je vais définir dans ma classe Phrase

218
00:06:30,378 --> 00:06:31,394
directement ici,

219
00:06:32,214 --> 00:06:33,327
je vais définir

220
00:06:34,638 --> 00:06:35,966
un nouvel attribut mots

221
00:06:37,020 --> 00:06:38,289
qui est égal à

222
00:06:39,518 --> 00:06:44,699
l'attribut ma_phrase point split.

223
00:06:45,091 --> 00:06:47,238
Donc en fait, ma_phrase.split

224
00:06:47,338 --> 00:06:48,056
va prendre la chaîne de caractères,

225
00:06:48,156 --> 00:06:49,280
va la découper en mots

226
00:06:49,782 --> 00:06:51,787
et l'attribut mots dans la classe Phrase

227
00:06:51,887 --> 00:06:53,360
va simplement référencer cette liste.

228
00:06:53,694 --> 00:06:54,966
Exécutons cela

229
00:06:55,066 --> 00:06:56,966
et regardons maintenant la valeur

230
00:06:57,066 --> 00:06:58,283
de cet attribut mots.

231
00:06:58,537 --> 00:07:00,747
On voit qu'il s'agit effectivement d'une liste.

232
00:07:01,780 --> 00:07:03,014
Maintenant, essayons de chercher

233
00:07:03,114 --> 00:07:04,601
cet attribut mots dans l'instance ;

234
00:07:04,701 --> 00:07:05,596
je vous rappelle que

235
00:07:05,696 --> 00:07:07,026
l'espace de nommage de mon instance

236
00:07:07,126 --> 00:07:07,455
est vide ;

237
00:07:07,555 --> 00:07:08,783
je n'ai donc aucun attribut ;

238
00:07:09,682 --> 00:07:11,006
mais cependant, je peux quand même

239
00:07:11,106 --> 00:07:12,453
accéder à cet attribut mots

240
00:07:12,553 --> 00:07:14,261
qui a été rajouté dans la classe

241
00:07:14,361 --> 00:07:16,492
après la création de l'objet instance.

242
00:07:16,592 --> 00:07:17,424
Regardons cela.

243
00:07:17,665 --> 00:07:18,979
Je vois effectivement que je peux

244
00:07:19,079 --> 00:07:20,734
accéder à cet attribut mots

245
00:07:20,834 --> 00:07:21,932
depuis mon instance.

246
00:07:24,658 --> 00:07:26,261
Maintenant, si je vérifie

247
00:07:26,361 --> 00:07:27,334
mes espaces de nommage

248
00:07:27,434 --> 00:07:28,045
dans ma classe,

249
00:07:31,052 --> 00:07:31,889
et dans mon instance,

250
00:07:31,989 --> 00:07:33,237
je vois bien que dans ma classe,

251
00:07:33,337 --> 00:07:35,319
j'ai bien un attribut ma_phrase

252
00:07:36,757 --> 00:07:38,301
qui référence la chaîne de caractères

253
00:07:38,401 --> 00:07:39,414
"je fais un mooc sur python"

254
00:07:40,017 --> 00:07:41,888
et que j'ai un attribut mots

255
00:07:42,309 --> 00:07:43,395
qui référence une liste

256
00:07:43,495 --> 00:07:44,313
['je', 'fais', 'un', 'mooc', 'sur', 'python'].

257
00:07:44,573 --> 00:07:45,946
Et de nouveau, si je regarde

258
00:07:46,046 --> 00:07:47,404
l'espace de nommage de mon instance,

259
00:07:47,504 --> 00:07:48,241
il est bien vide ;

260
00:07:48,341 --> 00:07:49,517
ça confirme bien que j'ai bien

261
00:07:49,617 --> 00:07:50,685
cette résolution d'attribut

262
00:07:50,785 --> 00:07:52,298
qui est faite de manière dynamique

263
00:07:52,398 --> 00:07:53,877
le long de l'arbre d'héritage.

264
00:07:55,949 --> 00:07:57,259
Pour résumer ce que nous avons vu

265
00:07:57,359 --> 00:07:57,916
jusqu'à maintenant,

266
00:07:58,016 --> 00:07:59,320
les classes et les instances

267
00:07:59,420 --> 00:08:00,489
sont toutes les deux des objets,

268
00:08:00,743 --> 00:08:01,761
des objets mutables,

269
00:08:01,861 --> 00:08:03,441
qui ont leur propre espace de nommage

270
00:08:03,541 --> 00:08:04,790
et qui ont une relation d'héritage,

271
00:08:04,890 --> 00:08:06,190
on recherche les attributs,

272
00:08:06,290 --> 00:08:07,908
de l'instance, on remonte dans la classe.

273
00:08:08,266 --> 00:08:09,002
Cependant, il nous manque

274
00:08:09,102 --> 00:08:10,168
un mécanisme majeur

275
00:08:10,268 --> 00:08:12,101
pour faire de vraies classes.

276
00:08:12,546 --> 00:08:13,891
Lorsque vous définissez une classe,

277
00:08:13,991 --> 00:08:15,785
vous définissez en particulier

278
00:08:15,885 --> 00:08:17,088
des comportements

279
00:08:17,195 --> 00:08:19,924
dont vont hériter vos instances.

280
00:08:20,024 --> 00:08:21,223
Or, pour l'instant, nous n'avons défini

281
00:08:21,323 --> 00:08:22,366
aucun comportement,

282
00:08:22,466 --> 00:08:24,990
nous avons uniquement un seul attribut.

283
00:08:25,211 --> 00:08:26,372
Alors, comment est-ce que l'on implémente

284
00:08:26,472 --> 00:08:27,548
des comportements dans les classes ?

285
00:08:27,648 --> 00:08:28,367
En fait, on implémente ça

286
00:08:28,467 --> 00:08:29,715
par l'intermédiaire de méthodes.

287
00:08:30,031 --> 00:08:31,446
En fait, les méthodes, ce sont simplement

288
00:08:31,546 --> 00:08:32,172
des fonctions

289
00:08:32,272 --> 00:08:33,854
que l'on définit dans les classes.

290
00:08:34,305 --> 00:08:35,055
Et ces fonctions ont

291
00:08:35,155 --> 00:08:36,456
une caractéristique particulière,

292
00:08:36,556 --> 00:08:37,360
c'est qu'elles sont capables

293
00:08:37,460 --> 00:08:39,910
de travailler sur les attributs de l'instance.

294
00:08:40,171 --> 00:08:41,395
Regardons cela.

295
00:08:42,800 --> 00:08:44,311
Je vais revenir sur ma classe,

296
00:08:44,411 --> 00:08:46,039
je vais prendre ma chaîne de caractères

297
00:08:46,752 --> 00:08:48,372
et je vais simplement

298
00:08:48,900 --> 00:08:49,420
définir

299
00:08:51,025 --> 00:08:53,771
une variable s qui est égale à

300
00:08:53,871 --> 00:08:54,915
cette chaîne de caractères.

301
00:08:55,186 --> 00:08:56,536
Ensuite, dans ma classe,

302
00:08:56,636 --> 00:08:57,479
je vais définir une méthode.

303
00:08:57,579 --> 00:08:58,686
Comment je définis une méthode ?

304
00:08:58,786 --> 00:08:59,317
Comme une fonction.

305
00:08:59,779 --> 00:09:01,208
J'utilise l'instruction def

306
00:09:01,308 --> 00:09:02,780
et ensuite je vais avoir

307
00:09:04,494 --> 00:09:05,597
un nom de fonction

308
00:09:05,697 --> 00:09:08,587
que je vais appeler initia

309
00:09:08,687 --> 00:09:09,555
pour initialisation,

310
00:09:09,808 --> 00:09:11,781
qui prend un argument self

311
00:09:12,281 --> 00:09:13,320
et qui prend

312
00:09:16,105 --> 00:09:18,000
un argument ma_phrase.

313
00:09:18,300 --> 00:09:21,135
Et ensuite, dans ma méthode,

314
00:09:21,235 --> 00:09:24,461
je vais définir self point ma_phrase

315
00:09:25,290 --> 00:09:26,034
égale

316
00:09:26,593 --> 00:09:27,783
ma_phrase.

317
00:09:29,405 --> 00:09:31,075
Regardons ce que fait exactement

318
00:09:31,175 --> 00:09:32,625
cette fonction,

319
00:09:33,032 --> 00:09:34,025
que l'on appelle une méthode

320
00:09:34,125 --> 00:09:35,329
quand elle est définie dans une classe.

321
00:09:39,997 --> 00:09:40,835
J'évalue ce code.

322
00:09:40,935 --> 00:09:42,897
Alors maintenant, qu'est-ce que c'est

323
00:09:42,997 --> 00:09:43,844
exactement, cette méthode ?

324
00:09:44,098 --> 00:09:45,106
Vous remarquez que cette méthode

325
00:09:45,206 --> 00:09:46,094
prend deux arguments,

326
00:09:46,194 --> 00:09:48,068
un argument self, un argument ma_phrase.

327
00:09:48,416 --> 00:09:49,119
Et qu'ensuite, je fais un

328
00:09:49,219 --> 00:09:50,843
self point ma_phrase égale ma_phrase.

329
00:09:51,344 --> 00:09:53,045
En fait, lorsque vous appelez

330
00:09:53,145 --> 00:09:54,630
une méthode sur une instance,

331
00:09:54,947 --> 00:09:57,072
la référence de l'instance

332
00:09:57,172 --> 00:09:58,382
sur laquelle vous appelez cette méthode

333
00:09:58,482 --> 00:09:59,794
va être automatiquement passée

334
00:09:59,894 --> 00:10:00,857
comme premier argument.

335
00:10:01,126 --> 00:10:02,704
Donc ma variable self

336
00:10:02,804 --> 00:10:05,511
va référencer mon instance.

337
00:10:06,287 --> 00:10:07,760
Et ensuite, à ma méthode,

338
00:10:07,860 --> 00:10:09,030
je peux lui passer d'autres arguments

339
00:10:09,130 --> 00:10:10,252
comme par exemple ma_phrase.

340
00:10:10,352 --> 00:10:12,531
Maintenant, comme self est une référence

341
00:10:12,631 --> 00:10:13,312
de mon instance,

342
00:10:13,685 --> 00:10:15,924
lorsque ma méthode va s'exécuter,

343
00:10:16,024 --> 00:10:17,969
self.ma_phrase va dire:

344
00:10:18,069 --> 00:10:19,747
crée un attribut ma_phrase

345
00:10:20,481 --> 00:10:21,482
dans mon instance

346
00:10:21,977 --> 00:10:24,259
et fais-lui référencer l'objet

347
00:10:24,359 --> 00:10:25,610
qui est passé en deuxième argument

348
00:10:25,710 --> 00:10:26,742
donc, probablement,

349
00:10:26,842 --> 00:10:28,504
une chaîne de caractères dans ce cas-là.

350
00:10:29,253 --> 00:10:30,105
Regardons maintenant

351
00:10:30,300 --> 00:10:31,775
l'évaluation de ce code.

352
00:10:33,250 --> 00:10:34,193
Maintenant, je vais définir

353
00:10:34,293 --> 00:10:35,380
une instance de Phrase ;

354
00:10:40,054 --> 00:10:41,147
et je vais appeler

355
00:10:41,247 --> 00:10:42,690
la méthode sur mon instance.

356
00:10:42,790 --> 00:10:45,197
Donc je vais faire initia de

357
00:10:45,678 --> 00:10:46,753
et je vais lui passer une phrase

358
00:10:46,853 --> 00:10:48,293
qui est ma chaîne de caractères s

359
00:10:48,534 --> 00:10:50,106
que j'ai définie juste ici.

360
00:10:50,206 --> 00:10:51,179
Voilà, je l'ai définie ici

361
00:10:51,279 --> 00:10:53,616
pour éviter d'avoir besoin de la retaper.

362
00:10:54,791 --> 00:10:57,031
J'exécute ma méthode.

363
00:10:57,131 --> 00:10:59,020
Maintenant, regardons ce qu'il s'est passé

364
00:10:59,120 --> 00:11:00,636
sur mon instance.

365
00:11:00,960 --> 00:11:01,772
Regardons maintenant

366
00:11:01,872 --> 00:11:03,116
l'espace de nommage de mon instance.

367
00:11:03,216 --> 00:11:04,922
Je vous rappelle que, après l'avoir créée,

368
00:11:05,329 --> 00:11:06,700
mon instance est totalement vide.

369
00:11:07,139 --> 00:11:09,114
Et maintenant, j'ai un attribut ma_phrase

370
00:11:09,214 --> 00:11:11,100
qui est: "je fais un mooc sur python".

371
00:11:11,551 --> 00:11:12,480
Donc nous voyons bien que

372
00:11:12,580 --> 00:11:14,751
l'appel de cette méthode initia

373
00:11:14,851 --> 00:11:16,937
a permis de créer un attribut ma_phrase

374
00:11:17,037 --> 00:11:18,396
dans mon instance

375
00:11:18,496 --> 00:11:19,867
qui référence

376
00:11:19,967 --> 00:11:23,169
l'argument que j'ai passé à ma méthode initia.

377
00:11:23,735 --> 00:11:25,013
Maintenant, on peut se demander

378
00:11:25,113 --> 00:11:26,949
comment est-ce que Python fait

379
00:11:27,049 --> 00:11:29,268
pour passer automatiquement l'instance ?

380
00:11:29,738 --> 00:11:32,478
En fait, c'est un mécanisme défini par Python

381
00:11:32,578 --> 00:11:33,431
qui s'appelle un mécanisme

382
00:11:33,531 --> 00:11:34,925
de fonction bound.

383
00:11:35,025 --> 00:11:36,198
Regardons ce que cela veut dire.

384
00:11:37,180 --> 00:11:39,399
Sur Phrase, vous avez un attribut

385
00:11:39,499 --> 00:11:42,079
qui s'appelle initia qui se trouve être en fait

386
00:11:42,179 --> 00:11:43,751
une fonction tout à fait classique.

387
00:11:44,482 --> 00:11:46,054
C'est une fonction qu'on a définie avec def

388
00:11:46,154 --> 00:11:47,068
qui est une fonction classique.

389
00:11:47,498 --> 00:11:50,767
Par contre, si j'appelle initia sur mon instance,

390
00:11:51,147 --> 00:11:52,508
nous allons voir qu'en fait

391
00:11:52,608 --> 00:11:53,688
c'est un autre type d'objet

392
00:11:53,788 --> 00:11:55,350
qui s'appelle un objet bound.

393
00:11:55,938 --> 00:11:57,324
Ça veut dire quoi, un objet bound ?

394
00:11:57,424 --> 00:11:58,893
Ça veut dire que c'est une fonction

395
00:11:59,424 --> 00:12:01,072
qui est liée à l'instance

396
00:12:01,172 --> 00:12:02,294
et lors de l'appel,

397
00:12:02,394 --> 00:12:04,023
Python va automatiquement

398
00:12:04,123 --> 00:12:05,817
passer l'instance comme premier argument

399
00:12:05,917 --> 00:12:06,826
comme je l'ai expliqué.

400
00:12:06,926 --> 00:12:08,214
Donc c'est le fait qu'on appelle

401
00:12:08,314 --> 00:12:09,868
cette fonction sur l'instance

402
00:12:09,968 --> 00:12:11,554
qui crée cet objet particulier

403
00:12:11,654 --> 00:12:13,276
et qui indique à Python qu'on doit lui passer

404
00:12:13,376 --> 00:12:14,507
l'instance comme premier argument.

405
00:12:14,954 --> 00:12:16,141
Donc en fait, lorsque vous faites un

406
00:12:16,241 --> 00:12:19,902
p.initia de s,

407
00:12:22,577 --> 00:12:23,993
c'est totalement équivalent

408
00:12:24,093 --> 00:12:30,272
à faire un Phrase.initia de p virgule s.

409
00:12:30,372 --> 00:12:32,413
En fait, Python va faire automatiquement

410
00:12:32,513 --> 00:12:33,909
cette conversion pour vous.

411
00:12:35,283 --> 00:12:37,038
Dans cette vidéo, nous avons vu les notions

412
00:12:37,138 --> 00:12:38,139
de classe et d'instance ;

413
00:12:38,239 --> 00:12:39,894
nous avons vu que les classes et les instances

414
00:12:39,994 --> 00:12:40,891
sont des objets mutables,

415
00:12:40,991 --> 00:12:42,577
qui ont leur propre espace de nommage

416
00:12:42,677 --> 00:12:44,902
mais qui ont surtout une relation d'héritage.

417
00:12:45,317 --> 00:12:46,835
Nous avons également vu la notion

418
00:12:46,935 --> 00:12:48,817
de méthode bound qui permet à Python

419
00:12:48,917 --> 00:12:50,919
de passer automatiquement l'instance

420
00:12:51,019 --> 00:12:52,226
lorsqu'on appelle une méthode

421
00:12:52,326 --> 00:12:52,990
sur une instance.

422
00:12:53,406 --> 00:12:54,185
À bientôt !

