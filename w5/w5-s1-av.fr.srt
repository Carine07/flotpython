1
00:00:10,840 --> 00:00:11,487
Bonjour.

2
00:00:11,587 --> 00:00:12,835
Dans les précédentes semaines,

3
00:00:12,935 --> 00:00:14,279
nous avons vu de nombreuses notions,

4
00:00:14,379 --> 00:00:16,181
notamment les types built-in, les instructions,

5
00:00:16,281 --> 00:00:16,937
les fonctions, ...

6
00:00:17,037 --> 00:00:18,390
et nous avons également parlé

7
00:00:18,490 --> 00:00:20,214
de la notion de références partagées.

8
00:00:20,717 --> 00:00:21,904
Cette semaine, nous allons voir

9
00:00:22,004 --> 00:00:24,159
deux autres notions clés en Python:

10
00:00:24,650 --> 00:00:26,015
la notion d'itérateur

11
00:00:26,115 --> 00:00:27,305
et d'espace de nommage.

12
00:00:27,775 --> 00:00:29,619
Les itérateurs sont ce qui vous permet

13
00:00:29,719 --> 00:00:30,830
de parcourir les objets

14
00:00:30,930 --> 00:00:32,485
de manière simple et intuitive.

15
00:00:32,971 --> 00:00:34,037
Et les espaces de nommage

16
00:00:34,137 --> 00:00:35,504
vous permettent d'isoler les variables

17
00:00:35,604 --> 00:00:36,422
dans les objets

18
00:00:36,522 --> 00:00:38,367
tout en vous gardant la possibilité

19
00:00:38,467 --> 00:00:40,046
d'accéder aux attributs

20
00:00:40,146 --> 00:00:41,092
de n'importe quel objet

21
00:00:41,192 --> 00:00:43,372
avec une notation simple et explicite.

22
00:00:45,175 --> 00:00:46,777
Nous avons vu dans une précédente vidéo

23
00:00:46,877 --> 00:00:48,566
la notion de boucle for qui vous permet

24
00:00:48,666 --> 00:00:49,808
de parcourir de nombreux objets

25
00:00:49,908 --> 00:00:51,008
comme par exemple les séquences.

26
00:00:52,111 --> 00:00:54,178
On a vu que les boucles for étaient simples

27
00:00:54,278 --> 00:00:55,875
et permettaient d'écrire des itérations

28
00:00:55,975 --> 00:00:57,162
qui soient expressives.

29
00:00:57,262 --> 00:00:58,760
Les boucles for reposent

30
00:00:58,860 --> 00:01:00,548
sur un concept majeur en Python

31
00:01:00,648 --> 00:01:02,655
que l'on appelle le concept d'itérateur.

32
00:01:03,197 --> 00:01:04,484
Les itérateurs en Python

33
00:01:04,584 --> 00:01:05,880
sont des objets simples

34
00:01:05,980 --> 00:01:07,478
qui définissent une interface unique

35
00:01:07,578 --> 00:01:09,957
que l'on appelle le protocole d'itération.

36
00:01:11,835 --> 00:01:14,052
En plus de la simplicité et de l'efficacité

37
00:01:14,152 --> 00:01:15,027
de ce mécanisme,

38
00:01:15,127 --> 00:01:16,679
la notion d'itérateur permet

39
00:01:16,779 --> 00:01:19,426
de découpler l'objet qui itère

40
00:01:19,526 --> 00:01:21,629
de l'objet qui contient les données.

41
00:01:22,433 --> 00:01:23,741
L'avantage est que maintenant

42
00:01:23,841 --> 00:01:24,971
avec un itérateur, nous avons un objet

43
00:01:25,071 --> 00:01:26,357
extrêmement simple et compact

44
00:01:26,457 --> 00:01:28,742
que l'on peut parcourir de manière intuitive.

45
00:01:29,582 --> 00:01:31,034
Un objet que l'on peut parcourir

46
00:01:31,134 --> 00:01:32,386
grâce à un itérateur

47
00:01:32,486 --> 00:01:34,209
s'appelle un objet itérable.

48
00:01:34,309 --> 00:01:35,670
Donc un itérable est un objet

49
00:01:35,770 --> 00:01:37,422
que l'on peut parcourir de multiples fois.

50
00:01:37,899 --> 00:01:40,026
Ouvrons maintenant un interpréteur Python

51
00:01:40,126 --> 00:01:42,355
pour découvrir cette notion d'itération.

52
00:01:42,964 --> 00:01:43,860
En Python,

53
00:01:43,960 --> 00:01:45,769
tous les types built-in sont itérables

54
00:01:45,869 --> 00:01:47,159
sauf évidemment les types numériques

55
00:01:47,259 --> 00:01:48,028
puisque ça n'aurait pas de sens

56
00:01:48,128 --> 00:01:48,786
de les parcourir.

57
00:01:49,256 --> 00:01:50,844
Nous allons maintenant déconstruire

58
00:01:50,944 --> 00:01:52,681
la manière dont fonctionne une boucle for

59
00:01:52,781 --> 00:01:54,098
sur les itérables.

60
00:01:54,198 --> 00:01:56,091
Regardons cela avec un exemple simple.

61
00:01:56,537 --> 00:01:59,224
Je vais créer un ensemble s qui contient

62
00:01:59,324 --> 00:02:01,495
quatre éléments: 1, 2, 3

63
00:02:01,595 --> 00:02:03,181
et la chaîne de caractères 'a'.

64
00:02:04,648 --> 00:02:06,272
Ensuite on sait que l'on peut faire

65
00:02:06,372 --> 00:02:07,102
une boucle for

66
00:02:07,202 --> 00:02:09,345
qui va parcourir chaque élément

67
00:02:09,445 --> 00:02:10,394
de cet ensemble,

68
00:02:10,494 --> 00:02:12,506
et on peut tout à fait afficher

69
00:02:13,271 --> 00:02:16,148
les éléments parcourus par cette boucle for.

70
00:02:17,505 --> 00:02:18,674
On peut également écrire

71
00:02:18,774 --> 00:02:19,807
une compréhension de liste:

72
00:02:21,404 --> 00:02:27,404
x for x in s

73
00:02:27,504 --> 00:02:33,597
if type de x is int.

74
00:02:34,299 --> 00:02:36,942
Donc en fait, ça va me retourner la liste

75
00:02:37,042 --> 00:02:39,688
de tous les éléments de cet itérable,

76
00:02:39,788 --> 00:02:41,054
dans ce cas-là c'est un ensemble,

77
00:02:41,637 --> 00:02:43,614
lorsque ces éléments sont des entiers.

78
00:02:44,177 --> 00:02:45,407
Mais maintenant essayons de comprendre

79
00:02:45,507 --> 00:02:46,830
comment est-ce que la boucle for

80
00:02:46,930 --> 00:02:48,726
va faire pour parcourir cet objet.

81
00:02:48,826 --> 00:02:50,389
En fait, la boucle for va faire

82
00:02:50,489 --> 00:02:52,211
les opérations suivantes:

83
00:02:52,311 --> 00:02:54,004
elle va commencer par récupérer

84
00:02:54,104 --> 00:02:55,501
l'itérateur sur cet ensemble ;

85
00:02:55,601 --> 00:02:57,154
regardons, j'ai un ensemble s ;

86
00:02:57,800 --> 00:02:59,377
je peux tout à fait définir

87
00:02:59,477 --> 00:03:02,396
un objet iter sur s.

88
00:03:02,496 --> 00:03:04,360
iter est la fonction built-in

89
00:03:04,460 --> 00:03:07,347
qui me permet de créer un itérateur

90
00:03:07,447 --> 00:03:09,089
sur cet objet itérable.

91
00:03:09,573 --> 00:03:10,426
Regardons cela.

92
00:03:10,526 --> 00:03:11,955
Je regarde maintenant it

93
00:03:12,055 --> 00:03:15,041
et je vois que it est un objet

94
00:03:15,141 --> 00:03:17,007
qui s'appelle set_iterator.

95
00:03:17,107 --> 00:03:18,494
Donc en appelant cette méthode iter,

96
00:03:18,594 --> 00:03:19,508
j'ai créé un itérateur

97
00:03:19,608 --> 00:03:21,043
sur mon objet ensemble.

98
00:03:21,143 --> 00:03:22,394
Maintenant, qu'est-ce que je peux faire

99
00:03:22,494 --> 00:03:23,357
avec cet itérateur ?

100
00:03:23,841 --> 00:03:24,739
La boucle for,

101
00:03:24,839 --> 00:03:26,567
après avoir appelé cette méthode iter,

102
00:03:26,667 --> 00:03:28,189
va appeler une méthode next,

103
00:03:28,289 --> 00:03:29,410
et c'est ainsi qu'on va parcourir

104
00:03:29,510 --> 00:03:31,225
chaque élément de cet objet itérable.

105
00:03:31,325 --> 00:03:34,776
Si j'appelle next de it,

106
00:03:35,253 --> 00:03:36,180
je vais obtenir

107
00:03:36,617 --> 00:03:38,000
le premier élément de mon ensemble.

108
00:03:38,100 --> 00:03:39,447
Et puis ensuite, je peux le rappeler,

109
00:03:40,436 --> 00:03:41,978
je vais obtenir le deuxième élément,

110
00:03:42,078 --> 00:03:42,874
le troisième élément,

111
00:03:42,974 --> 00:03:44,135
le quatrième élément

112
00:03:44,235 --> 00:03:45,879
et lorsque je n'ai plus d'élément,

113
00:03:45,979 --> 00:03:47,682
la méthode next va me retourner

114
00:03:47,782 --> 00:03:49,904
une exception qui s'appelle StopIteration.

115
00:03:50,004 --> 00:03:51,755
Ensuite, je ne peux plus obtenir

116
00:03:51,855 --> 00:03:52,314
d'autres éléments,

117
00:03:52,414 --> 00:03:53,545
j'obtiendrai en permanence

118
00:03:53,645 --> 00:03:54,506
StopIteration,

119
00:03:54,606 --> 00:03:55,821
ce qui représente bien le fait

120
00:03:55,921 --> 00:03:57,132
qu'un itérateur ne peut se parcourir

121
00:03:57,232 --> 00:03:58,146
qu'une seule fois.

122
00:03:59,348 --> 00:04:00,998
Je tiens à vous rassurer dès maintenant,

123
00:04:01,098 --> 00:04:02,629
en pratique, vous n'aurez jamais

124
00:04:02,729 --> 00:04:03,862
à appeler vous-mêmes

125
00:04:03,962 --> 00:04:06,182
les méthodes iter et next sur vos objets

126
00:04:06,282 --> 00:04:07,572
pour être capables de les parcourir.

127
00:04:07,672 --> 00:04:09,363
Ce sont les mécanismes d'itération

128
00:04:09,463 --> 00:04:10,672
comme par exemple les boucles for

129
00:04:10,772 --> 00:04:11,810
ou les compréhensions

130
00:04:11,910 --> 00:04:12,890
qui vont faire ça pour vous.

131
00:04:12,990 --> 00:04:14,398
Cependant, c'est très important

132
00:04:14,498 --> 00:04:16,896
de comprendre ce protocole d'itération

133
00:04:16,996 --> 00:04:18,683
parce que ça vous permettra par la suite

134
00:04:18,783 --> 00:04:21,648
d'écrire vos propres objets itérables

135
00:04:21,748 --> 00:04:22,935
ou vos propres itérateurs.

136
00:04:23,035 --> 00:04:24,696
Essayons maintenant de formaliser

137
00:04:24,796 --> 00:04:25,829
un petit peu plus ces notions

138
00:04:25,929 --> 00:04:27,814
d'itérable et d'itérateur.

139
00:04:28,868 --> 00:04:29,938
Comme je vous l'ai expliqué,

140
00:04:30,038 --> 00:04:31,061
vous avez deux types d'objets,

141
00:04:31,161 --> 00:04:33,445
les itérables et les itérateurs.

142
00:04:33,545 --> 00:04:34,423
Ce sont deux types d'objets

143
00:04:34,523 --> 00:04:36,224
qui sont conceptuellement différents.

144
00:04:36,957 --> 00:04:39,784
Un itérable est un objet qui a une méthode

145
00:04:39,884 --> 00:04:41,650
double underscore iter double underscore

146
00:04:41,750 --> 00:04:43,328
que l'on appelle une méthode spéciale ;

147
00:04:43,428 --> 00:04:44,675
nous parlerons largement

148
00:04:44,775 --> 00:04:45,382
des méthodes spéciales

149
00:04:45,482 --> 00:04:46,781
lorsque nous reviendrons sur les classes ;

150
00:04:47,179 --> 00:04:48,291
mais pour l'instant, sachez que c'est

151
00:04:48,391 --> 00:04:50,396
une méthode qui existe sur cet objet,

152
00:04:50,935 --> 00:04:52,306
et cette méthode, lorsqu'on l'appelle,

153
00:04:52,406 --> 00:04:53,934
elle retourne un nouvel objet

154
00:04:54,034 --> 00:04:55,165
qui s'appelle un itérateur.

155
00:04:55,878 --> 00:04:57,116
Cette méthode, vous pouvez l'appeler

156
00:04:57,216 --> 00:04:58,395
soit directement sur l'objet

157
00:04:58,495 --> 00:05:00,612
ou alors avec la fonction built-in iter,

158
00:05:00,712 --> 00:05:01,658
c'est totalement équivalent

159
00:05:01,758 --> 00:05:03,460
et c'est la méthode que nous avons utilisée

160
00:05:03,560 --> 00:05:04,674
il y a quelques instants.

161
00:05:06,066 --> 00:05:10,243
Un itérateur est un objet qui a une méthode

162
00:05:10,343 --> 00:05:11,946
double underscore iter double underscore

163
00:05:12,046 --> 00:05:13,380
qui retourne l'itérateur lui-même,

164
00:05:13,750 --> 00:05:14,935
et une méthode next

165
00:05:15,035 --> 00:05:16,285
qui, à chaque fois qu'on l'appelle,

166
00:05:16,385 --> 00:05:17,888
va retourner un nouvel élément

167
00:05:18,910 --> 00:05:21,072
et ensuite StopIteration

168
00:05:21,172 --> 00:05:23,136
lorsqu'on n'a plus d'élément à parcourir.

169
00:05:23,236 --> 00:05:24,977
Donc un itérateur ne peut se parcourir

170
00:05:25,077 --> 00:05:25,687
qu'une seule fois ;

171
00:05:26,260 --> 00:05:27,879
on parcourt tous les éléments

172
00:05:27,979 --> 00:05:29,581
et lorsqu'il n'y a plus d'élément à parcourir

173
00:05:29,681 --> 00:05:30,694
on a StopIteration.

174
00:05:31,127 --> 00:05:31,989
Là également,

175
00:05:32,089 --> 00:05:33,338
on peut appeler cette méthode next

176
00:05:33,438 --> 00:05:35,008
soit directement sur l'objet

177
00:05:35,108 --> 00:05:37,247
ou alors avec la fonction built-in next.

178
00:05:38,277 --> 00:05:39,511
Lorsqu'on voit ces notions

179
00:05:39,611 --> 00:05:40,773
d'itérable et d'itérateur,

180
00:05:40,873 --> 00:05:42,372
il y a plusieurs questions qu'on peut se poser.

181
00:05:42,472 --> 00:05:44,060
La première question, c'est pourquoi

182
00:05:44,160 --> 00:05:45,496
est-ce qu'on a une méthode iter

183
00:05:46,207 --> 00:05:47,215
sur l'itérateur

184
00:05:47,315 --> 00:05:48,653
qui retourne l'itérateur lui-même ?

185
00:05:48,753 --> 00:05:50,291
La raison est simple,

186
00:05:50,391 --> 00:05:52,343
c'est qu'un objet itérable

187
00:05:52,443 --> 00:05:54,370
est itérable parce qu'il a une méthode iter

188
00:05:54,470 --> 00:05:55,504
qui retourne un itérateur ;

189
00:05:55,604 --> 00:05:58,029
et bien un itérateur est également itérable

190
00:05:58,129 --> 00:05:59,469
parce qu'il a une méthode iter

191
00:05:59,569 --> 00:06:00,900
qui retourne un itérateur.

192
00:06:01,000 --> 00:06:02,151
Le fait que ce soit lui-même

193
00:06:02,251 --> 00:06:03,107
ne change rien à l'affaire,

194
00:06:03,207 --> 00:06:04,908
ça reste un objet itérable.

195
00:06:05,008 --> 00:06:06,034
Par conséquent,

196
00:06:06,134 --> 00:06:07,626
tous les mécanismes d'itération,

197
00:06:07,726 --> 00:06:09,280
boucle for, compréhension de liste,

198
00:06:09,380 --> 00:06:11,376
peuvent prendre soit un itérable,

199
00:06:11,476 --> 00:06:12,773
soit un itérateur, et le parcourir

200
00:06:12,873 --> 00:06:15,065
de manière totalement simple et intuitive.

201
00:06:17,513 --> 00:06:19,040
La deuxième question qu'on peut se poser

202
00:06:19,140 --> 00:06:21,432
est pourquoi est-ce qu'on a deux notions

203
00:06:21,532 --> 00:06:22,625
itérable et itérateur

204
00:06:22,725 --> 00:06:23,741
puisque les boucles for peuvent prendre

205
00:06:23,841 --> 00:06:25,236
ces deux objets de manière indifférente ?

206
00:06:25,722 --> 00:06:27,021
En fait, ces deux objets sont

207
00:06:27,121 --> 00:06:28,397
conceptuellement différents ;

208
00:06:29,054 --> 00:06:31,882
l'itérable est l'objet qui contient les données

209
00:06:31,982 --> 00:06:35,040
et l'itérateur est un objet simple et compact

210
00:06:35,140 --> 00:06:37,169
qui parcourt les données

211
00:06:37,269 --> 00:06:38,825
qui sont contenues dans l'itérable.

212
00:06:39,807 --> 00:06:41,676
Lorsque vous manipulez des objets itérables,

213
00:06:41,776 --> 00:06:42,501
comme les listes,

214
00:06:42,601 --> 00:06:43,858
c'est votre mécanisme d'itération

215
00:06:43,958 --> 00:06:45,890
qui va s'occuper de parcourir ces objets.

216
00:06:46,356 --> 00:06:47,051
Mais dans certains cas,

217
00:06:47,151 --> 00:06:47,902
vous n'aurez pas d'itérable,

218
00:06:48,002 --> 00:06:49,538
vous aurez directement un itérateur.

219
00:06:50,015 --> 00:06:51,737
C'est par exemple le cas des fichiers.

220
00:06:52,141 --> 00:06:53,171
Pourquoi est-ce que les fichiers

221
00:06:53,271 --> 00:06:54,121
sont des itérateurs ?

222
00:06:54,664 --> 00:06:56,286
On le comprend assez aisément ;

223
00:06:56,635 --> 00:06:58,253
on voit bien que si on avait à lire

224
00:06:58,353 --> 00:06:59,198
un fichier qui fasse

225
00:06:59,298 --> 00:07:00,586
des dizaines de megabytes

226
00:07:00,686 --> 00:07:01,680
ou des centaines de megabytes,

227
00:07:01,780 --> 00:07:04,072
ça serait une mauvaise idée

228
00:07:04,172 --> 00:07:05,940
d'avoir entièrement à le charger en mémoire.

229
00:07:06,040 --> 00:07:07,961
Or, le seul moyen d'avoir un itérable,

230
00:07:08,061 --> 00:07:09,439
c'est d'avoir un objet qui contient

231
00:07:09,539 --> 00:07:10,613
toutes les données en mémoire.

232
00:07:11,092 --> 00:07:12,844
Donc le choix de Python a été de dire

233
00:07:12,944 --> 00:07:14,507
pour les fichiers, on a un itérateur

234
00:07:14,607 --> 00:07:16,420
qui va parcourir ligne par ligne

235
00:07:16,520 --> 00:07:18,099
le fichier qui est contenu sur le disque dur.

236
00:07:18,599 --> 00:07:20,371
Évidemment, si vous avez le besoin

237
00:07:20,471 --> 00:07:21,792
de stocker toutes les lignes d'un fichier

238
00:07:21,892 --> 00:07:22,390
dans une liste,

239
00:07:22,490 --> 00:07:23,437
vous pouvez le faire

240
00:07:23,537 --> 00:07:25,255
mais vous le ferez de manière explicite.

241
00:07:25,797 --> 00:07:27,334
Regardons maintenant de nouveau

242
00:07:27,434 --> 00:07:28,770
le fonctionnement des itérateurs

243
00:07:28,870 --> 00:07:29,766
et notamment le fait

244
00:07:29,866 --> 00:07:31,513
qu'un itérateur ne peut se parcourir

245
00:07:31,613 --> 00:07:32,263
qu'une seule fois.

246
00:07:32,749 --> 00:07:34,614
Pour cela, ouvrons un interpréteur Python

247
00:07:34,714 --> 00:07:36,196
pour jouer avec les itérateurs.

248
00:07:37,105 --> 00:07:38,858
Créons maintenant deux listes.

249
00:07:38,958 --> 00:07:40,392
Je vais créer une liste a

250
00:07:41,142 --> 00:07:43,558
qui contient deux éléments, 1 et 2.

251
00:07:44,083 --> 00:07:45,484
Et je vais créer une liste b

252
00:07:46,217 --> 00:07:50,150
qui contient deux éléments, 3 et 4.

253
00:07:51,323 --> 00:07:53,571
Donc maintenant, j'ai deux listes a et b,

254
00:07:53,671 --> 00:07:54,762
ce sont des objets listes,

255
00:07:54,862 --> 00:07:55,830
je peux très bien prendre

256
00:07:55,930 --> 00:07:57,237
un itérateur sur ma liste,

257
00:07:57,803 --> 00:07:59,295
et je vais voir que j'ai un nouvel objet

258
00:07:59,395 --> 00:08:00,622
qui s'appelle list_iterator.

259
00:08:00,722 --> 00:08:02,200
Mais en pratique, je n'ai pas besoin de le faire,

260
00:08:02,300 --> 00:08:04,159
mon objet liste est itérable

261
00:08:04,259 --> 00:08:05,799
et je peux faire autant de boucles for

262
00:08:05,899 --> 00:08:07,123
que je le souhaite sur cet objet.

263
00:08:07,347 --> 00:08:08,818
En fait, comme on le sait,

264
00:08:08,918 --> 00:08:10,809
ma liste va contenir une référence

265
00:08:10,909 --> 00:08:13,495
vers les objets qui sont contenus dans la liste,

266
00:08:13,595 --> 00:08:14,873
par conséquent, mon objet liste

267
00:08:14,973 --> 00:08:15,864
existe en mémoire.

268
00:08:16,693 --> 00:08:17,593
Mais regardons maintenant

269
00:08:17,693 --> 00:08:18,617
un autre type d'objet.

270
00:08:19,096 --> 00:08:20,311
Créons un nouvel objet

271
00:08:20,685 --> 00:08:22,269
qui est un objet zip

272
00:08:22,369 --> 00:08:24,011
qui va prendre deux listes, a et b.

273
00:08:24,906 --> 00:08:26,795
Que fait la fonction built-in zip ?

274
00:08:26,895 --> 00:08:28,153
En fait, elle va prendre

275
00:08:28,253 --> 00:08:29,850
le premier élément de chaque liste,

276
00:08:29,950 --> 00:08:31,074
elle va le mettre dans un tuple,

277
00:08:31,485 --> 00:08:32,383
puis ensuite, elle va prendre

278
00:08:32,483 --> 00:08:34,003
le deuxième élément de chaque liste,

279
00:08:34,103 --> 00:08:35,301
le mettre dans un tuple.

280
00:08:35,707 --> 00:08:37,252
On voit bien dans ce cas-là

281
00:08:37,352 --> 00:08:39,412
qu'il n'y aurait pas vraiment d'intérêt

282
00:08:39,512 --> 00:08:41,378
à créer une structure de données temporaire

283
00:08:41,478 --> 00:08:43,456
qui contiendrait la liste de tous les tuples.

284
00:08:43,885 --> 00:08:45,038
Donc le choix de Python

285
00:08:45,138 --> 00:08:46,685
a été de créer un objet zip

286
00:08:46,785 --> 00:08:48,204
qui est en fait un itérateur.

287
00:08:48,690 --> 00:08:49,603
Regardons cela.

288
00:08:50,553 --> 00:08:51,521
J'ai mon objet zip

289
00:08:52,313 --> 00:08:53,969
qui est un objet zip classique

290
00:08:54,069 --> 00:08:54,822
et si je regarde

291
00:08:54,922 --> 00:08:57,926
est-ce que z is iter de z ?

292
00:08:58,026 --> 00:08:59,316
C'est-à-dire est-ce que z

293
00:08:59,416 --> 00:09:00,313
est son propre itérateur ?

294
00:09:00,413 --> 00:09:01,615
Je vois que c'est le cas.

295
00:09:01,715 --> 00:09:03,218
Donc maintenant j'ai la certitude

296
00:09:03,318 --> 00:09:05,022
qu'il s'agit d'un objet itérateur.

297
00:09:05,122 --> 00:09:06,640
Par conséquent, je ne peux le parcourir

298
00:09:06,740 --> 00:09:07,279
qu'une seule fois.

299
00:09:07,861 --> 00:09:08,504
Donc maintenant,

300
00:09:08,604 --> 00:09:10,009
si je fais une compréhension de liste,

301
00:09:10,109 --> 00:09:13,070
i for i in z,

302
00:09:13,717 --> 00:09:15,605
je vais obtenir la liste des tuples

303
00:09:15,705 --> 00:09:16,364
qui contiennent

304
00:09:16,464 --> 00:09:17,533
le premier élément de chaque liste

305
00:09:17,633 --> 00:09:18,836
puis le deuxième élément de chaque liste.

306
00:09:18,936 --> 00:09:20,399
Regardons cela, j'ai effectivement

307
00:09:20,499 --> 00:09:21,766
(1, 3), (2, 4).

308
00:09:22,211 --> 00:09:23,045
Mais si maintenant,

309
00:09:23,145 --> 00:09:24,917
je fais une deuxième compréhension de liste,

310
00:09:25,728 --> 00:09:27,277
je vais obtenir une liste vide.

311
00:09:27,377 --> 00:09:29,611
En effet, mon itérateur a été consommé,

312
00:09:29,711 --> 00:09:30,558
maintenant il est vide,

313
00:09:30,658 --> 00:09:31,420
je ne peux plus le parcourir.

314
00:09:31,520 --> 00:09:32,764
Et je peux le vérifier

315
00:09:32,864 --> 00:09:34,609
en faisant un next de z ;

316
00:09:34,709 --> 00:09:36,531
je vais bien voir que j'ai StopIteration

317
00:09:36,631 --> 00:09:38,195
donc mon itérateur a été consommé.

318
00:09:38,607 --> 00:09:40,384
Le principe des itérateurs,

319
00:09:40,484 --> 00:09:41,658
c'est que les itérateurs sont des objets

320
00:09:41,758 --> 00:09:42,626
simples et compacts,

321
00:09:42,726 --> 00:09:44,625
qui sont très peu coûteux à créer.

322
00:09:44,725 --> 00:09:47,255
Par conséquent, si je veux une nouvelle fois

323
00:09:47,355 --> 00:09:48,803
parcourir les couples

324
00:09:48,903 --> 00:09:50,577
de premiers éléments de mes listes

325
00:09:50,677 --> 00:09:51,648
et de deuxièmes éléments de mes listes,

326
00:09:51,748 --> 00:09:54,537
je n'ai qu'à recréer un nouvel objet itérateur ;

327
00:09:55,287 --> 00:09:56,837
c'est extrêmement peu coûteux à créer

328
00:09:56,937 --> 00:09:58,415
puisque cet objet ne va rien parcourir

329
00:09:58,515 --> 00:10:00,103
et ne va faire aucun calcul.

330
00:10:00,342 --> 00:10:02,781
Et en fait, le calcul ne sera fait qu'au moment

331
00:10:02,881 --> 00:10:04,987
où je vais itérer sur cet itérateur,

332
00:10:05,087 --> 00:10:06,488
donc de nouveau, je peux bien

333
00:10:06,588 --> 00:10:07,759
parcourir les éléments de ma liste.

334
00:10:07,859 --> 00:10:08,794
Donc gardez bien en tête

335
00:10:08,894 --> 00:10:09,724
que les itérateurs sont

336
00:10:09,824 --> 00:10:10,896
des objets simples et compacts,

337
00:10:10,996 --> 00:10:12,622
que l'on ne peut parcourir qu'une seule fois ;

338
00:10:12,722 --> 00:10:14,082
par contre, en général,

339
00:10:14,182 --> 00:10:15,023
créer un nouvel itérateur

340
00:10:15,123 --> 00:10:15,895
est très peu coûteux

341
00:10:15,995 --> 00:10:16,868
donc nous pouvons en créer

342
00:10:16,968 --> 00:10:17,979
à chaque fois que nous en avons besoin

343
00:10:18,079 --> 00:10:18,856
d'un nouveau.

344
00:10:19,894 --> 00:10:21,519
Nous venons de voir le concept

345
00:10:21,619 --> 00:10:23,371
d'itérable et d'itérateur ;

346
00:10:23,471 --> 00:10:25,095
nous avons vu que l'itérable est un objet

347
00:10:25,195 --> 00:10:25,894
que l'on peut parcourir

348
00:10:25,994 --> 00:10:27,100
autant de fois que l'on veut

349
00:10:27,200 --> 00:10:29,092
avec n'importe quel mécanisme d'itération

350
00:10:29,192 --> 00:10:29,882
en Python ;

351
00:10:29,982 --> 00:10:31,291
et que l'itérateur est un objet

352
00:10:31,391 --> 00:10:32,535
simple et compact

353
00:10:32,635 --> 00:10:34,729
que l'on ne peut parcourir qu'une seule fois.

354
00:10:35,780 --> 00:10:36,406
À bientôt !

