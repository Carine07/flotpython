<hr/>
Expression génératrice (1)
=====

Quel est l'intérêt d'une expression génératrice par rapport à une compréhension de liste ?

[ ] C'est beaucoup plus rapide à parcourir.
[ ] C'est plus facile à écrire.
[x] Ça occupe moins de mémoire.
[ ] C'est totalement équivalent.

[explanation]

Le temps de parcours d'une expression génératrice est de l'ordre de grandeur du temps de parcours d'une compréhension. 

Une expression génératrice s'écrit comme une compréhension en remplacement simplement les crochets par des parenthèses. 

Une expression génératrice ne crée aucune liste temporaire, elle est donc beaucoup plus économe en mémoire qu'une compréhension.

[explanation]

<hr/>
Expression génératrice (2)
=====

<pre>
carre = (x**2 for x in range(10))
print(list(carre))
res = &#91;x**2 for x in carre&#93;
</pre>

Que va référencer la variable <code>res</code> après avoir évalué le code ci-dessus ?

[ ] Une liste contenant le carré des carrés des entiers allant de 0 à 9
[x] Une liste vide
[ ] Un objet générator
[ ] Ce code va produire une exception

[explanation]

L'objet <code>carre</code> produit par l'expression génératrice (donc référencé par <code>carre</code>) est un itérateur. Il ne peut
donc être parcouru qu'une seule fois.

Lors de l'évaluation de la ligne <code>print</code>, l'évaluation de <code>list(carre)</code> va parcourir l'itérateur, et donc le consommer.

Du coup avant d'évaluer la dernière ligne l'itérateur est épuisé, il n'y a plus rien à parcourir, la compréhension va retourner une liste vide. 

[explanation]


<hr/>
Fonction génératrice
=====
<pre>
def gen(it):
   for i in it:
       if isinstance(i, int):
           yield i**2
       else:
           yield 'nan'	   
	  
L = &#91;1, 2, 0, '18', 'x', &#91;11&#93;, 25&#93;
print(list(gen(L)))
</pre>

Que va afficher <code>print(list(gen(L)))</code> ?

( ) <code>&#91;&#93;</code>
( ) <code>&#91;1, 4, 0, '324', 'nan', &#91;121&#93;, 625&#93;</code>
(x) <code>&#91;1, 4, 0, 'nan', 'nan', 'nan', 625&#93;</code>
( ) <code>&lt;function gen at ...&gt;</code>
( ) Une exception
( ) <code>&#91;1, 2, 0, '18', 'x', &#91;11&#93;, 25&#93;</code>


[explanation]

Le générateur va retourner pour tous les éléments de la liste, soit le carré si c'est un entier, soit la chaîne 'nan' sinon. 

[explanation]

