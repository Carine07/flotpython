1
00:00:04,059 --> 00:00:05,830
Lorsque l'on développe des fonctions,

2
00:00:06,030 --> 00:00:09,237
il arrive que l'on ait un même besoin sur plusieurs fonctions.

3
00:00:09,437 --> 00:00:11,410
Par exemple, calculer un temps d'exécution,

4
00:00:11,610 --> 00:00:12,980
valider des arguments,

5
00:00:13,180 --> 00:00:15,980
ou compter le nombre d'appels que l'on fait de ces fonctions.

6
00:00:16,180 --> 00:00:19,022
Dès maintenant, vous savez tout à fait implémenter

7
00:00:19,222 --> 00:00:20,223
ce type de fonctionnalité.

8
00:00:20,423 --> 00:00:21,509
Le problème que l'on aurait,

9
00:00:21,709 --> 00:00:23,115
c'est qu'on dupliquerait beaucoup de code

10
00:00:23,315 --> 00:00:26,030
puisqu'il faudrait écrire un code spécifique, pour chaque fonction

11
00:00:26,230 --> 00:00:27,842
alors que ce code fait, essentiellement, la même chose.

12
00:00:28,042 --> 00:00:31,123
Il existe, en Python, une technique que l'on appelle le décorateur.

13
00:00:31,323 --> 00:00:34,759
Un décorateur est une manière de dire, explicitement,

14
00:00:34,959 --> 00:00:36,986
que l'on modifie le comportement d'une fonction.

15
00:00:37,186 --> 00:00:38,723
Ça permet également de factoriser

16
00:00:38,923 --> 00:00:41,555
un code que l'on applique à différents types de fonctions.

17
00:00:41,755 --> 00:00:45,242
Essentiellement, un décorateur permet d'exécuter du code

18
00:00:45,442 --> 00:00:46,527
avant l'appel d'une fonction,

19
00:00:46,727 --> 00:00:47,807
après l'appel d'une fonction,

20
00:00:48,007 --> 00:00:50,597
et éventuellement de garder des informations

21
00:00:50,797 --> 00:00:52,983
entre plusieurs appels successifs d'une fonction.

22
00:00:53,183 --> 00:00:55,289
Mais, nous allons voir qu'un décorateur est plus général que ça

23
00:00:55,489 --> 00:00:57,837
et qu'on peut imaginer bien d'autres applications.

24
00:00:58,037 --> 00:01:00,673
Regardons maintenant le fonctionnement d'un décorateur.

25
00:01:02,287 --> 00:01:05,570
Regardons comment est-ce que l'on note un décorateur, en Python.

26
00:01:05,770 --> 00:01:06,609
Nous en avons déjà parlé

27
00:01:06,809 --> 00:01:09,202
lorsque nous avons parlé des fonctions statiques et de classe.

28
00:01:09,402 --> 00:01:10,896
Nous avons une notation @

29
00:01:11,096 --> 00:01:15,440
qui permet de dire que l'on applique le décorateur à notre fonction f.

30
00:01:15,640 --> 00:01:19,009
Donc l'intérêt principal de cette notation, c'est de rendre explicite

31
00:01:19,209 --> 00:01:20,949
le fait que l'on décore cette fonction.

32
00:01:21,149 --> 00:01:23,212
Cependant, un décorateur de fait rien de magique.

33
00:01:23,412 --> 00:01:25,752
C'est simplement un raccourci vers la syntaxe suivante :

34
00:01:25,952 --> 00:01:27,442
on crée toujours notre fonction

35
00:01:27,642 --> 00:01:31,258
et le @decorateur va simplement dire à l'interpréteur Python

36
00:01:31,458 --> 00:01:35,443
qu'il faut faire un f=decorateur(f),

37
00:01:35,643 --> 00:01:36,851
essentiellement ce que fait un décorateur.

38
00:01:37,051 --> 00:01:38,046
Nous voyons que c'est assez simple.

39
00:01:38,246 --> 00:01:41,001
Donc ça évidemment, ça vous rappelle ce que nous avons déjà vu

40
00:01:41,201 --> 00:01:43,256
dans le contexte des méthodes statiques et des méthodes de classe.

41
00:01:43,456 --> 00:01:44,580
Donc, reprenons notre exemple.

42
00:01:44,780 --> 00:01:46,313
Nous avons une classe C qui définit une fonction f

43
00:01:46,513 --> 00:01:48,985
que l'on décore comme méthode de classe,

44
00:01:49,185 --> 00:01:51,869
une fonction g que l'on décore comme méthode statique.

45
00:01:52,069 --> 00:01:55,482
En fait, nous venons de le voir, ces notations décoration

46
00:01:55,682 --> 00:01:57,670
sont tout à fait équivalentes à faire la chose suivante :

47
00:01:57,870 --> 00:02:01,288
déclarons, à nouveau, notre classe C avec notre méthode f et notre méthode g,

48
00:02:01,488 --> 00:02:04,866
et en décrivant, plus loin, que f=classmethod(f)

49
00:02:05,066 --> 00:02:07,258
et g=staticmethod(g).

50
00:02:07,458 --> 00:02:10,901
Nous voyons la supériorité de cette notation  décorateur.

51
00:02:11,101 --> 00:02:12,798
Alors, vous allez dire mais qu'est-ce qui a de supérieur

52
00:02:12,998 --> 00:02:14,898
puisque c'est un tout petit raccourci à cette syntaxe?

53
00:02:15,098 --> 00:02:18,014
En fait, c'est très important de pouvoir spécifier,

54
00:02:18,214 --> 00:02:19,549
lorsque l'on déclare une fonction,

55
00:02:19,749 --> 00:02:22,039
que le comportement de la fonction est modifié.

56
00:02:22,239 --> 00:02:25,649
En effet, déclarer une méthode comme statique ou de classe est

57
00:02:25,849 --> 00:02:28,689
une modification fondamentale du comportement de la fonction.

58
00:02:28,889 --> 00:02:32,141
Avec la notation de décorateurs, vous pouvez vraiment lier

59
00:02:32,341 --> 00:02:36,685
cette modification de comportement, au moment de la déclaration de la fonction.

60
00:02:36,885 --> 00:02:39,147
Donc, on voit bien que - ici, j'ai mis des petits pointillés

61
00:02:39,347 --> 00:02:41,854
mais les déclarations classmethod, staticmethod auraient pu être faites

62
00:02:42,054 --> 00:02:46,357
très loin de la déclaration effective des méthodes.

63
00:02:46,557 --> 00:02:50,329
Avec l'annotation décorateur, on est obligé de mettre le @,

64
00:02:50,529 --> 00:02:52,190
juste avant la déclaration de la fonction.

65
00:02:52,390 --> 00:02:54,414
Donc maintenant, c'est tout à fait explicite.

66
00:02:54,614 --> 00:02:57,986
Alors donc, revenons sur cette notion de décorateurs :

67
00:02:58,186 --> 00:03:01,235
@decorateur au-dessus d'une fonction

68
00:03:01,435 --> 00:03:03,715
consiste à faire f=decorateur(f).

69
00:03:03,915 --> 00:03:06,062
Le point clé, c'est que f, maintenant,

70
00:03:06,262 --> 00:03:07,434
lorsque j'appelle ma fonction f,

71
00:03:07,634 --> 00:03:10,101
ça n'est plus la fonction f originale.

72
00:03:10,301 --> 00:03:12,931
Mais, en fait, la fonction que je vais appeler,

73
00:03:13,131 --> 00:03:15,596
c'est le résultat de decorateur(f).

74
00:03:15,796 --> 00:03:19,287
Donc, pour expliquer cette notion de résultat de decorateur(f),

75
00:03:19,487 --> 00:03:21,750
il faut que j'introduise une notion que l'on appelle un callable.

76
00:03:21,950 --> 00:03:23,002
Qu'est-ce-qu'un callable?

77
00:03:23,202 --> 00:03:25,589
Un callable, c'est un objet que l'on peut appeler

78
00:03:25,789 --> 00:03:28,134
avec l'annotation O (),

79
00:03:28,334 --> 00:03:29,495
enfin O étant le nom de l'objet,

80
00:03:29,695 --> 00:03:33,510
et ensuite, on rajoute des parenthèses juste après.

81
00:03:33,710 --> 00:03:35,643
Donc, en fait, ça correspond exactement à ce que vous connaissez

82
00:03:35,843 --> 00:03:37,170
comme étant une fonction.

83
00:03:37,370 --> 00:03:38,575
Une fonction, évidemment, est callable

84
00:03:38,775 --> 00:03:43,725
mais également une instance, dont la classe implémente __call__

85
00:03:43,925 --> 00:03:45,832
Alors maintenant, qu'est-ce que c'est un décorateur,

86
00:03:46,032 --> 00:03:48,343
une fois qu'on a cette notion de callable en tête?

87
00:03:48,543 --> 00:03:51,789
Un décorateur, en fait, c'est un callable

88
00:03:51,989 --> 00:03:53,926
qui prend comme argument une fonction

89
00:03:54,126 --> 00:03:56,555
et qui retourne, de nouveau,un callable.

90
00:03:56,755 --> 00:03:58,805
Donc, en fait, f = decorateur(f)

91
00:03:59,005 --> 00:04:00,783
decorateur, c'est un callable,

92
00:04:00,983 --> 00:04:03,207
on voit bien, je peux l'appeler, avec des parenthèses,

93
00:04:03,407 --> 00:04:05,981
en lui passant l'objet fonction en tant qu'argument.

94
00:04:06,181 --> 00:04:11,258
Et le résultat de cet appel de decorateur(f) doit me retourner un callable

95
00:04:11,458 --> 00:04:13,444
C'est-à-dire un objet que je peux, de nouveau, appeler.

96
00:04:13,644 --> 00:04:15,100
Ça n'est pas surprenant, puisque après

97
00:04:15,300 --> 00:04:17,407
je vais appeler ma fonction f, tout à fait, normalement.

98
00:04:17,607 --> 00:04:20,422
Il faut, donc après, que l'objet retourné par decorateur(f)

99
00:04:20,622 --> 00:04:22,888
puisse, de nouveau, être appelé.

100
00:04:23,088 --> 00:04:25,026
Donc, f = decorateur(f)

101
00:04:25,226 --> 00:04:27,979
decorateur(f) va me retourner un objet O

102
00:04:28,179 --> 00:04:30,311
et cet objet O doit être callable

103
00:04:30,511 --> 00:04:33,270
et, en fait, lorsque j'appelle f(a, b) et bien, en fait,

104
00:04:33,470 --> 00:04:36,549
ça appelera, en réalité, l'objet O(a, b).

105
00:04:36,749 --> 00:04:40,863
Ça passera mes arguments a et b à mon nouvel objet callable.

106
00:04:41,063 --> 00:04:43,607
Donc, à quoi sert un décorateur?

107
00:04:43,807 --> 00:04:45,216
Nous l'avons expliqué en introduction.

108
00:04:45,416 --> 00:04:47,999
Ça sert essentiellement à ajouter une couche de logique

109
00:04:48,199 --> 00:04:49,483
autour de l'appel d'une fonction

110
00:04:49,683 --> 00:04:53,466
éventuellement, gardé de l'état entre deux appels d'une fonction,

111
00:04:53,666 --> 00:04:56,138
avec une notation qui est explicite,

112
00:04:56,338 --> 00:04:57,507
donc c'est vraiment ça l'intérêt marquant.

113
00:04:57,707 --> 00:05:00,069
C'est que maintenant, on va modifier explicitement

114
00:05:00,269 --> 00:05:03,475
le comportement d'une fonction avec cette notation @decorateur.

115
00:05:03,675 --> 00:05:06,636
Évidemment, lorsqu'on définit un décorateur, il faut définir un nom

116
00:05:06,836 --> 00:05:08,850
de décorateur qui explique clairement

117
00:05:09,050 --> 00:05:10,459
ce qu'on est en train de faire à la fonction.

118
00:05:10,659 --> 00:05:13,528
Donc, pour cela, regardons un exemple.

119
00:05:13,728 --> 00:05:16,439
Imaginons que je veuille écrire un décorateur,

120
00:05:16,639 --> 00:05:17,886
qui s'appelle NbAppel,

121
00:05:18,086 --> 00:05:20,416
dont le but est de compter le nombre d'appels

122
00:05:20,616 --> 00:05:21,696
que je fais sur ma fonction.

123
00:05:21,896 --> 00:05:24,651
Donc je vais l'écrire @NbAppel

124
00:05:24,851 --> 00:05:26,303
et que va faire ce décorateur ?

125
00:05:26,503 --> 00:05:28,155
On l'a vu, c'est totalement équivalent à faire

126
00:05:28,355 --> 00:05:30,943
def f (a, b)  print(a, b) puis ensuite

127
00:05:31,143 --> 00:05:32,919
f = NbAppel(f)

128
00:05:33,119 --> 00:05:36,157
Donc maintenant, regardons l'implémentation de ce décorateur.

129
00:05:36,357 --> 00:05:39,246
Ici; je vais vous montrer l'implémentation d'un décorateur

130
00:05:39,446 --> 00:05:40,255
sous forme de classe,

131
00:05:40,455 --> 00:05:42,273
et nous verrons, dans une prochaine vidéo,

132
00:05:42,473 --> 00:05:44,697
l'implémentation d'un décorateur sous forme de fonction

133
00:05:44,897 --> 00:05:46,308
en utilisant le concept de clôture.

134
00:05:46,508 --> 00:05:47,470
Mais, pour l'instant, regardons

135
00:05:47,670 --> 00:05:49,004
l'implémentation sous forme de classe.

136
00:05:49,204 --> 00:05:52,162
Donc, je vais définir, dans une classe NbAppel,

137
00:05:52,362 --> 00:05:57,889
une méthode __init__ qui va simplement définir

138
00:05:58,089 --> 00:06:00,027
un compteur appel que j'initialise à 0,

139
00:06:00,227 --> 00:06:03,970
et ensuite, on voit qu'à __init__, je prends comme argument f

140
00:06:04,170 --> 00:06:05,909
f étant la fonction que je veux décorer.

141
00:06:06,109 --> 00:06:07,641
Et, dans mon instance de NbAppel,

142
00:06:07,841 --> 00:06:10,312
je vais garder un lien vers la fonction originale.

143
00:06:10,512 --> 00:06:11,958
Ca, en général, c'est ce qu'on veut faire,

144
00:06:12,158 --> 00:06:13,494
puisque après, lorsqu'on décore une fonction,

145
00:06:13,694 --> 00:06:15,634
très souvent, on veut appeler cette fonction

146
00:06:15,834 --> 00:06:16,757
qui a été décorée.

147
00:06:16,957 --> 00:06:19,098
Ensuite, j'ai défini une méthode __call__.

148
00:06:19,298 --> 00:06:22,253
Effectivement, il faut que mon décorateur soit un callable.

149
00:06:22,453 --> 00:06:25,898
Donc, pour qu'une instance de classe soit callable,

150
00:06:26,098 --> 00:06:27,227
il faut définir une méthode __call__.

151
00:06:27,427 --> 00:06:30,428
Et on voit qu'à ma méthode __call__, je lui passe deux arguments

152
00:06:30,628 --> 00:06:33,335
*t, **d

153
00:06:33,535 --> 00:06:35,601
En fait, nous avons vu précédemment

154
00:06:35,801 --> 00:06:38,551
que lorsque l'on avait cette notation *  **,

155
00:06:38,751 --> 00:06:42,406
ça voulait dire qu'on pouvait appeler notre objet

156
00:06:42,606 --> 00:06:44,498
avec n'importe quel type d'argument :

157
00:06:44,698 --> 00:06:47,572
arguments ordonnés, arguments nommés, n'importe quel type d'arguments.

158
00:06:47,772 --> 00:06:49,595
Donc, en fait, c'est une  manière de définir un appel

159
00:06:49,795 --> 00:06:50,839
tout à fait générique.

160
00:06:51,039 --> 00:06:52,901
Et donc, dans notre méthode __call__,

161
00:06:53,101 --> 00:06:54,469
lorsqu'on va appeler notre instance,

162
00:06:54,669 --> 00:06:58,429
on va incrémenter le compteur, le compteur d'appels.

163
00:06:58,629 --> 00:07:00,368
On va définir une chaîne de caractères

164
00:07:00,568 --> 00:07:04,837
qui va simplement afficher self.f.__name__,

165
00:07:05,037 --> 00:07:07,589
__name__ va contenir le nom de la fonction originale,

166
00:07:07,789 --> 00:07:09,399
et, ensuite, on va afficher le nombre d'appels.

167
00:07:09,599 --> 00:07:10,559
On va dire essentiellement :

168
00:07:10,759 --> 00:07:12,616
"ma fonction f a été appelée tant de fois"

169
00:07:12,816 --> 00:07:18,343
Et, pour finir, on va retourner self.f(*t, **d)

170
00:07:18,543 --> 00:07:20,727
donc f, c'est la fonction originale,

171
00:07:20,927 --> 00:07:24,704
et on va lui passer *t **d donc on va faire de

172
00:07:24,904 --> 00:07:27,664
l'unpacking de tuple et l'unpacking de dictionnaire.

173
00:07:27,864 --> 00:07:29,595
Donc, c'est-à-dire que, ma fonction va lui passer

174
00:07:29,795 --> 00:07:30,877
n'importe quel type d'argument,

175
00:07:31,077 --> 00:07:32,774
Donc cet appel est tout à fait générique.

176
00:07:32,974 --> 00:07:37,849
Donc, pour résumer, f = NbAppel(f)

177
00:07:38,049 --> 00:07:40,687
f, en fait, maintenant, n'est plus une fonction,

178
00:07:40,887 --> 00:07:43,232
mais c'est une instance de NbAppel

179
00:07:43,432 --> 00:07:46,182
et chaque instance de NbAppel va avoir son propre compteur,

180
00:07:46,382 --> 00:07:47,793
ce qui veut dire que mon décorateur

181
00:07:47,993 --> 00:07:49,329
je peux l'appliquer à n'importe quelle fonction.

182
00:07:49,529 --> 00:07:51,709
Chaque application décorateur va créer une nouvelle instance.

183
00:07:51,909 --> 00:07:57,162
et f(NbAppel) va, en fait, appeler la méthode __call__ sur cette instance.

184
00:07:57,362 --> 00:08:00,570
Et ensuite, on voit que ma méthode __call__ va

185
00:08:00,770 --> 00:08:01,887
simplement me retourner,

186
00:08:02,087 --> 00:08:03,658
après avoir incrémenté le compteur,

187
00:08:03,858 --> 00:08:06,976
un appel de ma fonction originale.

188
00:08:07,176 --> 00:08:09,608
Essentiellement mon décorateur va compter le nombre d'appels

189
00:08:09,808 --> 00:08:12,196
et ensuite, exécuter la fonction, tout à fait, normalement.

190
00:08:12,396 --> 00:08:14,581
Donc maintenant, regardons cela.

191
00:08:14,781 --> 00:08:18,236
J'appelle ma fonction avec deux arguments : 1 et 2.

192
00:08:18,436 --> 00:08:21,759
Je vois que j'ai f qui a été appelée une fois.

193
00:08:21,959 --> 00:08:24,518
Je rappelle ma fonction avec des arguments différents,

194
00:08:24,718 --> 00:08:26,492
et je vois que f a été appelée deux fois.

195
00:08:26,692 --> 00:08:27,615
Et, je vous le rappelle,

196
00:08:27,815 --> 00:08:29,798
comme mon décorateur a une signature qui est générique,

197
00:08:29,998 --> 00:08:31,690
j'ai passé * **,

198
00:08:31,890 --> 00:08:34,035
donc je peux l'appeler sur n'importe quel type de fonction.

199
00:08:34,235 --> 00:08:37,027
Je peux réappliquer mon décorateur à une nouvelle fonction.

200
00:08:37,227 --> 00:08:39,531
Donc, comme je réapplique mon décorateur à une nouvelle fonction,

201
00:08:39,731 --> 00:08:42,986
ça va créer une nouvelle instance, avec son propre compteur.

202
00:08:43,186 --> 00:08:46,406
Et donc maintenant, je vais pouvoir appeler ma fonction g,

203
00:08:46,606 --> 00:08:48,299
et je vais avoir un nouveau compteur spécifique

204
00:08:48,499 --> 00:08:50,237
à ma fonction g.

205
00:08:51,725 --> 00:08:54,034
Nous venons de voir la notion de décorateur.

206
00:08:54,234 --> 00:08:57,062
Les décorateurs permettent d'ajouter une couche de logique

207
00:08:57,262 --> 00:08:59,040
autour de l'appel des fonctions, avec,

208
00:08:59,240 --> 00:09:00,960
et c'est un point clé des décorateurs,

209
00:09:01,160 --> 00:09:05,717
avec une notation explicite, liée à la déclaration de la fonction.

210
00:09:05,917 --> 00:09:07,573
Les décorateurs représentent, sans doute,

211
00:09:07,773 --> 00:09:09,549
une des techniques de programmation de Python avancées

212
00:09:09,749 --> 00:09:11,807
la plus utile et la plus fréquente.

213
00:09:12,007 --> 00:09:13,091
Parce que c'est très courant de

214
00:09:13,291 --> 00:09:14,830
devoir modifier le comportement d'une fonction.

215
00:09:15,030 --> 00:09:16,680
Et, avec ce concept de décorateur,

216
00:09:16,880 --> 00:09:18,658
vous avez ainsi un outil de programmation

217
00:09:18,858 --> 00:09:21,011
qui vous permet de factoriser vos modifications.

218
00:09:21,211 --> 00:09:23,517
Les décorations sont devenues tellement populaires,

219
00:09:23,717 --> 00:09:26,794
en Python, que ça a été étendu au concept de classe.

220
00:09:26,994 --> 00:09:29,462
D'ailleurs, nous aborderons ce sujet dans les compléments.

221
00:09:29,662 --> 00:09:31,082
à bientôt.

