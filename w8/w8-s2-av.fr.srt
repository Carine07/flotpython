1
00:00:05,154 --> 00:00:06,327
Dans la vidéo précédente,

2
00:00:06,427 --> 00:00:08,383
je vous ai introduit asyncio,

3
00:00:08,483 --> 00:00:09,957
je vous ai expliqué dans quel contexte

4
00:00:10,057 --> 00:00:10,922
ça se plaçait.

5
00:00:11,330 --> 00:00:12,364
Donc comme c'était très abstrait,

6
00:00:12,464 --> 00:00:14,354
je vais maintenant être un peu plus concret ;

7
00:00:14,454 --> 00:00:16,206
on va voir, sur des tout petits exemples,

8
00:00:16,668 --> 00:00:17,472
à quoi ça ressemble,

9
00:00:17,572 --> 00:00:19,891
juste histoire d'introduire

10
00:00:19,991 --> 00:00:21,202
les concepts de base.

11
00:00:21,302 --> 00:00:23,791
Ça se présente sous la forme d'une librairie

12
00:00:23,891 --> 00:00:25,630
qui s'appelle asyncio, sans grande surprise.

13
00:00:25,931 --> 00:00:28,867
Le concept de base, c'est la coroutine.

14
00:00:31,004 --> 00:00:32,271
Je vais vous montrer

15
00:00:32,371 --> 00:00:33,502
comment on définit une coroutine.

16
00:00:33,602 --> 00:00:34,924
Alors, ça se présente sous la forme

17
00:00:35,482 --> 00:00:36,971
ça ressemble un petit peu à une fonction

18
00:00:37,071 --> 00:00:40,329
sauf qu'il y a async qui est défini au préalable,

19
00:00:40,429 --> 00:00:42,007
ça veut dire ceci est une coroutine.

20
00:00:42,668 --> 00:00:46,078
On écrit un code qui ressemble assez

21
00:00:47,157 --> 00:00:48,606
à une fonction traditionnelle

22
00:00:48,706 --> 00:00:50,219
sauf que, à certains endroits,

23
00:00:50,649 --> 00:00:53,076
j'utilise une instruction qui s'appelle await.

24
00:00:53,711 --> 00:00:55,119
Cette instruction,

25
00:00:55,526 --> 00:00:57,379
à ce stade de l'exposé, on va dire

26
00:00:57,665 --> 00:01:01,493
c'est une instruction qui dit: attention,

27
00:01:01,593 --> 00:01:03,964
je suis en train d'invoquer quelque chose

28
00:01:04,064 --> 00:01:05,585
qui est susceptible de s'interrompre.

29
00:01:07,695 --> 00:01:08,922
Je signifie de cette façon

30
00:01:09,022 --> 00:01:10,988
que je suis disposé à rendre la main

31
00:01:11,088 --> 00:01:12,364
au scheduler,

32
00:01:12,641 --> 00:01:14,040
dont je vous ai parlé la fois précédente.

33
00:01:14,574 --> 00:01:18,317
Donc la coroutine que vous avez sous les yeux

34
00:01:18,417 --> 00:01:19,787
elle ne fait pas grand chose,

35
00:01:19,887 --> 00:01:20,950
elle écrit un message du début,

36
00:01:21,050 --> 00:01:21,933
elle attend une demi-seconde

37
00:01:22,505 --> 00:01:23,355
en rendant la main,

38
00:01:23,798 --> 00:01:26,291
elle affiche un deuxième message

39
00:01:26,391 --> 00:01:27,327
disant qu'elle est au milieu,

40
00:01:27,427 --> 00:01:28,329
elle re-attend une seconde

41
00:01:28,429 --> 00:01:29,143
et puis, à la fin,

42
00:01:29,243 --> 00:01:30,950
elle affiche un message de fin.

43
00:01:31,195 --> 00:01:34,268
J'évalue ce bout de code Python.

44
00:01:34,368 --> 00:01:35,598
Ça ne fait rien, c'est la même chose

45
00:01:35,698 --> 00:01:37,326
que si j'avais défini une fonction,

46
00:01:37,613 --> 00:01:38,131
presque.

47
00:01:40,723 --> 00:01:41,775
Alors, ce n'est pas tout à fait

48
00:01:41,875 --> 00:01:42,623
quand même la même chose

49
00:01:42,723 --> 00:01:44,168
parce que si je l'évalue,

50
00:01:44,268 --> 00:01:45,792
je me rends compte que c'est une fonction

51
00:01:45,892 --> 00:01:46,470
d'accord,

52
00:01:46,570 --> 00:01:47,668
mais par contre,

53
00:01:48,787 --> 00:01:50,148
si j'essaie de l'appeler,

54
00:01:50,700 --> 00:01:51,691
et bien, en gros, il ne se passe rien.

55
00:01:51,791 --> 00:01:52,867
Alors, il ne se passe rien,

56
00:01:52,967 --> 00:01:54,369
ça me renvoie un objet,

57
00:01:55,169 --> 00:01:56,166
qui est une coroutine,

58
00:01:57,296 --> 00:01:58,897
et donc ça me donne l'occasion de

59
00:01:59,366 --> 00:02:00,812
commencer à introduire la différence

60
00:02:00,912 --> 00:02:02,570
entre ce qui est une fonction coroutine

61
00:02:02,670 --> 00:02:04,275
et l'objet coroutine

62
00:02:04,375 --> 00:02:06,099
qui est rendu par la fonction.

63
00:02:07,073 --> 00:02:09,410
C'est un mécanisme

64
00:02:09,510 --> 00:02:11,084
qui est assez proche des générateurs ;

65
00:02:11,184 --> 00:02:12,188
on aura l'occasion d'en reparler,

66
00:02:12,288 --> 00:02:14,013
mais pour l'instant,

67
00:02:14,113 --> 00:02:14,796
ce que je veux vous montrer,

68
00:02:14,896 --> 00:02:16,155
c'est comment on s'en sert.

69
00:02:16,255 --> 00:02:19,815
La façon la plus simple d'exécuter ce code,

70
00:02:19,915 --> 00:02:20,655
pour moi,

71
00:02:20,755 --> 00:02:21,965
et bien c'est de l'exécuter

72
00:02:22,065 --> 00:02:23,276
au travers d'une boucle d'événements.

73
00:02:23,649 --> 00:02:25,471
Ça tombe bien, dans asyncio,

74
00:02:25,571 --> 00:02:27,029
il y a la notion de boucle d'événements

75
00:02:27,129 --> 00:02:29,837
donc je vais appeler

76
00:02:29,937 --> 00:02:31,056
la fonction get_event_loop

77
00:02:31,590 --> 00:02:33,277
qui me renvoie une boucle d'événements,

78
00:02:33,714 --> 00:02:35,358
et sur cette boucle, je vais pouvoir

79
00:02:35,458 --> 00:02:37,111
envoyer une méthode qui s'appelle

80
00:02:37,211 --> 00:02:38,279
run_until_complete ;

81
00:02:38,877 --> 00:02:40,660
je vais lui passer une coroutine,

82
00:02:41,121 --> 00:02:43,665
en fait, plus précisément, un objet coroutine,

83
00:02:43,765 --> 00:02:45,764
et le travail de cette méthode, ça va être

84
00:02:46,175 --> 00:02:48,358
de faire avancer ma coroutine

85
00:02:48,458 --> 00:02:49,617
jusquà ce qu'elle soit terminée.

86
00:02:49,717 --> 00:02:50,824
Voilà, on va voir ce que ça donne.

87
00:02:51,453 --> 00:02:53,710
Jusque là, pas de surprise,

88
00:02:53,810 --> 00:02:55,172
je veux simplement vous montrer

89
00:02:55,272 --> 00:02:56,896
qu'avec la boucle, je peux enfin

90
00:02:57,335 --> 00:02:58,848
exécuter le code que j'ai écrit.

91
00:02:58,948 --> 00:03:00,647
Alors, là où c'est le plus intéressant,

92
00:03:00,747 --> 00:03:01,965
c'est si j'en fais plusieurs à la fois.

93
00:03:03,544 --> 00:03:05,656
Ça se présenterait sous cette façon-là ;

94
00:03:05,756 --> 00:03:07,750
au lieu de passer à run_until_complete

95
00:03:07,850 --> 00:03:09,725
seulement une coroutine,

96
00:03:10,113 --> 00:03:12,093
je vais lui en passer deux.

97
00:03:12,193 --> 00:03:12,894
Alors en fait, je triche ;

98
00:03:12,994 --> 00:03:14,799
techniquement, je vais lui envoyer

99
00:03:14,899 --> 00:03:16,795
un seul objet coroutine que j'ai construit

100
00:03:16,884 --> 00:03:17,967
en utilisant gather.

101
00:03:18,067 --> 00:03:20,089
On aura l'occasion de reparler de tout ça ;

102
00:03:20,189 --> 00:03:21,332
dans ce tout premier exemple,

103
00:03:21,432 --> 00:03:22,112
ce que je veux vous montrer,

104
00:03:22,212 --> 00:03:23,613
c'est la façon la plus simple

105
00:03:23,974 --> 00:03:24,749
d'avoir deux choses

106
00:03:24,849 --> 00:03:25,965
qui se déroulent en parallèle.

107
00:03:26,065 --> 00:03:27,717
Donc dans ce contexte-là,

108
00:03:27,817 --> 00:03:28,644
ce que vous voyez, c'est que

109
00:03:29,121 --> 00:03:31,578
je vais effectivement faire les deux débuts,

110
00:03:31,678 --> 00:03:32,293
à peu près en même temps,

111
00:03:32,393 --> 00:03:33,600
les deux milieux à peu près en même temps,

112
00:03:34,226 --> 00:03:35,899
donc c'est à peu près ce que je voulais faire

113
00:03:38,013 --> 00:03:40,163
et vous avez dans cette figure

114
00:03:40,263 --> 00:03:42,357
quelque chose qui illustre bien

115
00:03:42,457 --> 00:03:45,663
l'utilisation que je fais du temps.

116
00:03:48,092 --> 00:03:51,082
Le scheduler, donc ma boucle en l'occurrence,

117
00:03:51,182 --> 00:03:54,032
va choisir une des deux coroutines,

118
00:03:54,132 --> 00:03:55,397
là je n'ai pas de contrôle

119
00:03:55,497 --> 00:03:56,814
sur celle qui va commencer

120
00:03:56,914 --> 00:03:57,486
puisque j'ai décidé

121
00:03:57,586 --> 00:03:58,382
qu'elles commençaient en même temps,

122
00:03:58,482 --> 00:03:58,837
je ne l'ai pas dit.

123
00:03:59,399 --> 00:04:01,078
J'imagine que c'est run1.

124
00:04:01,178 --> 00:04:03,509
On va d'abord exécuter le petit bout de code

125
00:04:03,609 --> 00:04:05,957
qui est avant le await du run1.

126
00:04:06,418 --> 00:04:07,448
Au moment où on voit le await,

127
00:04:09,015 --> 00:04:10,772
on va changer de contexte,

128
00:04:10,872 --> 00:04:11,853
la boucle sait qu'elle peut

129
00:04:11,953 --> 00:04:12,635
changer de contexte,

130
00:04:13,105 --> 00:04:14,506
elle va faire le début de run2,

131
00:04:14,915 --> 00:04:15,628
et caetera.

132
00:04:16,971 --> 00:04:18,878
Alors, j'attire votre attention,

133
00:04:18,978 --> 00:04:20,198
là, j'ai mis await,

134
00:04:20,298 --> 00:04:21,283
on verra dans la suite qu'en fait

135
00:04:21,383 --> 00:04:22,217
j'aurais dû mettre yield,

136
00:04:22,317 --> 00:04:24,483
mais pour l'instant, à ce stade de l'exposé,

137
00:04:24,583 --> 00:04:25,648
je préfère être simple.

138
00:04:27,467 --> 00:04:28,795
Donc c'est le modèle mental,

139
00:04:28,895 --> 00:04:32,898
c'est l'idée que la boucle est le scheduler

140
00:04:32,998 --> 00:04:34,536
qui va passer la main

141
00:04:34,636 --> 00:04:36,641
d'une coroutine à l'autre.

142
00:04:38,516 --> 00:04:40,528
Je vous montre tout de suite un exemple

143
00:04:40,628 --> 00:04:41,800
de ce qu'il ne faut pas faire.

144
00:04:42,837 --> 00:04:44,557
Si, au lieu d'écrire morceaux

145
00:04:44,657 --> 00:04:45,517
comme je l'avais fait tout à l'heure,

146
00:04:45,617 --> 00:04:46,875
je l'écris de cette façon-là ;

147
00:04:46,975 --> 00:04:47,921
je l'ai appelé famine

148
00:04:48,256 --> 00:04:50,434
parce que, entre les deux messages

149
00:04:50,534 --> 00:04:51,216
de milieu et de fin,

150
00:04:51,316 --> 00:04:53,489
au lieu de faire un asyncio.sleep,

151
00:04:53,589 --> 00:04:54,627
je fais un time.sleep

152
00:04:54,727 --> 00:04:56,298
donc une fonction normale,

153
00:04:56,606 --> 00:04:58,957
qui n'est pas avertie du paradigme du tout,

154
00:04:59,057 --> 00:05:00,276
donc ce que ça veut dire, c'est que

155
00:05:00,376 --> 00:05:01,988
je ne vais pas rendre la main à la boucle.

156
00:05:02,793 --> 00:05:04,652
Du coup, si je l'évalue de la même façon

157
00:05:04,752 --> 00:05:05,353
que tout à l'heure,

158
00:05:06,277 --> 00:05:08,806
je vais avoir les deux débuts

159
00:05:08,906 --> 00:05:09,499
qui arrivent en même temps,

160
00:05:09,599 --> 00:05:12,534
mais une fois qu'une de mes deux coroutines

161
00:05:12,634 --> 00:05:13,085
prendra la main,

162
00:05:13,185 --> 00:05:14,830
elle va la garder, elle va faire milieu puis fin,

163
00:05:15,269 --> 00:05:16,037
évidemment.

164
00:05:17,613 --> 00:05:20,139
Ce qu'on peut voir, c'est la façon

165
00:05:20,239 --> 00:05:21,147
dont ça se passe dans le temps.

166
00:05:21,247 --> 00:05:23,617
La grosse période verte,

167
00:05:23,717 --> 00:05:24,343
c'est la période pendant laquelle

168
00:05:24,443 --> 00:05:25,894
je n'ai pas rendu le temps.

169
00:05:25,994 --> 00:05:27,289
Donc bien entendu, dans la vraie vie,

170
00:05:27,389 --> 00:05:28,333
ce sont des calculs ;

171
00:05:28,433 --> 00:05:29,614
je fais beaucoup de sleep

172
00:05:29,714 --> 00:05:30,739
dans toute cette présentation

173
00:05:30,839 --> 00:05:32,556
mais imaginez qu'à la place

174
00:05:32,656 --> 00:05:33,273
il y ait des calculs.

175
00:05:34,029 --> 00:05:36,334
Donc cette façon de ne pas rendre la main,

176
00:05:36,434 --> 00:05:37,120
il ne faut pas la faire,

177
00:05:37,220 --> 00:05:38,006
il faut vraiment être obsédé

178
00:05:38,509 --> 00:05:41,677
par le fait de ne pas garder la main

179
00:05:41,777 --> 00:05:42,883
disons plus que, je n'en sais rien,

180
00:05:42,983 --> 00:05:44,240
10 millisecondes, 100 millisecondes

181
00:05:44,340 --> 00:05:45,040
au grand maximum.

182
00:05:46,429 --> 00:05:47,523
Donc en terme de conclusion,

183
00:05:48,024 --> 00:05:49,670
je vous ai montré comment on pouvait

184
00:05:50,368 --> 00:05:51,576
créer des coroutines

185
00:05:52,060 --> 00:05:54,304
avec async def

186
00:05:54,404 --> 00:05:55,281
et non pas await def ;

187
00:05:56,208 --> 00:05:57,289
je vous ai montré également comment

188
00:05:57,389 --> 00:05:59,096
on pouvait créer une boucle d'événements

189
00:05:59,196 --> 00:06:01,504
pour orchestrer plusieurs coroutines ;

190
00:06:01,885 --> 00:06:03,805
et je vous ai également montré

191
00:06:03,905 --> 00:06:04,705
qu'une coroutine, ça pouvait appeler

192
00:06:04,805 --> 00:06:05,593
d'autres coroutines

193
00:06:06,071 --> 00:06:07,472
en faisant simplement await.

194
00:06:09,332 --> 00:06:10,764
Et on a également vu,

195
00:06:10,864 --> 00:06:14,084
quand on a appelé time.sleep,

196
00:06:14,184 --> 00:06:15,446
qu'une coroutine, ça peut tout à fait

197
00:06:15,546 --> 00:06:17,419
appeler une fonction traditionnelle,

198
00:06:17,519 --> 00:06:18,709
qu'on va appeler une fonction synchrone ;

199
00:06:19,146 --> 00:06:20,391
simplement, il faut faire attention

200
00:06:20,491 --> 00:06:22,019
de ne pas se lancer dans un calcul

201
00:06:22,119 --> 00:06:22,673
qui soit trop long.

202
00:06:24,133 --> 00:06:26,580
Donc voilà une toute première introduction

203
00:06:26,680 --> 00:06:29,547
pour complètement défricher le sujet ;

204
00:06:29,647 --> 00:06:30,961
on va creuser tout ça

205
00:06:31,061 --> 00:06:31,895
dans les vidéos suivantes.

206
00:06:31,995 --> 00:06:32,925
À bientôt !

