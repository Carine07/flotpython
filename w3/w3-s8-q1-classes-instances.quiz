<hr/>
Classes et instances
=====

Supposons que nous ayons le code suivant.
<pre>
class Parser:
    def __init__(self, sep):
        self.sep = sep
        self.parsed_line = []

    def parse(self, line):
        self.parsed_line = [i.strip() for i in line.split(self.sep)
                            if i.strip().isdigit()]

    def __str__(self):
        return ' '.join(self.parsed_line)

test = '123  : fj356:34:fjjd:    707'

p = Parser(':')
p.parse(test)
print(p)
</pre>

<h3>Quels objets sont <code>Parser</code> et <code>p</code> ?</h3>
( ) <code>Parser</code> est une classe et <code>p</code> une chaîne de caractères.
( ) <code>Parser</code> est un module et <code>p</code> une classe.
( ) <code>Parser</code> et <code>p</code> sont des classes.
(x) <code>Parser</code> est une classe et <code>p</code> est une instance.

[explanation]
L'instruction <code>class</code> permet de créer une classe. Par conséquent, <code>Parser</code> est bien un objet de type classe. L'objet <code>p</code> est créé par <code>Parser(':')</code>, donc <code>p</code> est une instance de la classe <code>Parser</code>.
[explanation]

<h3>Que représente le paramètre <code>self</code> ?</h3>
(x) Une référence vers une instance de la classe <code>Parser</code>.
( ) Une référence vers la classe <code>Parser</code>.
( ) Une chaîne de caractères.
( ) Un mot clef nécessaire pour définir une méthode dans une classe.

[explanation]
<code>self</code> représente bien une référence vers une instance de la classe <code>Parser</code>. Cette référence est automatiquement celle de l'instance qui appelle les méthodes de la classe, explicitement comme <code>parse()</code> ou implicitement comme <code>__init__</code> (lors de la création de l'instance) ou <code>__str__</code> (lors d'un <code>print</code> de l'instance). 
[explanation]

<h3>Que va afficher <code>print(p)</code> ?</h3>
( ) Une exception.
(x) <code>123 34 707</code>.
( ) <code>None</code>.
( ) Une chaîne de caractères vide.

[explanation]

On commence par créer un objet, qui contient comme information le séparateur (dans <code>self.sep</code>)

La méthode <code>parse()</code> va découper la chaîne <code>test</code> en mots (avec <code>split</code>) en se basant sur le séparateur ; on ne conserve que les mots correspondant à des entiers (<code>if i.strip().isdigit()</code>) ; on notera que toutes ces opérations peuvent être faites en une seule compréhension de liste. 

Enfin avec <code>print</code> on invoque en réalité la méthode <code>__str__</code>, qui tire profit du calcul de <code>parse</code> (rangé dans <code>self.parsed_line</code>) pour formater, cette fois avec une espace comme séparateur.
[explanation]
