1
00:00:05,427 --> 00:00:06,724
Depuis que nous avons commencé

2
00:00:06,824 --> 00:00:07,602
à jouer avec Python,

3
00:00:07,702 --> 00:00:09,507
vous les avez sans doute déjà rencontrées,

4
00:00:09,607 --> 00:00:11,371
mais vous ne savez sans doute pas vraiment

5
00:00:11,471 --> 00:00:12,667
quoi en faire ni ce que c'est.

6
00:00:12,767 --> 00:00:13,810
Ce sont les exceptions.

7
00:00:13,910 --> 00:00:16,144
Dans cette vidéo, nous allons vous expliquer

8
00:00:16,244 --> 00:00:17,600
comment gérer les exceptions.

9
00:00:17,700 --> 00:00:19,047
Il y a trois choses importantes

10
00:00:19,147 --> 00:00:20,088
à savoir sur les exceptions.

11
00:00:20,630 --> 00:00:21,676
C'est que premièrement

12
00:00:21,776 --> 00:00:23,345
une exception n'est pas une fatalité,

13
00:00:23,445 --> 00:00:25,112
c'est un mécanisme de communication

14
00:00:25,212 --> 00:00:26,045
d'erreurs tout à fait normales

15
00:00:26,145 --> 00:00:26,739
dans un programme,

16
00:00:26,839 --> 00:00:28,323
et on est capable de les capturer

17
00:00:28,423 --> 00:00:30,162
et de réagir à une exception.

18
00:00:30,771 --> 00:00:32,233
Deuxièmement, les exceptions

19
00:00:32,333 --> 00:00:33,195
fournissent de l'information

20
00:00:33,295 --> 00:00:34,339
sur l'erreur qui se produit,

21
00:00:34,439 --> 00:00:35,257
c'est donc un mécanisme

22
00:00:35,357 --> 00:00:36,332
de notification d'erreur

23
00:00:36,432 --> 00:00:37,453
extrêmement utile.

24
00:00:38,001 --> 00:00:39,364
Et troisièmement, les exceptions

25
00:00:39,464 --> 00:00:40,668
étant très efficaces en Python,

26
00:00:40,768 --> 00:00:42,716
c'est un mécanisme qu'on utilise couramment

27
00:00:42,816 --> 00:00:43,887
dans un fonctionnement normal

28
00:00:43,987 --> 00:00:44,583
d'un programme.

29
00:00:45,281 --> 00:00:47,179
Ouvrons maintenant un éditeur IDLE

30
00:00:47,279 --> 00:00:49,540
pour commencer à jouer avec les exceptions.

31
00:00:50,354 --> 00:00:51,866
Commençons par écrire une petite fonction

32
00:00:51,966 --> 00:00:52,477
toute simple:

33
00:00:53,446 --> 00:00:58,739
def div(a, b)

34
00:00:59,249 --> 00:01:01,097
C'est une fonction qui prend deux arguments

35
00:01:01,197 --> 00:01:01,800
a et b,

36
00:01:01,900 --> 00:01:06,824
et qui va juste faire un print de a divisé par b.

37
00:01:08,060 --> 00:01:10,741
Absolument rien de compliqué, rien de subtil

38
00:01:10,841 --> 00:01:12,299
une simple fonction qui fait une division.

39
00:01:12,399 --> 00:01:13,389
Je sauvegarde,

40
00:01:13,489 --> 00:01:14,266
je vous rappelle que dans IDLE

41
00:01:14,366 --> 00:01:16,385
pour exécuter, je sauvegarde avec Ctrl-S,

42
00:01:16,485 --> 00:01:18,248
et j'exécute avec la touche F5.

43
00:01:18,348 --> 00:01:20,050
Et je vois à gauche,

44
00:01:20,150 --> 00:01:21,347
dans mon interpréteur Python,

45
00:01:21,447 --> 00:01:22,641
la fonction qui vient de s'exécuter.

46
00:01:22,741 --> 00:01:23,625
Je peux donc maintenant l'appeler,

47
00:01:23,725 --> 00:01:25,349
faire un div de 1 par 2

48
00:01:25,449 --> 00:01:27,117
et je vois le résultat : 0.5.

49
00:01:27,217 --> 00:01:28,079
Tout à fait normal.

50
00:01:28,245 --> 00:01:29,384
Que se passe-t-il maintenant

51
00:01:29,484 --> 00:01:31,073
si je fais un div de 1 par 0 ?

52
00:01:31,173 --> 00:01:32,384
Donc une division par 0 ?

53
00:01:32,484 --> 00:01:34,039
Nous savons que les divisions par 0

54
00:01:34,139 --> 00:01:34,944
sont impossibles ;

55
00:01:35,160 --> 00:01:37,267
je vais donc avoir une erreur d'exécution.

56
00:01:37,367 --> 00:01:38,618
Regardons ce qui se passe.

57
00:01:38,718 --> 00:01:40,985
Je vois en effet une erreur d'exécution

58
00:01:41,714 --> 00:01:42,994
et on va prendre quelques instants

59
00:01:43,094 --> 00:01:43,791
pour la détailler.

60
00:01:43,891 --> 00:01:45,440
La dernière ligne de cette erreur

61
00:01:45,540 --> 00:01:46,928
donne le nom de l'exception

62
00:01:47,028 --> 00:01:48,644
qui s'appelle ZeroDivisionError.

63
00:01:48,744 --> 00:01:50,665
Les exceptions finissent en général

64
00:01:50,765 --> 00:01:51,832
lorsqu'elles notifient des erreurs

65
00:01:51,932 --> 00:01:52,766
par le mot Error.

66
00:01:52,866 --> 00:01:54,175
Et j'ai un message d'erreur:

67
00:01:54,275 --> 00:01:55,492
division by zero.

68
00:01:56,186 --> 00:01:57,554
Ensuite, la ligne juste au dessus,

69
00:01:57,654 --> 00:01:59,593
je vois apparaître la ligne de mon code

70
00:01:59,693 --> 00:02:01,099
où l'exception est apparue:

71
00:02:01,199 --> 00:02:03,330
print de a divisé par b.

72
00:02:04,055 --> 00:02:05,471
Et ensuite, la ligne juste au dessus,

73
00:02:05,571 --> 00:02:07,582
je vois le fichier dans lequel c'est apparu,

74
00:02:07,682 --> 00:02:08,430
donc on voit que c'est

75
00:02:08,530 --> 00:02:09,792
à la deuxième ligne de ce fichier,

76
00:02:10,459 --> 00:02:12,696
et je vois l'appel qui a produit cette erreur:

77
00:02:12,796 --> 00:02:14,963
div(1, 0).

78
00:02:15,063 --> 00:02:16,147
On voit donc que l'exception fournit

79
00:02:16,247 --> 00:02:17,127
énormément d'informations,

80
00:02:17,227 --> 00:02:18,944
elle donne la raison de l'erreur,

81
00:02:19,044 --> 00:02:20,253
et elle permet également

82
00:02:20,353 --> 00:02:21,318
de situer cette erreur

83
00:02:21,418 --> 00:02:22,693
dans le contexte d'exécution

84
00:02:22,793 --> 00:02:23,490
de mon programme.

85
00:02:24,429 --> 00:02:25,340
Seulement cette exception

86
00:02:25,440 --> 00:02:26,196
n'est pas une fatalité,

87
00:02:26,296 --> 00:02:27,032
je peux la capturer

88
00:02:27,132 --> 00:02:28,041
et on va regarder comment

89
00:02:28,141 --> 00:02:29,046
capturer cette exception.

90
00:02:30,309 --> 00:02:31,182
Dans ma fonction,

91
00:02:31,924 --> 00:02:33,412
je vais rajouter un bloc

92
00:02:33,512 --> 00:02:34,827
qu'on appelle try - except,

93
00:02:34,927 --> 00:02:36,898
qui permet de capturer les exceptions.

94
00:02:37,494 --> 00:02:41,639
Tout ce qui est entre le try et le except

95
00:02:44,304 --> 00:02:45,455
va être évalué

96
00:02:45,555 --> 00:02:46,998
et si j'ai une exception qui est produite

97
00:02:47,098 --> 00:02:47,942
dans ce bloc de code,

98
00:02:48,042 --> 00:02:49,447
donc dans le bloc de code du try,

99
00:02:49,547 --> 00:02:51,577
je vais regarder si cette exception

100
00:02:51,677 --> 00:02:52,931
a été capturée par mon code.

101
00:02:53,031 --> 00:02:54,057
Comment je capture cette exception ?

102
00:02:54,503 --> 00:02:55,771
En écrivant except

103
00:02:55,871 --> 00:02:56,970
et en donnant un nom d'exception,

104
00:02:57,070 --> 00:02:58,885
dans ce cas-là, je veux capturer

105
00:02:58,985 --> 00:03:00,377
l'exception ZeroDivisionError.

106
00:03:01,058 --> 00:03:02,098
Je mets un :

107
00:03:02,198 --> 00:03:04,025
et dans le bloc de code du except,

108
00:03:04,125 --> 00:03:05,631
je vais écrire ce qui doit s'exécuter

109
00:03:05,731 --> 00:03:07,431
lorsque cette exception est produite,

110
00:03:07,947 --> 00:03:09,179
et je vais simplement écrire

111
00:03:09,279 --> 00:03:10,005
print

112
00:03:11,597 --> 00:03:17,075
"attention, division par 0".

113
00:03:17,615 --> 00:03:18,688
Voilà, tout simplement.

114
00:03:19,927 --> 00:03:20,751
Et ensuite,

115
00:03:20,851 --> 00:03:23,772
en sortie de cette instruction try - except,

116
00:03:23,872 --> 00:03:25,459
je vais juste écrire un print

117
00:03:25,559 --> 00:03:26,913
"continuons".

118
00:03:30,729 --> 00:03:33,458
Je sauvegarde avec Ctrl-S, j'exécute avec F5

119
00:03:33,558 --> 00:03:34,793
et maintenant, je vais réappeler

120
00:03:34,893 --> 00:03:35,862
ma fonction div.

121
00:03:35,962 --> 00:03:38,358
Appelons div de 1 par 2.

122
00:03:38,458 --> 00:03:40,889
Je vois que j'obtiens mon résultat ;

123
00:03:40,989 --> 00:03:42,507
évidemment, "continuons" s'affiche.

124
00:03:43,232 --> 00:03:44,707
Ensuite, que se passe-t-il si je fais

125
00:03:44,807 --> 00:03:46,736
un div de 1 par 0 ?

126
00:03:48,107 --> 00:03:50,155
Je vois que mon exception a été produite,

127
00:03:50,255 --> 00:03:52,268
mais elle a été correctement capturée

128
00:03:52,368 --> 00:03:53,266
par la clause except.

129
00:03:53,898 --> 00:03:55,491
En effet, j'ai except ZeroDivisionError.

130
00:03:56,119 --> 00:03:57,774
Le bloc d'instructions de ma clause except

131
00:03:57,874 --> 00:03:58,685
a été exécuté,

132
00:03:58,785 --> 00:04:00,445
"attention, division par 0",

133
00:04:00,545 --> 00:04:02,001
et mon programme a continué

134
00:04:02,101 --> 00:04:03,230
à s'exécuter normalement.

135
00:04:03,330 --> 00:04:04,701
On voit donc que l'on peut tout à fait

136
00:04:04,801 --> 00:04:05,748
capturer une exception,

137
00:04:05,848 --> 00:04:07,914
avoir un comportement approprié

138
00:04:08,014 --> 00:04:09,611
qui réagisse à cet exception,

139
00:04:09,711 --> 00:04:12,070
et continuer l'exécution de notre programme.

140
00:04:15,391 --> 00:04:17,015
Maintenant, regardons ce qu'il se passe

141
00:04:17,115 --> 00:04:19,430
si, au lieu de faire une division de 1 par 0,

142
00:04:20,043 --> 00:04:21,933
je fais une division de 1 par

143
00:04:22,539 --> 00:04:25,394
une chaîne de caractères qui représente le 0.

144
00:04:25,494 --> 00:04:27,127
C'est quelque chose qui peut se produire

145
00:04:27,227 --> 00:04:27,847
dans un programme

146
00:04:27,947 --> 00:04:29,559
où on manipule des entrées

147
00:04:29,659 --> 00:04:30,446
et à un moment, on se retrouve avec

148
00:04:30,546 --> 00:04:31,575
une chaîne de caractères

149
00:04:31,675 --> 00:04:33,317
qui aurait dû être convertie en entier

150
00:04:33,417 --> 00:04:34,738
mais qui n'a pas été convertie en entier.

151
00:04:35,425 --> 00:04:37,271
Exécutons ce code et regardons l'erreur.

152
00:04:37,997 --> 00:04:40,712
J'ai une erreur qui s'appelle TypeError,

153
00:04:40,812 --> 00:04:42,094
et qui me dit encore une fois

154
00:04:42,194 --> 00:04:43,157
de manière très explicite,

155
00:04:43,257 --> 00:04:44,477
c'est affiché dans la dernière ligne

156
00:04:44,577 --> 00:04:45,163
de mon exception,

157
00:04:45,826 --> 00:04:48,062
que l'opération division n'est pas supportée

158
00:04:48,162 --> 00:04:49,839
entre les entiers et les chaînes de caractères.

159
00:04:50,474 --> 00:04:51,847
De nouveau, je peux tout à fait

160
00:04:51,947 --> 00:04:52,980
réagir à cette exception

161
00:04:53,080 --> 00:04:54,828
en rajoutant une clause except.

162
00:04:54,928 --> 00:04:56,238
Je peux donc ajouter

163
00:04:56,338 --> 00:04:58,682
autant de clauses except que je veux

164
00:04:58,782 --> 00:05:00,834
pour réagir à des exceptions particulières.

165
00:05:00,934 --> 00:05:02,529
Là, je vais réagir à TypeError

166
00:05:04,374 --> 00:05:05,805
et je vais afficher un petit message

167
00:05:05,905 --> 00:05:08,021
me permettant d'expliquer exactement

168
00:05:08,121 --> 00:05:09,035
quel est le problème,

169
00:05:09,135 --> 00:05:10,051
je vais juste écrire

170
00:05:10,151 --> 00:05:11,098
"il faut des int".

171
00:05:11,198 --> 00:05:12,722
Voilà, donc un message tout simple.

172
00:05:14,591 --> 00:05:16,428
J'exécute ce morceau de code,

173
00:05:18,104 --> 00:05:19,489
et je vais réappeler ma fonction

174
00:05:20,174 --> 00:05:22,441
div de 1 par 2,

175
00:05:22,541 --> 00:05:24,182
je vois qu'il s'affiche: 0.5, "continuons" ;

176
00:05:25,396 --> 00:05:26,850
div de 1 par 0,

177
00:05:26,950 --> 00:05:27,997
je vois qu'il s'affiche:

178
00:05:28,097 --> 00:05:29,842
"attention, division par 0", "continuons" ;

179
00:05:31,817 --> 00:05:34,457
div de 1 par la chaîne de caractères '0',

180
00:05:34,557 --> 00:05:35,327
je vois qu'il s'affiche:

181
00:05:35,427 --> 00:05:36,959
"il faut des int", "continuons".

182
00:05:37,486 --> 00:05:39,404
Je vois donc que mon mécanisme d'exception

183
00:05:39,504 --> 00:05:41,086
en Python me permet de capturer

184
00:05:41,186 --> 00:05:41,916
n'importe quelle exception

185
00:05:42,016 --> 00:05:43,388
et d'avoir un comportement approprié.

186
00:05:44,852 --> 00:05:46,061
En Python, vous pouvez

187
00:05:46,161 --> 00:05:47,417
avoir une clause except

188
00:05:47,517 --> 00:05:49,225
sans spécifier aucune exception.

189
00:05:49,577 --> 00:05:51,535
C'est en général une très mauvaise pratique.

190
00:05:51,849 --> 00:05:52,326
Pourquoi ?

191
00:05:52,426 --> 00:05:53,806
Parce que ça va cacher les exceptions

192
00:05:53,906 --> 00:05:55,072
qui sont produites par votre code.

193
00:05:55,486 --> 00:05:57,253
Prenez le cas que l'on vient de regarder.

194
00:05:57,353 --> 00:05:58,750
Supposons que vous vous disiez:

195
00:05:58,850 --> 00:06:00,603
de toute façon, quelle est l'erreur

196
00:06:00,703 --> 00:06:02,203
qui peut se produire avec une division ?

197
00:06:02,500 --> 00:06:03,166
Essentiellement,

198
00:06:03,266 --> 00:06:04,205
ce n'est qu'une division par zéro.

199
00:06:04,609 --> 00:06:06,000
Et que vous fassiez simplement,

200
00:06:06,567 --> 00:06:07,645
je vais vous montrer ça,

201
00:06:13,150 --> 00:06:14,348
juste un except

202
00:06:15,904 --> 00:06:17,144
qui affiche simplement

203
00:06:17,244 --> 00:06:18,688
"attention, division par 0".

204
00:06:19,092 --> 00:06:20,273
J'exécute ce code,

205
00:06:21,740 --> 00:06:23,812
et maintenant je fais une division de 1 par 0,

206
00:06:23,912 --> 00:06:24,403
on se dit: oui,

207
00:06:24,503 --> 00:06:25,845
je l'ai testé, ça fonctionne tout à fait ;

208
00:06:26,283 --> 00:06:27,890
mais si maintenant je fais un div de 1

209
00:06:27,990 --> 00:06:29,296
par la chaîne de caractères '0',

210
00:06:29,838 --> 00:06:30,947
je vais avoir un message d'erreur

211
00:06:31,047 --> 00:06:31,777
qui n'est pas approprié,

212
00:06:31,877 --> 00:06:33,034
mon exception a été cachée,

213
00:06:33,134 --> 00:06:34,263
je ne connais pas la raison du problème

214
00:06:34,363 --> 00:06:34,861
dans mon programme

215
00:06:34,961 --> 00:06:36,593
et mon programme risque de planter

216
00:06:36,693 --> 00:06:37,600
plus loin dans le code.

217
00:06:38,021 --> 00:06:38,989
D'une manière générale,

218
00:06:39,089 --> 00:06:41,578
on doit toujours capturer les exceptions

219
00:06:41,751 --> 00:06:43,256
que l'on a étudiées et que l'on sait

220
00:06:43,356 --> 00:06:44,725
qu'elles vont se produire dans notre code,

221
00:06:44,825 --> 00:06:46,238
et laisser remonter les exceptions

222
00:06:46,338 --> 00:06:47,365
que nous n'avons pas prévues.

223
00:06:48,762 --> 00:06:49,996
Une caractéristique importante

224
00:06:50,096 --> 00:06:51,428
des exceptions, c'est qu'elles bubblent.

225
00:06:51,528 --> 00:06:52,905
Ça veut dire qu'elles vont remonter

226
00:06:53,005 --> 00:06:54,023
votre pile d'exécution

227
00:06:54,123 --> 00:06:55,334
jusqu'à arrêter le programme.

228
00:06:55,434 --> 00:06:56,924
Regardons l'illustration de

229
00:06:57,024 --> 00:06:58,188
ce mécanisme de bubbling.

230
00:06:59,145 --> 00:07:01,338
Je vais définir une fonction

231
00:07:02,993 --> 00:07:05,787
div, que j'ai déjà définie, qui prend juste

232
00:07:06,228 --> 00:07:07,697
deux arguments a et b,

233
00:07:08,736 --> 00:07:10,209
et qui va juste faire un print

234
00:07:11,952 --> 00:07:14,969
de a divisé par b.

235
00:07:15,605 --> 00:07:18,107
Et ensuite, je vais définir une fonction f

236
00:07:18,592 --> 00:07:20,409
qui prend un seul argument x

237
00:07:20,869 --> 00:07:25,917
et qui va appeler div de 1 par x.

238
00:07:26,339 --> 00:07:27,888
On voit que j'ai deux fonctions,

239
00:07:27,988 --> 00:07:29,510
une fonction div et une fonction f,

240
00:07:29,610 --> 00:07:31,807
et que ma fonction div est appelée

241
00:07:31,907 --> 00:07:33,312
par une autre fonction, la fonction f.

242
00:07:34,300 --> 00:07:35,411
Exécutons cela.

243
00:07:36,791 --> 00:07:38,077
Regardons ce qu'il va se passer.

244
00:07:38,177 --> 00:07:39,813
Lorsque j'appelle ma fonction f

245
00:07:39,913 --> 00:07:41,590
avec par exemple 1,

246
00:07:42,180 --> 00:07:44,373
ma fonction va exécuter la fonction div

247
00:07:45,091 --> 00:07:46,157
mais tant que ma fonction div

248
00:07:46,257 --> 00:07:47,001
n'a pas retourné de valeur

249
00:07:47,101 --> 00:07:49,345
la fonction f reste en cours d'exécution.

250
00:07:49,445 --> 00:07:51,720
On dit qu'elle reste dans la pile d'exécution.

251
00:07:51,820 --> 00:07:54,182
En fait, la pile d'exécution va contenir

252
00:07:54,282 --> 00:07:55,735
toutes les fonctions de notre programme

253
00:07:55,835 --> 00:07:56,614
qui ont été appelées

254
00:07:56,714 --> 00:07:58,588
mais qui n'ont pas encore retourné de valeur.

255
00:07:59,149 --> 00:08:02,179
Si je fais f(1), j'appelle div(1,1).

256
00:08:02,521 --> 00:08:06,571
Je vais exécuter et je vais voir afficher 1.

257
00:08:06,671 --> 00:08:09,258
Si maintenant je fais f(0),

258
00:08:09,358 --> 00:08:10,528
que va-t-il se passer ?

259
00:08:10,966 --> 00:08:14,568
Je vais appeler la fonction div(1, 0)

260
00:08:15,267 --> 00:08:17,706
je vais faire un print de 1 divisé par 0,

261
00:08:17,806 --> 00:08:18,571
je vais avoir une exception,

262
00:08:18,671 --> 00:08:19,797
mon exception va être produite

263
00:08:19,897 --> 00:08:22,730
par la division a divisé par b

264
00:08:22,830 --> 00:08:23,568
à l'intérieur du print.

265
00:08:24,509 --> 00:08:28,147
L'exception va être produite,

266
00:08:28,247 --> 00:08:30,978
elle va arrêter l'exécution de ma fonction

267
00:08:32,113 --> 00:08:34,486
mais ma fonction a été appelée par f,

268
00:08:34,586 --> 00:08:35,804
l'exception va donc

269
00:08:35,904 --> 00:08:37,053
remonter la pile d'exécution,

270
00:08:37,153 --> 00:08:39,106
elle va sortir dans ma fonction f,

271
00:08:39,720 --> 00:08:41,031
elle n'a pas été capturée,

272
00:08:41,131 --> 00:08:42,974
elle va remonter la pile d'exécution

273
00:08:43,074 --> 00:08:44,647
et elle va arrêter mon programme.

274
00:08:45,291 --> 00:08:46,748
Regardons l'exécution de ça.

275
00:08:47,832 --> 00:08:50,154
Ce mécanisme de bubbling

276
00:08:50,254 --> 00:08:51,746
a deux avantages majeurs.

277
00:08:51,846 --> 00:08:53,398
Le premier avantage,

278
00:08:53,860 --> 00:08:55,504
c'est que je peux capturer mon exception

279
00:08:55,604 --> 00:08:58,007
n'importe où le long de la pile d'exécution,

280
00:08:58,107 --> 00:08:59,997
je peux tout à fait capturer mon exception

281
00:09:00,097 --> 00:09:01,076
au niveau du print,

282
00:09:01,465 --> 00:09:03,261
je peux la capturer au niveau

283
00:09:03,927 --> 00:09:05,781
de la fonction f, dans ma fonction f,

284
00:09:05,881 --> 00:09:06,660
au niveau de l'appel de div,

285
00:09:06,760 --> 00:09:08,077
et je peux tout à fait la capturer

286
00:09:08,177 --> 00:09:09,188
lors de l'appel de f.

287
00:09:10,140 --> 00:09:11,284
Le deuxième avantage

288
00:09:11,384 --> 00:09:12,873
de cette remontée de l'exception,

289
00:09:13,316 --> 00:09:15,889
c'est que ma trace d'exécution

290
00:09:15,989 --> 00:09:17,648
va être capable de me dire exactement

291
00:09:17,748 --> 00:09:18,909
par où est passée mon exception

292
00:09:19,009 --> 00:09:20,447
et par conséquent, va me fournir

293
00:09:20,547 --> 00:09:22,684
des informations précieuses sur le diagnostic

294
00:09:22,784 --> 00:09:23,810
du problème dans mon programme.

295
00:09:23,910 --> 00:09:24,663
Regardons cela.

296
00:09:24,763 --> 00:09:26,097
Je vois que j'ai une exception

297
00:09:26,197 --> 00:09:27,855
qui s'appelle ZeroDivisionError

298
00:09:27,955 --> 00:09:30,883
qui a été produite par print de a divisé par b.

299
00:09:31,393 --> 00:09:33,579
Si je remonte, je vois que

300
00:09:33,679 --> 00:09:35,844
cette exception a eu lieu dans la fonction div,

301
00:09:36,591 --> 00:09:37,805
et que cette fonction div

302
00:09:37,905 --> 00:09:40,556
a été appelée par l'appel de f(0).

303
00:09:40,656 --> 00:09:42,539
J'ai donc une trace exacte

304
00:09:42,639 --> 00:09:43,974
de la remontée de mon exception

305
00:09:44,074 --> 00:09:45,493
qui me permet de diagnostiquer

306
00:09:45,593 --> 00:09:46,820
l'origine du problème,

307
00:09:46,920 --> 00:09:49,231
dans ce cas-là, l'appel de f(0).

308
00:09:50,204 --> 00:09:51,144
Nous venons de voir

309
00:09:51,244 --> 00:09:53,321
le mécanisme des exceptions en Python.

310
00:09:53,421 --> 00:09:54,898
Une bonne pratique en Python est

311
00:09:54,998 --> 00:09:55,992
de capturer les exceptions

312
00:09:56,092 --> 00:09:56,695
que vous connaissez

313
00:09:56,795 --> 00:09:57,880
et de les capturer au plus près

314
00:09:57,980 --> 00:09:59,274
de l'endroit où elles se produisent

315
00:09:59,374 --> 00:09:59,934
dans votre code.

316
00:10:00,034 --> 00:10:02,119
En effet, plus vous les capturez tôt,

317
00:10:02,219 --> 00:10:04,320
et plus votre réaction peut être appropriée

318
00:10:04,420 --> 00:10:05,831
à l'origine du problème.

319
00:10:06,326 --> 00:10:07,790
Une question que vous pouvez vous poser,

320
00:10:07,890 --> 00:10:08,645
c'est comment est-ce que je fais

321
00:10:08,745 --> 00:10:09,586
pour connaître les exceptions

322
00:10:09,686 --> 00:10:10,530
que je dois capturer ?

323
00:10:10,904 --> 00:10:12,105
Bien là, il n'y a pas de miracle,

324
00:10:12,205 --> 00:10:14,310
la seule réponse à cette question

325
00:10:14,410 --> 00:10:16,550
est qu'il faut lire en détail

326
00:10:16,650 --> 00:10:18,509
la documentation des modules

327
00:10:18,609 --> 00:10:19,260
que vous utilisez

328
00:10:19,360 --> 00:10:20,868
ou des objets que vous utilisez.

329
00:10:21,511 --> 00:10:22,161
À bientôt !

