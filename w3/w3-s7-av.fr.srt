1
00:00:05,494 --> 00:00:06,917
Dans cette vidéo, nous allons voir

2
00:00:07,017 --> 00:00:08,441
une notion centrale en Python,

3
00:00:08,541 --> 00:00:10,256
la notion de références partagées.

4
00:00:10,712 --> 00:00:11,597
Pourquoi est-ce que cette notion

5
00:00:11,697 --> 00:00:12,489
est si importante ?

6
00:00:12,589 --> 00:00:14,912
C'est ce mécanisme de références partagées

7
00:00:15,012 --> 00:00:16,961
qui vous permet d'accéder aux attributs

8
00:00:17,061 --> 00:00:18,371
de n'importe quel objet

9
00:00:18,471 --> 00:00:19,267
dans votre programme.

10
00:00:19,367 --> 00:00:20,211
Par conséquent,

11
00:00:20,311 --> 00:00:21,843
si vous ne maîtrisez pas cette notion,

12
00:00:21,943 --> 00:00:23,812
vous risquez d'introduire de nombreux bugs

13
00:00:23,912 --> 00:00:24,643
dans vos programmes.

14
00:00:25,274 --> 00:00:26,749
Regardons maintenant le fonctionnement

15
00:00:26,849 --> 00:00:28,019
de ces références partagées.

16
00:00:29,191 --> 00:00:31,317
Supposons que je veuille faire une affectation

17
00:00:31,417 --> 00:00:32,896
a égale l'entier 3 ;

18
00:00:32,996 --> 00:00:34,310
regardons ce que cela va produire.

19
00:00:35,365 --> 00:00:38,011
À gauche, j'ai l'espace de mes variables,

20
00:00:38,111 --> 00:00:40,081
que l'on appellera espace de nommage

21
00:00:40,181 --> 00:00:40,792
plus tard,

22
00:00:40,892 --> 00:00:42,833
et à droite, j'ai l'ensemble des objets

23
00:00:42,933 --> 00:00:43,778
créés dans mon programme.

24
00:00:44,223 --> 00:00:45,305
Donc a égale 3,

25
00:00:45,405 --> 00:00:46,348
je vous l'avais déjà expliqué

26
00:00:46,448 --> 00:00:47,427
dans une précédente vidéo,

27
00:00:47,527 --> 00:00:48,586
va faire les opérations suivantes:

28
00:00:48,686 --> 00:00:51,464
il va commencer par créer l'entier 3,

29
00:00:52,488 --> 00:00:54,070
à cet entier, à cet objet entier,

30
00:00:54,170 --> 00:00:55,782
vont être associés deux champs importants,

31
00:00:55,882 --> 00:00:57,322
un compteur de références

32
00:00:57,422 --> 00:00:58,637
qui est ici en rouge,

33
00:00:58,737 --> 00:00:59,649
qui est à zéro,

34
00:00:59,749 --> 00:01:02,043
qui va représenter le nombre de variables

35
00:01:02,143 --> 00:01:03,435
qui référencent cet objet,

36
00:01:03,535 --> 00:01:05,201
et un champ de type,

37
00:01:05,301 --> 00:01:07,017
qui représente le type de l'objet.

38
00:01:07,625 --> 00:01:09,425
Python étant un langage à typage fort,

39
00:01:09,525 --> 00:01:10,816
le type, une fois qu'il a été défini,

40
00:01:10,916 --> 00:01:11,937
ne peut plus être changé.

41
00:01:13,113 --> 00:01:14,602
Donc je crée mon objet entier 3,

42
00:01:14,702 --> 00:01:16,286
ensuite je crée une variable a

43
00:01:16,386 --> 00:01:17,918
qui référence cet objet entier.

44
00:01:18,018 --> 00:01:20,158
Le compteur de références passe à 1,

45
00:01:20,258 --> 00:01:21,331
j'ai maintenant une référence

46
00:01:21,431 --> 00:01:22,138
vers mon entier.

47
00:01:22,882 --> 00:01:24,546
Ensuite, je fais a égale 'spam' ;

48
00:01:24,646 --> 00:01:27,841
je vais créer un objet 'spam'

49
00:01:27,941 --> 00:01:29,262
de type chaîne de caractères,

50
00:01:29,362 --> 00:01:31,140
compteur de références à zéro ;

51
00:01:31,240 --> 00:01:32,791
ensuite, ma variable a

52
00:01:32,891 --> 00:01:34,389
ne référence plus l'entier 3,

53
00:01:35,402 --> 00:01:37,627
le compteur de références de 3 passe à 0,

54
00:01:37,727 --> 00:01:39,135
et a maintenant référence

55
00:01:39,235 --> 00:01:40,287
la chaîne de caractères 'spam' ;

56
00:01:40,387 --> 00:01:42,406
le compteur de 'spam' passe à 1.

57
00:01:43,429 --> 00:01:45,281
Lorsque le compteur de références

58
00:01:45,381 --> 00:01:46,375
d'un objet passe à zéro,

59
00:01:46,475 --> 00:01:48,598
le module Garbage Collector

60
00:01:48,698 --> 00:01:52,361
va prendre un accès sur cet objet,

61
00:01:52,461 --> 00:01:54,368
et va libérer la mémoire

62
00:01:54,468 --> 00:01:55,665
occupée par cet objet

63
00:01:55,765 --> 00:01:58,047
lors d'un cycle de Garbage Collection.

64
00:01:58,453 --> 00:01:59,639
On ne gère pas nous-mêmes

65
00:01:59,739 --> 00:02:01,725
ces cycles de nettoyage de la mémoire,

66
00:02:01,825 --> 00:02:04,040
c'est le module GC, Garbage Collector,

67
00:02:04,140 --> 00:02:06,368
qui va gérer ça automatiquement pour nous.

68
00:02:06,468 --> 00:02:08,338
Donc en pratique, on n'a pas à se préoccuper

69
00:02:08,438 --> 00:02:11,141
de la création des zones mémoire

70
00:02:11,241 --> 00:02:12,507
et de la libération des zones mémoire,

71
00:02:12,607 --> 00:02:14,204
Python gère tout ça pour nous.

72
00:02:15,955 --> 00:02:17,914
Maintenant, regardons un autre cas.

73
00:02:18,014 --> 00:02:19,570
a égale 3, donc on l'a déjà vu,

74
00:02:19,670 --> 00:02:20,930
je crée mon objet entier 3,

75
00:02:21,030 --> 00:02:22,739
ma variable a qui référence mon entier.

76
00:02:22,839 --> 00:02:24,813
Le compteur de références passe à 1.

77
00:02:25,441 --> 00:02:27,321
Ensuite, je fais b égale a.

78
00:02:27,886 --> 00:02:29,992
Dans ce cas-là, je fais toujours la même chose

79
00:02:30,092 --> 00:02:32,086
je crée l'objet qui est à droite

80
00:02:32,186 --> 00:02:33,218
sauf que cette fois, c'est une variable

81
00:02:33,318 --> 00:02:34,000
qui est à droite.

82
00:02:34,143 --> 00:02:35,335
Donc en fait, je vais simplement

83
00:02:35,435 --> 00:02:36,596
réutiliser l'objet,

84
00:02:36,696 --> 00:02:38,806
qui est déjà référencé par ma variable a.

85
00:02:39,395 --> 00:02:40,809
Ensuite, je crée une variable b

86
00:02:40,909 --> 00:02:41,829
dans l'espace des variables,

87
00:02:41,929 --> 00:02:44,599
et ma variable b va référencer mon entier 3.

88
00:02:45,359 --> 00:02:47,286
Le compteur de références passe à 2,

89
00:02:47,386 --> 00:02:49,206
j'ai maintenant 2 références

90
00:02:49,306 --> 00:02:50,937
vers mon objet entier.

91
00:02:52,306 --> 00:02:53,717
Si je fais a égale 'spam',

92
00:02:53,817 --> 00:02:55,201
je crée un nouvel objet 'spam'

93
00:02:55,301 --> 00:02:57,185
ma variable a

94
00:02:57,669 --> 00:02:59,787
va enlever sa référence vers l'entier 3,

95
00:03:00,305 --> 00:03:01,279
et je vais maintenant

96
00:03:01,379 --> 00:03:02,866
référencer l'objet 'spam'.

97
00:03:03,424 --> 00:03:04,467
Donc nous voyons qu'à un moment

98
00:03:04,567 --> 00:03:05,824
de l'exécution de notre code,

99
00:03:05,924 --> 00:03:07,734
les variables a et b

100
00:03:07,834 --> 00:03:09,028
référençaient toutes les deux

101
00:03:09,128 --> 00:03:11,096
l'objet entier 3.

102
00:03:11,196 --> 00:03:11,842
C'est ce qu'on appelle

103
00:03:11,942 --> 00:03:13,025
une référence partagée.

104
00:03:13,125 --> 00:03:14,542
Une référence partagée

105
00:03:14,642 --> 00:03:16,815
est une référence qui est partagée

106
00:03:16,915 --> 00:03:18,230
par plusieurs variables.

107
00:03:18,667 --> 00:03:20,302
Lorsque cette référence est faite

108
00:03:20,402 --> 00:03:21,686
vers un objet immuable,

109
00:03:21,786 --> 00:03:23,006
c'est le cas d'un entier,

110
00:03:23,106 --> 00:03:25,197
il n'y a aucun effet de bord possible.

111
00:03:25,632 --> 00:03:27,367
Par contre, si l'objet référencé

112
00:03:27,467 --> 00:03:29,237
est un objet mutable,

113
00:03:29,337 --> 00:03:30,795
il y a un risque d'effet de bord

114
00:03:30,895 --> 00:03:31,721
qu'il faut comprendre

115
00:03:31,821 --> 00:03:33,058
et être capable de maîtriser.

116
00:03:33,158 --> 00:03:34,650
C'est ce que nous allons voir dans la suite.

117
00:03:35,989 --> 00:03:37,669
Maintenant, mon objet,

118
00:03:37,769 --> 00:03:39,276
au lieu d'être un entier, est une liste.

119
00:03:39,898 --> 00:03:41,825
Donc je vais créer mon objet liste,

120
00:03:41,925 --> 00:03:42,686
je crée un objet liste,

121
00:03:42,786 --> 00:03:43,929
puis mon objet liste va lui-même

122
00:03:44,029 --> 00:03:47,101
référencer un entier 1 et un entier 2.

123
00:03:47,201 --> 00:03:48,557
Maintenant, je ne montre plus

124
00:03:48,657 --> 00:03:49,708
le compteur de références

125
00:03:49,808 --> 00:03:50,604
et le type de l'objet,

126
00:03:50,704 --> 00:03:51,836
pour simplifier la notation,

127
00:03:51,936 --> 00:03:53,997
mais sachez que la référence

128
00:03:54,097 --> 00:03:55,876
faite par la liste vers l'entier 1

129
00:03:55,976 --> 00:03:58,414
va augmenter le compteur de références

130
00:03:58,514 --> 00:03:59,541
de mon entier 1.

131
00:03:59,641 --> 00:04:00,636
Le compteur de références

132
00:04:00,736 --> 00:04:02,970
n'est pas seulement augmenté, incrémenté

133
00:04:03,070 --> 00:04:04,306
lorsqu'on référence par une variable,

134
00:04:04,406 --> 00:04:06,008
mais il est également incrémenté

135
00:04:06,108 --> 00:04:07,829
lorsqu'on référence par un autre objet.

136
00:04:08,882 --> 00:04:10,239
Et maintenant, je crée ma variable a

137
00:04:10,339 --> 00:04:11,974
qui va référencer l'objet liste.

138
00:04:13,370 --> 00:04:15,186
Maintenant, faisons b égale a.

139
00:04:15,286 --> 00:04:16,258
Donc on l'a déjà vu,

140
00:04:16,358 --> 00:04:17,770
je vais créer une référence partagée,

141
00:04:17,870 --> 00:04:19,099
je vais créer une variable b

142
00:04:19,199 --> 00:04:20,561
qui référence le même objet

143
00:04:20,661 --> 00:04:23,057
que mon objet référencé par a.

144
00:04:23,528 --> 00:04:25,680
Puis faisons a de 0 égale 'spam'.

145
00:04:26,829 --> 00:04:28,105
Que va faire cette opération ?

146
00:04:28,205 --> 00:04:29,040
Elle va dire:

147
00:04:29,342 --> 00:04:30,741
créer l'objet 'spam',

148
00:04:30,841 --> 00:04:32,164
je crée toujours l'objet qui est à droite,

149
00:04:32,779 --> 00:04:36,111
et ensuite, la case 0 de ma liste

150
00:04:36,211 --> 00:04:37,239
référencée par a

151
00:04:37,339 --> 00:04:38,993
doit maintenant référencer

152
00:04:39,093 --> 00:04:39,864
cet objet 'spam'.

153
00:04:39,964 --> 00:04:40,915
Je vais donc enlever

154
00:04:41,015 --> 00:04:42,766
la référence de ma liste vers l'entier 1,

155
00:04:42,866 --> 00:04:45,268
et je vais faire une référence de cette liste

156
00:04:45,368 --> 00:04:47,234
vers la chaîne de caractères 'spam'.

157
00:04:47,334 --> 00:04:49,424
J'ai une référence partagée,

158
00:04:49,898 --> 00:04:51,796
a référence l'objet liste,

159
00:04:51,896 --> 00:04:53,404
b référence l'objet liste,

160
00:04:53,504 --> 00:04:54,787
l'objet liste est mutable,

161
00:04:54,887 --> 00:04:56,459
il a été modifié par a,

162
00:04:56,559 --> 00:04:59,418
b voit également cet objet modifié.

163
00:04:59,518 --> 00:05:01,113
C'est ce qu'on appelle un effet de bord.

164
00:05:01,213 --> 00:05:04,080
On voit que a référence l'objet ['spam', 2] ;

165
00:05:04,180 --> 00:05:06,407
b référence l'objet ['spam', 2].

166
00:05:06,957 --> 00:05:08,307
Cette notion d'effet de bord,

167
00:05:08,407 --> 00:05:09,970
c'est lorsque j'ai une référence partagée

168
00:05:10,070 --> 00:05:10,977
vers un objet mutable,

169
00:05:11,077 --> 00:05:13,378
que cet objet est modifié par une variable,

170
00:05:13,478 --> 00:05:15,883
l'autre variable va voir cet objet modifié.

171
00:05:18,023 --> 00:05:19,230
Maintenant, on peut se demander

172
00:05:19,330 --> 00:05:20,462
mais comment se prémunir

173
00:05:21,081 --> 00:05:22,006
de cet effet de bord ?

174
00:05:22,625 --> 00:05:23,617
C'est ce qu'on va voir maintenant.

175
00:05:24,255 --> 00:05:26,721
Je crée toujours ma liste [1, 2],

176
00:05:26,821 --> 00:05:27,748
j'avance rapidement

177
00:05:27,848 --> 00:05:29,051
parce que maintenant c'est une notion claire,

178
00:05:29,151 --> 00:05:30,569
et la variable a va maintenant

179
00:05:30,669 --> 00:05:31,600
référencer cet objet liste.

180
00:05:32,638 --> 00:05:35,791
Maintenant, au lieu de faire b égale a,

181
00:05:36,428 --> 00:05:39,902
je vais faire b égale un slice vide de a.

182
00:05:40,579 --> 00:05:42,762
Souvenez-vous, que fait un slice vide ?

183
00:05:43,038 --> 00:05:45,050
Un slice vide fait ce qu'on appelle une copie,

184
00:05:45,150 --> 00:05:46,772
en fait, ça s'appelle une shallow copy,

185
00:05:46,872 --> 00:05:48,829
ou une copie superficielle de ma liste.

186
00:05:49,437 --> 00:05:51,243
Ça veut donc dire, cette copie superficielle,

187
00:05:51,343 --> 00:05:52,801
que je vais créer un nouvel objet liste,

188
00:05:54,237 --> 00:05:55,740
mais que cet objet liste va référencer

189
00:05:55,840 --> 00:05:57,380
les mêmes objets que ceux

190
00:05:57,480 --> 00:05:58,874
référencés par ma liste originale.

191
00:05:59,327 --> 00:06:01,009
Ma liste va référencer le même 1,

192
00:06:01,109 --> 00:06:02,231
et le même 2.

193
00:06:03,928 --> 00:06:05,433
Maintenant, b va référencer

194
00:06:05,533 --> 00:06:06,625
ce nouvel objet liste,

195
00:06:06,725 --> 00:06:08,240
en fait, cette copie de la liste.

196
00:06:08,679 --> 00:06:10,697
Si maintenant je fais a de 0 égale 'spam',

197
00:06:10,797 --> 00:06:11,546
je crée toujours

198
00:06:11,646 --> 00:06:12,660
ma chaîne de caractères 'spam',

199
00:06:13,966 --> 00:06:17,602
mais a de 0, c'est la case de la liste initiale,

200
00:06:17,702 --> 00:06:18,863
la première case de la liste initiale,

201
00:06:18,963 --> 00:06:20,741
je vais donc enlever la référence vers le 1

202
00:06:20,841 --> 00:06:22,392
dans la liste initiale,

203
00:06:22,492 --> 00:06:24,212
et maintenant je vais référencer

204
00:06:24,312 --> 00:06:25,795
la chaîne de caractères 'spam'.

205
00:06:27,034 --> 00:06:29,118
On voit donc maintenant que j'ai été capable

206
00:06:29,218 --> 00:06:31,036
de supprimer cet effet de bord

207
00:06:31,136 --> 00:06:32,593
en faisant une copie de la liste

208
00:06:32,693 --> 00:06:34,978
au moment du partage de référence.

209
00:06:35,558 --> 00:06:37,036
On voit bien que a référence

210
00:06:37,136 --> 00:06:38,324
la liste ['spam', 2],

211
00:06:38,424 --> 00:06:41,330
et que b référence la liste [1, 2].

212
00:06:43,639 --> 00:06:45,199
Seulement vous devez vous rendre compte

213
00:06:45,299 --> 00:06:47,466
que lorsque je fais cette shallow copy,

214
00:06:47,566 --> 00:06:49,089
je fais juste une copie superficielle,

215
00:06:49,189 --> 00:06:51,184
une copie de l'objet liste.

216
00:06:51,284 --> 00:06:52,493
Par contre, toutes les références

217
00:06:52,593 --> 00:06:53,300
sont partagées.

218
00:06:54,019 --> 00:06:56,688
Donc si ma liste référence un objet

219
00:06:56,788 --> 00:06:57,821
qui est lui-même mutable,

220
00:06:57,921 --> 00:06:59,498
dans ce cas-là, la shallow copy

221
00:06:59,598 --> 00:07:00,548
ne sera pas suffisante.

222
00:07:00,648 --> 00:07:01,671
Regardons un exemple.

223
00:07:02,557 --> 00:07:04,362
Je crée une liste

224
00:07:04,462 --> 00:07:06,298
qui référence un entier 1,

225
00:07:07,023 --> 00:07:08,654
et qui référence un objet liste

226
00:07:08,754 --> 00:07:11,130
qui lui-même référence un entier 2.

227
00:07:11,832 --> 00:07:13,795
Et maintenant a, ma variable a,

228
00:07:13,895 --> 00:07:15,168
va référencer ce nouvel objet liste.

229
00:07:16,477 --> 00:07:17,980
Maintenant, je crée une variable b,

230
00:07:18,080 --> 00:07:20,448
qui référence une shallow copy de la liste.

231
00:07:20,548 --> 00:07:21,881
ça veut dire quoi, cette shallow copy ?

232
00:07:21,981 --> 00:07:23,351
C'est la copie superficielle donc je vais

233
00:07:23,451 --> 00:07:25,874
dupliquer la liste d'origine ;

234
00:07:26,656 --> 00:07:28,127
par contre, cette liste va référencer

235
00:07:28,227 --> 00:07:30,155
les mêmes objets que ceux référencés par a.

236
00:07:30,707 --> 00:07:32,316
Je vais référencer le même 1

237
00:07:32,416 --> 00:07:34,701
et je vais référencer le même objet liste.

238
00:07:35,316 --> 00:07:36,860
Et maintenant, je crée ma variable b

239
00:07:36,960 --> 00:07:39,075
qui référence cet objet copie.

240
00:07:40,384 --> 00:07:43,064
Si je fais a de 1 de 0 égale 'spam',

241
00:07:43,164 --> 00:07:44,114
qu'est-ce que cela va faire ?

242
00:07:44,354 --> 00:07:46,863
a de 1, c'est la deuxième case de ma liste.

243
00:07:47,382 --> 00:07:50,950
a de 1 de 0, c'est la première case de la liste

244
00:07:51,050 --> 00:07:53,286
qui est référencée par la deuxième case de a.

245
00:07:54,156 --> 00:07:56,339
C'est donc la liste que l'on a entre 1 et 2.

246
00:07:56,842 --> 00:07:59,642
Je vais donc créer mon objet 'spam'

247
00:07:59,742 --> 00:08:01,271
et je vais supprimer la référence,

248
00:08:01,371 --> 00:08:04,029
et maintenant référencer directement

249
00:08:04,129 --> 00:08:05,893
la chaîne de caractères 'spam'.

250
00:08:06,507 --> 00:08:09,306
Or, comme cette liste, entre les entiers 1 et 2,

251
00:08:09,406 --> 00:08:11,865
est référencée à la fois par a et par b,

252
00:08:12,339 --> 00:08:13,896
si je regarde quelle est la valeur de a,

253
00:08:13,996 --> 00:08:17,090
on voit que a contient une liste

254
00:08:17,190 --> 00:08:18,451
qui contient maintenant 'spam',

255
00:08:18,551 --> 00:08:20,271
et que b contient également une liste

256
00:08:20,371 --> 00:08:21,013
qui contient 'spam'.

257
00:08:21,492 --> 00:08:23,588
Donc dans le cas d'un objet mutable

258
00:08:23,688 --> 00:08:25,553
qui référence des mutables,

259
00:08:25,653 --> 00:08:27,720
la shallow copy n'est pas suffisante.

260
00:08:28,247 --> 00:08:29,345
Comment est-ce que je peux m'en sortir ?

261
00:08:29,445 --> 00:08:31,984
En faisant ce qu'on appelle une deep copy,

262
00:08:32,084 --> 00:08:33,706
c'est-à-dire une copie profonde

263
00:08:33,806 --> 00:08:35,552
qui va copier de manière récursive

264
00:08:35,652 --> 00:08:36,943
tous les objets référencés.

265
00:08:37,852 --> 00:08:39,340
Regardons comment cela fonctionne.

266
00:08:39,929 --> 00:08:41,650
Je recrée mon objet liste

267
00:08:41,750 --> 00:08:43,203
qui référence un entier 1,

268
00:08:43,832 --> 00:08:45,832
une liste qui référence 2,

269
00:08:45,932 --> 00:08:47,827
et ma variable qui référence cet objet liste.

270
00:08:48,804 --> 00:08:51,309
Et ensuite, je vais importer le module copy

271
00:08:51,835 --> 00:08:54,675
et faire un copy.deepcopy de a.

272
00:08:55,233 --> 00:08:57,259
Le module copy me permet d'accéder

273
00:08:57,359 --> 00:08:58,330
à une méthode deepcopy

274
00:08:58,430 --> 00:09:00,608
qui fait une copie profonde

275
00:09:00,708 --> 00:09:03,485
de tous les éléments référencés par a,

276
00:09:03,585 --> 00:09:05,178
donc je vais absolument tout copier.

277
00:09:05,278 --> 00:09:06,700
Regardons le résultat de ça:

278
00:09:06,800 --> 00:09:08,006
je crée un nouvel objet liste

279
00:09:08,106 --> 00:09:09,517
mais je crée également

280
00:09:09,617 --> 00:09:10,940
un nouvel objet 1,

281
00:09:11,040 --> 00:09:14,517
un nouvel objet liste qui référence 2,

282
00:09:14,617 --> 00:09:16,644
et ma liste copiée va référencer

283
00:09:16,744 --> 00:09:17,667
ce nouvel objet liste.

284
00:09:17,767 --> 00:09:18,825
J'ai donc deux objets,

285
00:09:18,925 --> 00:09:21,587
b va référencer ce nouvel objet liste,

286
00:09:21,687 --> 00:09:23,657
et j'ai donc deux objets totalement isolés

287
00:09:23,757 --> 00:09:26,018
l'objet en rouge qui est référencé par a,

288
00:09:26,118 --> 00:09:28,914
et l'objet en vert qui est référencé par b.

289
00:09:29,014 --> 00:09:31,945
Maintenant, si je veux modifier

290
00:09:33,009 --> 00:09:35,552
ma première case de la liste,

291
00:09:35,652 --> 00:09:37,702
donc si je fais a de 1 de 0 égale 'spam',

292
00:09:37,802 --> 00:09:39,703
je vais créer une chaîne de caractères 'spam',

293
00:09:39,803 --> 00:09:41,622
je vais enlever la référence

294
00:09:41,722 --> 00:09:43,238
de la liste entre le 1 et le 2

295
00:09:43,338 --> 00:09:44,891
de la liste référencée par a,

296
00:09:44,991 --> 00:09:46,735
et maintenant on voit donc que

297
00:09:46,835 --> 00:09:49,356
a référence un objet

298
00:09:49,456 --> 00:09:51,044
qui contient 1, ['spam'],

299
00:09:51,144 --> 00:09:53,276
et que b référence un objet

300
00:09:53,376 --> 00:09:55,732
qui contient 1 et la liste [2].

