# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
#
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Les références partagées
## Temp total: 10m30s

## Résumé de la vidéo (20 s)


Nous allons voir dans cette vidéo une des notions les plus importantes
et les plus subtiles en Python : les références partagées.  Alors que
les références partagées ne pose aucune difficulté lorsqu'elles sont
sur un objet immuable, elles peuvent être source de difficultés chez
les débutants en Python lorsque'elles sont sur un objet mutable.

Regardons le fonctionnement des références partagées sur 
les mutables et les immuables. 


>>>>>>>>>> W3-S7-AV-slide1.pptx <<<<<<<<<< (9m30)
[parler de shalow copie et de deepcopy]

## Résumé de la vidéo (40 s)

Ce mécanisme de référence partagé est central en Python. Tout fonctionne
par référence partagé et notamment le passage d'arguments à une fonction. 
C'est donc le mécanisme qui permet à différentes parties d'un programme
de travailler sur les mêmes objets. 

De plus, comme tout est objet en Python et donc tout prend pas mal
de mémoire, il est important de minimiser les copies de objets. Et Python
fait ça très bien grace aux références partagées. 

Lorsque vous avez un objet builtin immuable, comme il ne peut pas 
être modifié, Python utilise souvent des références partagés vers 
une copie unique de cet objet. Par exemple, l'objet entier 1 est un 
singleton, ça veut dire qu'il n'existe qu'en une seul copie, et il y
a donc un grand nombre de référence vers cet objet. 

Et lorsque ces objets immuables ne sont plus référencés, 
Python les met dans un cache pour pouvoir les réutiliser 
sans avoir à recréer l'objet. Ce mécanisme de cache est 
utilisé pour les petits entiers, les petites chaînes de 
caractères et certains tuples. 

Vous voyez donc que c'est le mécanisme de références partagés qui permet
d'optimiser l'utilisation de la mémoire en Python.

À bientôt.

