# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
#
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Les ensembles
## Temp total: 8m10s

## Résumé de la vidéo (35s)

Dans cette vidéo, nous allons introduire un nouveau type built-in, les
set. Un 'set' est un ensemble non ordonné d'objets uniques. Il est
implémenté avec une table de hash, donc il est optimisé pour l'accés,
l'insertion, l'effacement et surtout le test d'appartenance. 

Un set ne peut accepter que des clefs hashable,
donc en particulie tous les type built-in immuable: les nombres, les
chaînes de caractères, les tuples d'immuable, mais pas un objet
built-in mutable comme une liste.  

Les sets sont des objets mutables ça veut dire qu'on peut le modifier
en place. 

En pratique, on utilise très souvent les set pour les tests 
d'appartenance et pour obtenir un ensemble des éléments uniques
d'une séquence. 

Ouvrons un interpréteur Python pour jouer avec les set. 

>>>>>>>>>> W3-S5-AV-exo1.py <<<<<<<<<< (7m00s)

## Résumé de la vidéo (35s)

Nous avons découvers le type set qui est très utilisé en Python soit
pour obtenir les éléments uniques d'une liste soit pour faire des
tests d'appartenance. Nous avons en vu particulier que le test
d'appartenance sur les set est extrêment efficace et que c'était
toujours plus efficace de convertir vos listes en set et de faire le
test d'appartenance sur le set. 

À bientôt.
