1
00:00:05,363 --> 00:00:06,858
Dans cette vidéo, nous allons parler

2
00:00:06,958 --> 00:00:08,013
d'un nouveau type built-in

3
00:00:08,113 --> 00:00:09,304
qui s'appelle le tuple.

4
00:00:09,878 --> 00:00:11,838
Le tuple est très proche de la liste ;

5
00:00:11,938 --> 00:00:13,243
comme une liste, c'est une séquence,

6
00:00:13,343 --> 00:00:15,168
on peut donc appliquer les opérations

7
00:00:15,268 --> 00:00:17,456
comme le test d'appartenance avec in,

8
00:00:17,556 --> 00:00:18,831
accéder aux différents éléments

9
00:00:18,931 --> 00:00:19,589
avec un crochet,

10
00:00:19,689 --> 00:00:20,933
faire du slicing dessus,

11
00:00:22,003 --> 00:00:23,755
et également, un tuple regroupe...

12
00:00:23,855 --> 00:00:25,376
peut référencer des objets

13
00:00:25,476 --> 00:00:26,443
complètement hétérogènes.

14
00:00:26,543 --> 00:00:27,700
C'est très, très proche de la liste,

15
00:00:27,800 --> 00:00:29,295
mais il y a une différence fondamentale

16
00:00:29,395 --> 00:00:30,520
entre la liste et le tuple,

17
00:00:30,620 --> 00:00:33,118
c'est que le tuple est un objet immuable.

18
00:00:33,218 --> 00:00:35,001
Ça veut dire qu'une fois qu'on a créé le tuple,

19
00:00:35,101 --> 00:00:36,396
on ne peut plus le modifier.

20
00:00:36,954 --> 00:00:39,587
Nous verrons la raison fondamentale

21
00:00:39,687 --> 00:00:41,663
de l'existence du tuple,

22
00:00:41,763 --> 00:00:42,694
pourquoi est-ce qu'on a besoin

23
00:00:42,794 --> 00:00:44,603
d'un objet liste qui est immuable,

24
00:00:44,703 --> 00:00:46,364
lorsque nous parlerons des dictionnaires

25
00:00:46,464 --> 00:00:47,476
dans une prochaine vidéo.

26
00:00:47,576 --> 00:00:48,854
Pour le moment,

27
00:00:48,954 --> 00:00:50,350
ouvrons un interpréteur Python

28
00:00:50,450 --> 00:00:52,396
pour commencer à jouer avec le tuple.

29
00:00:53,489 --> 00:00:55,331
Commençons par créer un tuple vide.

30
00:00:56,315 --> 00:00:57,663
On crée un tuple

31
00:00:57,763 --> 00:00:58,930
en écrivant simplement

32
00:00:59,030 --> 00:01:01,073
des parenthèses ouvrante et fermante.

33
00:01:01,173 --> 00:01:03,465
Ça va donc me créer un objet de type tuple,

34
00:01:03,565 --> 00:01:04,632
je peux le vérifier avec type,

35
00:01:05,179 --> 00:01:06,551
voilà, c'est un objet tuple

36
00:01:06,651 --> 00:01:07,702
qui est simplement vide.

37
00:01:07,802 --> 00:01:09,866
Évidemment, comme le tuple est immuable,

38
00:01:09,966 --> 00:01:11,152
lorsque je crée un tuple vide,

39
00:01:11,252 --> 00:01:12,184
je ne peux rien ajouter

40
00:01:12,284 --> 00:01:13,967
donc ce tuple vide a assez peu d'intérêt.

41
00:01:14,652 --> 00:01:15,916
Ensuite, je peux créer un tuple

42
00:01:16,016 --> 00:01:16,721
avec un élément,

43
00:01:17,717 --> 00:01:19,527
avec la notation suivante.

44
00:01:19,627 --> 00:01:21,276
Vous remarquez que j'ai rajouté

45
00:01:21,376 --> 00:01:24,211
une virgule à la fin de mon premier élément.

46
00:01:25,964 --> 00:01:28,729
Vérifions que cet objet est bien un tuple.

47
00:01:28,829 --> 00:01:31,386
Si vous écrivez t égale 4

48
00:01:31,486 --> 00:01:33,314
avec des parenthèses sans virgule,

49
00:01:33,414 --> 00:01:34,547
pour Python,

50
00:01:34,647 --> 00:01:36,338
les parenthèses vont simplement permettre

51
00:01:36,438 --> 00:01:37,608
de grouper des opérations,

52
00:01:37,708 --> 00:01:39,659
et par conséquent, il va considérer qu'en fait

53
00:01:39,759 --> 00:01:41,754
l'objet que vous avez créé est juste un entier

54
00:01:41,854 --> 00:01:43,219
qui vaut 4.

55
00:01:43,319 --> 00:01:44,757
Donc pour un tuple singleton,

56
00:01:44,857 --> 00:01:45,946
un tuple d'un seul élément,

57
00:01:46,046 --> 00:01:47,938
il ne faut pas oublier de mettre la virgule.

58
00:01:48,830 --> 00:01:50,030
Ensuite, je peux créer un tuple

59
00:01:50,130 --> 00:01:50,911
de plusieurs éléments,

60
00:01:52,453 --> 00:01:53,320
qui contient des objets

61
00:01:53,420 --> 00:01:54,295
complètement hétérogènes,

62
00:01:54,395 --> 00:01:55,758
exactement comme une liste.

63
00:02:01,180 --> 00:02:02,625
J'ai donc mon objet tuple.

64
00:02:02,725 --> 00:02:05,215
Une caractéristique importante du tuple,

65
00:02:05,315 --> 00:02:07,176
c'est que les parenthèses sont facultatives.

66
00:02:08,085 --> 00:02:10,333
Regardez, j'enlève les parenthèses,

67
00:02:10,433 --> 00:02:13,688
et je vais bien encore obtenir mon objet tuple.

68
00:02:13,788 --> 00:02:15,519
Je peux également tout à fait

69
00:02:15,217 --> 00:02:17,929
écrire un singleton sans parenthèses,

70
00:02:18,001 --> 00:02:20,734
et j'obtiens toujours mon objet tuple.

71
00:02:20,834 --> 00:02:22,686
Nous allons voir dans quelques instants

72
00:02:22,786 --> 00:02:23,848
pourquoi ces parenthèses

73
00:02:23,948 --> 00:02:24,950
ne sont pas nécessaires

74
00:02:25,050 --> 00:02:26,682
pour définir un tuple.

75
00:02:30,413 --> 00:02:32,005
Comme le tuple est un objet

76
00:02:32,105 --> 00:02:33,036
de type séquence,

77
00:02:33,136 --> 00:02:34,713
je peux évidemment faire

78
00:02:34,813 --> 00:02:35,423
toutes les opérations

79
00:02:35,523 --> 00:02:36,685
que je peux faire sur une séquence.

80
00:02:36,785 --> 00:02:38,397
Reprenons un tuple

81
00:02:39,175 --> 00:02:40,629
avec un peu plus d'éléments.

82
00:02:40,729 --> 00:02:43,876
Je peux regarder est-ce que 3.4 in t

83
00:02:43,976 --> 00:02:46,361
et je vois que cet objet de type float

84
00:02:46,461 --> 00:02:47,518
est bien dans mon tuple ;

85
00:02:47,618 --> 00:02:49,429
je peux accéder à des éléments

86
00:02:49,529 --> 00:02:51,300
de la manière suivante:

87
00:02:51,400 --> 00:02:52,886
t[1], c'est le deuxième élément

88
00:02:52,986 --> 00:02:53,922
donc ça va être 3.4,

89
00:02:54,022 --> 00:02:55,728
et je peux également faire un slice

90
00:02:55,828 --> 00:02:58,850
pour aller du début jusqu'à l'élément 2 exclu,

91
00:02:57,924 --> 00:03:00,377
je vous rappelle qu'il va me retourner

92
00:03:00,477 --> 00:03:02,179
le premier et le deuxième éléments

93
00:03:02,279 --> 00:03:03,089
de mon tuple.

94
00:03:03,811 --> 00:03:05,692
Je peux convertir un tuple en liste,

95
00:03:05,792 --> 00:03:07,574
j'ai mon tuple t, je peux faire

96
00:03:07,674 --> 00:03:12,070
a égale list de t,

97
00:03:12,625 --> 00:03:15,376
et mon tuple a été converti en liste,

98
00:03:15,476 --> 00:03:17,466
et je peux ensuite repasser

99
00:03:17,566 --> 00:03:18,793
de ma liste à un tuple

100
00:03:18,893 --> 00:03:20,939
si par exemple, je décide de modifier

101
00:03:21,039 --> 00:03:23,041
mon objet en cours d'exécution.

102
00:03:23,141 --> 00:03:25,207
Par exemple, je modifie le premier élément

103
00:03:25,307 --> 00:03:26,735
et maintenant je le mets égal à False.

104
00:03:28,092 --> 00:03:30,700
On voit que ma liste vaut False, 3.4, 18.

105
00:03:30,800 --> 00:03:32,454
Je reconvertis cette liste en tuple

106
00:03:35,753 --> 00:03:37,969
et je le réaffecte vers ma variable t,

107
00:03:39,702 --> 00:03:41,305
j'ai oublié le signe =, donc c'est pour ça

108
00:03:41,405 --> 00:03:42,319
que j'ai une erreur de syntaxe.

109
00:03:42,419 --> 00:03:44,141
Voilà, maintenant, je vois que j'ai bien

110
00:03:44,241 --> 00:03:46,952
le tuple qui vaut False, 3.4 et 18.

111
00:03:47,052 --> 00:03:48,483
C'est très important de comprendre cela,

112
00:03:48,583 --> 00:03:49,932
le tuple étant immuable,

113
00:03:50,032 --> 00:03:51,483
je n'ai pas modifié mon objet tuple ;

114
00:03:51,583 --> 00:03:54,028
j'avais un tuple que j'ai converti en objet liste

115
00:03:54,128 --> 00:03:55,530
j'ai modifié l'objet liste

116
00:03:55,630 --> 00:03:57,788
et j'ai créé un nouvel objet tuple.

117
00:04:01,743 --> 00:04:04,598
Le tuple est très utilisé pour une opération

118
00:04:04,698 --> 00:04:06,478
qu'on appelle le tuple unpacking.

119
00:04:06,578 --> 00:04:08,006
Qu'est-ce que le tuple unpacking ?

120
00:04:08,106 --> 00:04:09,212
C'est quelque chose de très simple,

121
00:04:09,312 --> 00:04:10,624
vous avez dans un tuple

122
00:04:10,724 --> 00:04:11,847
deux variables, a et b,

123
00:04:12,773 --> 00:04:14,836
et vous dites que ces variables sont égales

124
00:04:15,296 --> 00:04:16,278
à une séquence

125
00:04:16,378 --> 00:04:17,773
qui doit avoir le même nombre d'éléments

126
00:04:17,873 --> 00:04:18,987
que le nombre d'éléments

127
00:04:19,087 --> 00:04:20,153
que vous avez dans votre tuple.

128
00:04:20,253 --> 00:04:21,884
Par exemple, je vais mettre une liste

129
00:04:21,984 --> 00:04:23,766
qui vaut 3, 4.

130
00:04:23,866 --> 00:04:26,122
J'exécute ça, et je vais voir que

131
00:04:26,222 --> 00:04:28,171
ma variable a référence l'entier 3,

132
00:04:28,271 --> 00:04:30,590
ma variable b référence l'entier 4.

133
00:04:31,419 --> 00:04:33,012
Je vous ai dit que dans le tuple

134
00:04:33,112 --> 00:04:34,826
on pouvait enlever les parenthèses.

135
00:04:34,926 --> 00:04:36,514
Une des raisons, c'est justement

136
00:04:36,614 --> 00:04:38,604
pour alléger cette notation ;

137
00:04:38,704 --> 00:04:39,336
vous voyez bien

138
00:04:39,436 --> 00:04:40,503
qu'il est beaucoup plus naturel

139
00:04:40,603 --> 00:04:44,171
d'écrire a, b égalent 3, 4

140
00:04:44,271 --> 00:04:46,604
que d'écrire le tuple avec des parenthèses

141
00:04:46,704 --> 00:04:48,596
(a, b) égale un tuple ou une liste

142
00:04:48,696 --> 00:04:50,891
avec des parenthèses ou crochets (3, 4).

143
00:04:50,991 --> 00:04:52,530
Cette notation fonctionne parfaitement,

144
00:04:52,630 --> 00:04:53,892
ce sont deux tuples

145
00:04:53,992 --> 00:04:55,408
mais on a enlevé les parenthèses

146
00:04:55,508 --> 00:04:56,577
pour alléger la notation,

147
00:04:56,677 --> 00:04:57,899
et je vois bien que maintenant

148
00:04:57,999 --> 00:04:59,824
a vaut bien 3, et b vaut bien 4.

149
00:05:00,595 --> 00:05:01,758
En Python, il existe également

150
00:05:01,858 --> 00:05:04,626
la notion de extended tuple unpacking.

151
00:05:04,726 --> 00:05:06,275
C'est une manière simple

152
00:05:06,375 --> 00:05:07,916
de pouvoir isoler des éléments

153
00:05:08,016 --> 00:05:09,198
lorsque j'ai un grand nombre d'éléments

154
00:05:09,298 --> 00:05:09,948
dans une séquence.

155
00:05:10,048 --> 00:05:11,076
Prenons un exemple:

156
00:05:11,176 --> 00:05:13,129
je vais dire a égale une liste

157
00:05:13,980 --> 00:05:15,517
qui contient 10 éléments.

158
00:05:16,333 --> 00:05:18,277
J'écris list de range de 10,

159
00:05:18,377 --> 00:05:19,804
range, c'est un itérateur

160
00:05:19,904 --> 00:05:21,156
qui va me générer 10 éléments

161
00:05:21,256 --> 00:05:23,486
et list va convertir chacun de ces éléments

162
00:05:23,586 --> 00:05:25,684
dans une liste qui va de 0 jusqu'à 9.

163
00:05:27,043 --> 00:05:28,010
Je vois bien que j'ai une liste

164
00:05:28,110 --> 00:05:28,962
qui va de 0 jusqu'à 9.

165
00:05:29,062 --> 00:05:30,144
Maintenant, supposons que je veuille

166
00:05:30,244 --> 00:05:32,111
prendre uniquement le premier élément,

167
00:05:32,211 --> 00:05:34,311
et les autres éléments dans un autre objet.

168
00:05:34,411 --> 00:05:40,820
Je peux écrire: x, étoile y égalent a

169
00:05:40,920 --> 00:05:42,993
Quel va être le résultat de cette opération ?

170
00:05:43,093 --> 00:05:45,348
x est égal au premier élément

171
00:05:45,448 --> 00:05:48,672
et y va référencer une liste

172
00:05:48,772 --> 00:05:51,446
qui va référencer tous les éléments

173
00:05:51,546 --> 00:05:52,790
qu'il reste dans a,

174
00:05:52,890 --> 00:05:56,408
y va être une liste qui référence

175
00:05:56,508 --> 00:05:58,416
1, 2, 3 jusqu'à 9.

176
00:05:58,516 --> 00:05:59,968
Vous pouvez bien évidemment

177
00:06:00,068 --> 00:06:03,501
utiliser la notation dans l'autre sens

178
00:06:03,601 --> 00:06:06,956
par exemple, faire un étoile de x, y

179
00:06:07,056 --> 00:06:08,539
pour obtenir un autre tuple unpacking

180
00:06:08,639 --> 00:06:09,734
dans lequel vous allez isoler

181
00:06:09,834 --> 00:06:11,597
uniquement le dernier élément.

182
00:06:11,697 --> 00:06:14,076
x me référence bien la liste de 0 à 8,

183
00:06:14,176 --> 00:06:16,278
et y uniquement 9.

184
00:06:17,344 --> 00:06:19,382
Dans cette vidéo, nous avons parlé du tuple.

185
00:06:19,482 --> 00:06:21,217
Le tuple est un objet séquence

186
00:06:21,317 --> 00:06:22,151
très proche de la liste,

187
00:06:22,251 --> 00:06:23,599
dont la principale différence

188
00:06:23,699 --> 00:06:24,743
est d'être immuable.

189
00:06:25,587 --> 00:06:27,106
Le tuple est utilisé notamment

190
00:06:27,206 --> 00:06:28,748
dans des opérations de tuple unpacking,

191
00:06:28,848 --> 00:06:29,884
comme nous venons de le voir,

192
00:06:29,984 --> 00:06:31,421
mais également par exemple,

193
00:06:31,521 --> 00:06:32,948
comme clé de dictionnaire.

194
00:06:33,048 --> 00:06:34,818
Nous reviendrons sur cette notion

195
00:06:34,918 --> 00:06:35,785
dans une prochaine vidéo.

196
00:06:35,885 --> 00:06:36,647
À bientôt !

