# -*- coding: utf-8 -*-
[[ commencer avec le transparent ]]
[[ capturer tout l'ecran ]]
[[ voir avec mathieu quel fond je prends ]]

Bonjour  
 
Aujourd'hui nous allons voir rapidement comment utiliser les 2 outils
 que nous utiliserons dans les vidéos.

D'une part, vous aurez besoin d'un environnement de développement,
c'est-à-dire un outil pour écrire votre code, et l'essayer au fur et à
mesure.

D'autre part, pour exécuter un programme écrit en python, il faut
disposer du "coeur" du langage, c'est-à-dire l'interpréteur python
lui-même.

==================== 
Je vais commencer par l'environnement de développement. Nous avons
choisi d'utiliser IDLE dans les vidéos, car il fait partie de la
distribution standard. 

Si vous préférez vous pouvez utiliser autre chose bien sûr, comme
emacs, vim, eclipse, mais même dans ce cas il est utile que vous
sachiez comment fonctionne IDLE pour suivre les vidéos avec un maximum
de confort.


Je vais lancer IDLE. 

# Montrer le numero de version
vérifier 2.7

Vous voyez d'abord une fenêtre qui contient ce qu'on appele
l'interpréteur interactif. Il est interactif car je peux y taper
directement du code, qui est exécuté immédiatement au fur et à mesure.

expression arithmétique

une petite fonction, par exemple factoriel
def factoriel (n):
    return 1 if n <= 1 else n * factoriel (n-1)

mentionner les indentations : touche tabulation

appeler la fonction

factoriel (10)

montrer comment reprendre une ligne : utiliser les fleches, faire "entree" sur cette ligne
il faut s'entrainer, comportement un peu perturbant, si on ne fait pas entree il ne passe rien

factoriel (100)

# faire expres de se tromper : mauvais nom de variable
facoriel (20)
les messages d'erreur - exception - essaient de donner le maximum d'informations 

========== parler de la doc
import math
dir(
s'arreter sur le popup
dir(math)

help (math.sqrt)

math.sqrt(10)

laisser ouvert...

----
C'est tres bien pour faire de tous petits calculs, et nous utiliserons beaucoup l'interpreteur python pendant ce cours 

Mais on ne peut pas s'amuser a retaper le programme a chaque fois - ni meme bien sur a utiliser un terminal...

C'est pourquoi le programme est stocke dans un ou plusieurs fichiers,
en python on dit des modules, nous y reviendrons naturellement

Je vais donc utiliser IDLE pour creer un fichier

retaper la fonction dans un fichier factoriel.py
(*) ajouter un commentaire, expliquer que la fin de la ligne apres # est ignore par le langage
sauf bien sur si le # est dans une chaine de caracteres
(*) ajouter une ligne de documentation
(*) utiliser un autre style avec if et else

Dire que pour executer ce morceau de code on fait F5

Montrer que la premiere fois IDLE nous demande de sauver le fichier, le sauver

Puis aller dans le terminal et appeler la fonction de nouveau avec
factoriel (4)

definir une variable 
n=10

print n

refaire F5, et montrer que l'interpréteur affiche "RESTART", expliquer
ce que ca veut dire (on efface l'environnement)

montrer que la variable n n'est plus disponible

print n

Conclure sur IDLE:
* creer des fichiers 
* les sauver 
* les executer dans un environnement "propre"

========================================
Je vais a present vous montrer comment utiliser l'interpréteur python.

Comme je l'ai dit tout à l'heure, l'interpréteur est nécessaire
pour exécuter le code. Que vous développiez avec IDLE, ou avec autre
chose, vous avez besoin de l'interpréteur. Et si vous publiez votre
code, vos utilisateurs auront besoin de l'interpréteur.

Je vais vous montrer son utilisation dans un terminal. Naturellement
une fois votre programme terminé et distribué, vos utilisateurs
n'auront pas besoin de lancer un terminal, mais quelle que soit la
façon de lancer votre programme, il y aura une instance de
l'interpréteur à la manoeuvre quelque part dans les processus de
l'ordinateur.

Je lance donc un terminal. 

Selon les systèmes, vous pouvez lancer une console de ce genre en utilisant
"cmd" sur windows, "xterm" sur linux, ou l'application "Terminal" sur
macos, comme je vais le faire tout de suite. 

====================
[[Ouvrir terminal]]

Je me deplace dans le repertoire ou j'ai créé factoriel.py
$ cd MOOC/brouillon

Pour lancer python en mode interactif comme on dit, on le lance sans
argument comme ceci

$ python 

# Taper un truc basique
3 * 5

c'est aussi simple que possible, cela fonctionne presque exactement comme tout
à l'heure, en plus basique (pas de couleur, d'indentation..)

retaper factoriel 
montrer qu'on peut remonter dans l'historique cette fois avec les
fleches

en fait python dans ce mode n'est pas connecté à la souris ni aux menus 

exit() 

[[ Sortir de python ]]

==================== 

Je voudrais maintenant vous montrer comment on utilise python pour lancer un vrai programme

reprendre factoriel.py (montrer le contenu)

lancer python factoriel.py, montrer que ça ne fait rien car on n'a pas appelé la fonction

expliquer que c'est le mode de fonctionnement "normal" de python
que le fichier passé en argument s'appelle le point d'entrée

relancer sur factoriel.py avec python -i
appeler la fonction 

sortir

====================
Voila qui conclut la présentation des deux outils

J'aimerais attirer votre attention sur le fait que dans les
vidéos, pour des raisons pratiques, on utilise massivement des noms de
variables très courts - pour ne pas passer trop de temps au clavier.
Nous vous recommandons contrairement à ce qui est fait dans la vidéo,
de bien prendre l'habitude, et même dans les exercices, d'utiliser des
identifiants qui soient parlants. 


====================
Enfin, je voudrais ajouter un mot sur les caractères accentués.  Le
sujet des accents est -- en informatique en général, ce n'est pas propre
à python -- extrêmement scabreux.
Vous trouverez dans les compléments quelques indications sommaires sur ce point.

Je vous retrouve la prochaine fois pour vous montrer les notebooks; à bientôt
