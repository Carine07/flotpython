# -*- coding: utf-8 -*-
<hr/>
<code>if</code> et indentation
=====

Que peut-on dire du code suivant ?
<pre>
if range(1):
  print 'oui'
else:
        print 'non'
</pre>

[ ] Ce code est invalide
[x] Ce code affiche 'oui'
[ ] Ce code affiche 'non'
[ ] Ce code suit les recommandations de présentation du code en python
[x] Ce code ne suit pas les recommandations de présentation du code en python


[explanation]
Comme <code>range(1)</code> retourne la liste <code>&#91;0&#93;</code>, le test est positif et donc on affiche <code>oui</code>.

Par ailleurs ce code est valide - les deux blocs n'ont pas la même indentation mais ce n'est pas rédhibitoire; en revanche il ne suit pas les recommandations de présentation du code en python, qui sont de toujours indenter un bloc d'instructions de 4 espaces.
[explanation]




<hr/>
Conditions (1)
=====

On se place dans un environnement où
<pre>
x = range(3)
y = (0, 1, 2)
z = [0, 1, 2]
</pre>

Parmi les fragments suivants:

<h3>Fragment 1</h3>
<pre>
print 'oui' if x == y else 'non' 
</pre>

<h3>Fragment 2</h3>
<pre>
print 'oui' if x == z else 'non'
</pre>

<h3>Fragment 3</h3>
<pre>
print 'oui' if None is False or None == False else 'non'
</pre>

Quels sont ceux qui impriment <code>oui</code> ?

[ ] Fragment 1
[x] Fragment 2
[ ] Fragment 3

[explanation]
Le premier cas imprime <code>non</code> car on compare une liste et un tuple.

Le second cas en revanche imprime <code>oui</code>, on compare deux listes qui ont le même contenu.

Dans la dernière forme, les deux constantes <code>None</code> et <code>False</code> ne sont égaux ni par l'opérateur <code>is</code> (ce ne sont pas les mêmes objets) ni par l'opérateur <code>==</code> (ils sont de types différents).
[explanation]

<hr/>
Conditions (2)
=====

Parmi les fragments suivants:

<h3>Fragment 1</h3>
<pre>
print 'oui' if False and (False or True) else 'non'
</pre>

<h3>Fragment 2</h3>
<pre>
print 'oui' if False and False or True else 'non'
</pre>

Quels sont ceux qui impriment <code>oui</code> ?

[ ] Fragment 1
[x] Fragment 2

[explanation]
Le premier cas imprime clairement <code>non</code>, puisque le premier terme du <code>and</code> est <code>False</code>.

Dans le second cas, en l'absence de parenthèses la condition est interprétée comme <code>(False and False) or True</code>.
[explanation]
