# -*- coding: utf-8 -*-
<hr/>
<b>Rappel</b> sur la fonction <code>zip</code>:

<pre>
>>> help(zip)

Help on built-in function zip in module __builtin__:

zip(...)
    zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]

    Return a list of tuples, where each tuple contains the i-th element
    from each of the argument sequences.  The returned list is truncated
    in length to the length of the shortest argument sequence.
</pre>

C'est à dire que par exemple :
<pre>
>>> zip( [1, 2, 3], [4, 5, 6])
[(1, 4), (2, 5), (3, 6)]
</pre>


<hr/>
Boucles <code>for</code>
=====

On dispose de deux matrices <code>matrice1</code> et <code>matrice2</code>, chacune implémentée comme une liste de listes. On sait par ailleurs que les deux matrices sont de même taille (même nombre de lignes, même taille de ligne deux à deux). On veut écrire un code qui calcule la somme des deux matrices.

Par exemple si :  
<pre>
matrice1 = [
   [1, 2, 3],
   [4, 5, 6],
   ]

matrice2 = [
   [10, 100, 1000],
   [20, 200, 2000],
   ]
</pre>

on veut obtenir dans la variable <code>somme</code> ceci : 
<pre>
somme = [
   [11, 102, 1003],
   [24, 205, 2006],
   ]
</pre>

<hr/>
On propose plusieurs solutions

<h3>Solution 1</h3>
<pre>
somme = []
for ligne1 in matrice1:
    for ligne2 in matrice2:
        somme += ligne1 + ligne2
</pre>

<h3>Solution 2</h3>
<pre>
somme = []
for i in range(len(matrice1)):
    ligne1 = matrice1[i]
    ligne2 = matrice2[i]
    ligne = []
    for j in range(len(ligne1)):
        ligne.append(ligne1[j] + ligne2[j])
    somme.append(ligne)
</pre>

<h3>Solution 3</h3>
<pre>
somme = []
for ligne1, ligne2 in zip(matrice1, matrice2):
    somme += [ ligne1 + ligne2 ]
</pre>

<h3>Solution 4</h3>
<pre>
somme = []
for ligne1, ligne2 in zip(matrice1, matrice2):
    ligne = []
    for x1, x2 in zip(ligne1, ligne2):
        ligne.append(x1+x2)
    somme.append(ligne)
</pre>


Quelles sont les solutions qui répondent à l'énoncé ?

[ ] Solution 1
[x] Solution 2
[ ] Solution 3
[x] Solution 4

[explanation]
La solution 1 est fantaisiste, sa logique est évidemment fausse, avec ces entrées elle donne pour <code>somme</code> la valeur <code>&#91;1, 2, 3, 10, 100, 1000, 1, 2, 3, 20, 200, 2000, 4, 5, 6, 10, 100, 1000, 4, 5, 6, 20, 200, 2000&#93;</code>

La solution 2 est correcte, quoi que franchement pas très pythonique.

La solution 3 a un début de logique qui fonctionne, mais l'expression <code>ligne1 + ligne2</code> renvoie une somme de deux listes, c'est à dire la <em>concaténation</em>, et non la <em>liste des sommes</em>. Avec nos entrées elle donne pour <code>somme</code> la valeur <code>&#91;&#91;1, 2, 3, 10, 100, 1000&#93;, &#91;4, 5, 6, 20, 200, 2000&#93;&#93;</code>

La solution 4 est correcte également, les deux appels à la fonction <code>zip</code> permettent de balayer les deux matrices de la manière souhaitée. Nous verrons ultérieurement des solutions encore plus élégantes, lorsque nous aborderons plus en profondeur les compréhensions en Semaine 4.
[explanation]


<hr/>
Compréhension de listes
=====

On suppose qu'on a dans l'environnement
<pre>
entree = range(10)
</pre>

Parmi les fragments suivants, lesquels sont valides en python ? 

[ ] <code>carres = [ for x in entree: x**2 ]</code>
[x] <code>carres = [ x**2 for x in entree ]</code>
[ ] <code>carres = [ for x in entree: if x % 3 == 0: x**2 ]</code>
[ ] <code>carres = [ x**2 for x in entree: if x % 3 == 0 ]</code>
[x] <code>carres = [ x**2 for x in entree if x % 3 == 0 ]</code>

[explanation]
Les compréhensions ne contiennent jamais de <code>:</code> qui est réservé aux <b>instructions</b> (les compréhensions sont toujours des <b>expressions</b>).
[explanation]


<hr/>
Fonctions
=====

On se donne une fonction <code>est_ou_contient_vide</code> définie arbitrairement comme suit. Dans cet exercice on dit qu'un objet est <em>vide</em> lorsqu'il est considéré comme faux dans un test; en pratique, s'il est <code>None</code> ou <code>False</code> ou <code>0</code> ou une chaîne vide, etc..

<pre>
def est_ou_contient_vide(entree):
    # si entree est vide, on considere que c'est OK
    if not entree:
        # cas #1
        return True
    # sinon on s'attend à ce que entree soit une liste
    # et on regarde si au moins un des elements est vide
    # si c'est le cas, a nouveau, c'est OK
    else:
        for x in entree:
            if not x:
	        # cas #2
                return True
    # si on est encore là c'est que ce n'est pas bon
    return False
</pre>

Parmi les fragments suivants:

<h3>Fragment 1</h3>
<pre>
est_ou_contient_vide([1, [], 3])
</pre>

<h3>Fragment 2</h3>
<pre>
def filtre(liste):
    # on ne garde que les élément représentatifs
    return [x for x in liste if x]
est_ou_contient_vide(filtre([1, [], 3]))
</pre>

<h3>Fragment 3</h3>
<pre>
def assemble(x, y):
    # on calcule un tuple formé de x et y
    z = (x, y)
est_ou_contient_vide(assemble(1, 2))
</pre>

Quels sont ceux qui sont valides et dont la dernière expression renvoie <code>True</code> ? <em><b>Indice:</b> Faites bien attention aux valeurs de retour.</em>

[x] Fragment 1
[ ] Fragment 2
[x] Fragment 3

[explanation]
Le premier appel retourne évidemment <code>True</code>, puisque dans la liste passée en argument à <code>est_ou_contient_vide</code> se trouve un élément qui est la liste vide, qui déclenche le cas #2.

Dans le second appel au contraire; le rôle de la fonction <code>filtre</code> est précisément d'enlever de <code>liste</code> les éléments qui sont vides. C'est donc comme si on appelait en réalité <code>est_ou_contient_vide(&#91;1, 3&#93;)</code>.

Le dernier exemple comporte un piège; la fonction <code>assemble</code> calcule bien un tuple, mais elle le range dans une variable locale <code>z</code> et oublie de le retourner en valeur. Ce qui fait qu'en définitive l'appel à <code>assemble(1, 2)</code> renvoie en fait <code>None</code>, qui est bien considéré comme vide par <code>est_ou_contient_vide</code> (cas #1).
[explanation]
