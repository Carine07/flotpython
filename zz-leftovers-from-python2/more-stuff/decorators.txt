# -*- coding: utf-8 -*-

* decorator : similaire a des macros, c'est a dire à de la generation de code au moment du chargement

* attention - decorator != Decorator tel que défini dans le livre 'Design Patterns' 

* a quoi ca sert : instrumenter des fonctions

dans notre exemple, on a une fonction (iterate_cube) volontairement un peu lente
on voudrait pouvoir facilement calculer le temps passe dans la fonction

voir l'exemple dans dec_func_as_func.py 
 
a retenir:

un decorateur (implemente comme une fonction) est une fonction (time_it_1) qui prend en argument une fonction (iterate_cube_2) et retourne une version modifiée (décorée) de la fonction d'entrée.

====================

de meme que pour les iterateurs, (generateurs?) il est possible d'implementer cette notion de decorator comme une fonction (comme ci-dessus) ou comme une classe, comme on va le voir tout de suite

voir l'exemple dec_func_as_class.py 

cette fois-ci on doit creer une classe avec au moins deux methodes
* __init__ qui 'recoit' la fonction a decorer
* __call__ qui recoit les arguments appeles

====================

on peut egalement modifier de la sorte une classe

l'exemple dec_class_as_func.py montre comment on peut ecrire un decorateur qui ajoute un champ obligatoire 'id' a une classe

====================
Non couvert pour l'instant:
* on pourrait implementer le ddecorateur de classe comme une classe 
* on peut chainer les decorateurs - facile
* on peut passer des arguments aux decorateurs 
  je crois qu'on pourrait avec ca passer au decorateur de classe une liste d'attributs mais je ne sais pas le faire actuellement

* pour en savoir plus (en francais !)
surtout utile si on veut passer des arguments au decorateur lui-meme
http://gillesfabio.com/blog/2010/12/16/python-et-les-decorateurs/

