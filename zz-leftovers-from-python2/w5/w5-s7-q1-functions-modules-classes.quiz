# -*- coding: utf-8 -*-
<hr/>
Quand utiliser fonctions, modules ou classes ?
=====

<h3>Cochez les assertions vraies pour une fonction.</h3>
[x] Permet une factorisation du code
[ ] Permet de créer une boîte à outils
[ ] Permet l'héritage

[explanation]
Une fonction permet de factoriser du code. C'est la plus petite unité de factorisation (par rapport à un module ou une classe) et une fonction est optimisée pour être efficace lors d'un appel. 
[explanation]

<h3>Cochez les assertions vraies pour un module.</h3>
[x] Permet une factorisation du code
[x] Permet de créer une boîte à outils
[x] Ne peut avoir qu'une seule instance par programme
[ ] Peut avoir des instances multiples
[ ] Permet l'héritage

[explanation]
Un module permet à la fois de factoriser du code et de créer une boîte à outils. Un module permet en général de regrouper un ensemble d'outils permettant de résoudre un problème bien défini. Il ne peut exister qu'une seule instance d'un module particulier dans un programme (on rappelle que l'instruction <code>import mod</code> ne charque qu'une seule fois le module <code>mod</code> quelque soit le nombre de fois qu'on fasse l'import.
[explanation]

<h3>Cochez les assertions vraies pour une classe.</h3>
[x] Permet une factorisation du code
[x] Permet de créer une boîte à outils
[ ] Ne peut avoir qu'une seule instance par programme
[x] Peut avoir des instances multiples
[x] Permet l'héritage

[explanation]
Une classe permet de factoriser du code et de créer une boîte à outils, mais elle se différencie d'un module en permettant la création d'instances multiples et la notion d'héritage. 
[explanation]
