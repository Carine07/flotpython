# -*- coding: utf-8 -*-
# -*- eval: (auto-fill-mode 0) -*-

# TITRE SEMAINE 5 : Modules, classes et espaces de nommage

###################################################################

## Vidéo 1 (Modules et espaces de nommage)
NIVEAU: BASIC

W5-S1-AV.txt

## Compléments Vidéo 1

OK Complement-attributs.ipynb
OK Complement-fonctions-globals-et-locals.ipynb

DROPPED
*parler de l'impossibilité de faire __dict__ du module courant
(en particulier du prompt interactif) et expliquer que l'on 
ne peut y accéder que depuis sys.modules[__name__].__dict__
Citer 
http://docs.python.org/2.6/tutorial/classes.html#id2
http://stackoverflow.com/questions/4877290/what-is-the-dict-dict-attribute-of-a-python-class
pareil
je vais laisser tomber tout ça c'est beaucoup trop bas niveau

## Quizz Vidéo 1
OK W5-S1-E1.quiz

en relisant les exos des semaines passées je tombe sur ceci
import string
chaine = string.lowercase
print chaine
on pourrait sûrement contruire un quiz en élaborant là-dessus, non ?

## Exercices Vidéo 1

###################################################################

## Vidéo 2 (Processus d'importation des modules)
NIVEAU: BASIC

W5-S2-AV.txt

## Compléments Vidéo 2

OK Complement-import .ipynb
avancé
. en profiter pour mentionner sys.modules
. parler de sys.builtin_module_names et de, par exemple, math 
et sys, qui sont des modules built-in implémentés en C pour
des questions de vitesse. 

NICETOHAVE
montrer que si bar importe foo et que foo importe sys, alors bar peut accéder à foo.sys

NICETOHAVE W5-S2-C2-pyc.ipynb
intermédiaire
*compléter la
discussion de la video sur les .pyc. Par exemple, on peut directement
distribuer les .pyc sans les .py je suis pas très clair là-dessus, le
pyc ne dépend pas du hardware, d'accord, mais dépend-il de la version
de python (je présume que oui)

DROPPED *exécuter un module comme un script avec  if __name__ == '__main__':
déjà vu en Complement-packages.ipynb

## Quizz Vidéo 2

OK W5-S2-E1.quiz


## Exercices Vidéo 2

###################################################################

## Vidéo 3 (Importation de modules et espace de nommage)
NIVEAU: BASIC

W5-S3-AV.txt

## Compléments Vidéo 3

OK Complement-import-as.ipynb

DROPPED - 
Introduire aussi les variables commençant par _ en expliquant que 
l'on ne doit pas les modifier et qu'elles ne sont pas importée par 
un import * - je laisse tomber puisqu'il ne faut pas le faire de toutes façons

## Quizz Vidéo 3

OK W5-S3-E1.quiz


## Exercices Vidéo 3

###################################################################
# avant d'attaquer les classes je mettrais bien ici un premier enoncé de mini-projet..
# ou alors en fin de cette semaine 
###################################################################

## Vidéo 4 (Classes, instances et méthodes)
NIVEAU: INTERMEDIAIRE

W5-S4-AV.txt

## Compléments Vidéo 4

OK (S4-C1-)Complement-introduction-classes.ipynb

OK (S4-C2-)Complement-module-datetime.ipynb
mentionner datetime vs time()
 
OK (S4-C3-)Complement-record-et-classe.ipynb
je laisse tomber ce lien; je ne suis meme pas sur de tout comprendre la-dedans
https://docs.python.org/2/tutorial/classes.html#odds-and-ends

OK (S4-C4-)Complement-attributs-classe-instance.ipynb
intermédiaire
montrer les attributs de classe et les attributs d'instance sur un exemple
par exemple Matrix2.template pour une mise en forme..
ou trouver mieux
monter qu'on peut faire self.template aussi bien que Matrix2.template

## Quizz Vidéo 4

OK W5-S4-E1.quiz

## Exercices Vidéo 4

###################################################################

## Vidéo 5 (Héritage)
NIVEAU: INTERMEDIAIRE

W5-S5-AV.txt

## Compléments Vidéo 5


OK (S5-C1-)Complement-heritage.ipynb
DROPPED
* peut-être citer / discuter en montrer des exemples
design patterns et le livre de Gamma et al.
OK (S5-C2-)Complement-classes-new-style.ipynb  
OK (S5-C3-)Complement-heritage-multiple.ipynb
OK (S5-C4-)Complement-heritage-typage.ipynb

## Quizz Vidéo 5
batir quelque chose avec des exemples simples de code 
OK W5-S5-E1.quiz

## Exercices Vidéo 5

###################################################################

## Vidéo 6 (Surcharge d'opérateurs)
NIVEAU: INTERMEDIAIRE

W5-S6-AV.txt

## Compléments Vidéo 6

ONGOING (S6-C1-)Complement-surcharge-operateurs-1.ipynb

*Citer ce lien pour toutes les surcharges d'opérateurs. 
http://docs.python.org/2/reference/datamodel.html#special-method-names

Il faut voir au minimum  __getattr__,
illustrer __getattr__ avec un proxy xmlrpc

* parler des fallback 
Itération : __iter__ puis __getitem__
in :  __contains__ puis __iter__ puis __getitem__
Test vrai/faux : __nonzero__ puis __len__ (faux si __len__ retourne 0)
print : __str__ puis __repr__

*parler des optimisations de CPython sur les opérateurs
Plus rapide d'utiliser un opérateur que l'appel direct sur le méthode
>>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "0 in L")
3.1706046182752914
>>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "L.__contains__(0)")
11.681099249275206

## Quizz Vidéo 6

## Exercices Vidéo 6
ONGOING (S6-E1-)Exercice-classes.ipynb

je pense qu'en guise d'exercice je vais leur mitonner un mini-projet 
un truc à base des données de marine (une classe bateau, une classe position, une classe mouvement)
il n'y aurait alors pas de correction en ligne, mais plutôt
. un énoncé où on liste les classes et les modules qu'il faut écrire et les méthodes clé 
. un bout de code qui utilise ces classes pour faire quelque (genre dessiner les positions des bateaux dans matplotlib)
. et un corrigé la semaine suivante

Les etudiants pourraient 
* télécharger le code python qui va avec le notebook de l'exercice
* ecrire leur code a eux sur leur ordi dans les modules specifies
jusqu'a ce que ca donne le resultat escompte



###################################################################

## Vidéo 7 (Quand utiliser fonctions, modules ou classes ?)
NIVEAU: INTERMEDIAIRE

W5-S7-AV.txt

## Compléments Vidéo 7

## Quizz Vidéo 7

## Exercices Vidéo 7


###################################################################

## Vidéo 8 (Assignation et référencement des variables et des attributs)
NIVEAU: INTERMEDIAIRE

W5-S8-AV.txt

## Compléments Vidéo 8
NICETOHAVE: un complement qui explique qu'on n'a pas besoin de 'global' si on code proprement

citer: 
http://www.python.org/dev/peps/pep-0227/
http://docs.python.org/2.7/reference/executionmodel.html 
http://docs.python.org/2.7/tutorial/classes.html#python-scopes-and-namespaces 

*expliquer ce cas
class A:
    a = 42
    b = list(a + i for i in range(10))
>>>
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    class A:
  File "<pyshell#1>", line 3, in A
    b = list(a + i for i in range(10))
  File "<pyshell#1>", line 3, in <genexpr>
    b = list(a + i for i in range(10))
NameError: global name 'a' is not defined

*faire un notebook sur les règles pour ne pas tomber dans les
cas dangereux:
   -ne jamais utiliser comme nom de variable locale
   un nom qui existe en global
   -toujours mettre la directive global avec l'utilisation
   de la variable.
puis montrer quelques exemples d'erreurs quand on ne suit
pas ses règles
1) binding static au scope local pour les fonction uniquement
(optimisation de CPython) et la fameuse UnboundLocalError
var = 0
def func():
    print var
    var = 1
>>> func()

Traceback (most recent call last):
  File "<pyshell#102>", line 1, in <module>
    func()
  File "C:/Users/alegout/Desktop/test2.py", line 25, in func
    print var
UnboundLocalError: local variable 'var' referenced before assignment

x = "x dans module"
def f():
    if False:
        x = "x dans f()"
    print x
f()
>>> 
Traceback (most recent call last):
  File "C:/Users/alegout/Desktop/temp.py", line 6, in <module>
    f()
  File "C:/Users/alegout/Desktop/temp.py", line 5, in f
    print x
UnboundLocalError: local variable 'x' referenced before assignment

2) le bug http://bugs.python.org/issue532860

3) directive global apres l'utilisation de la variable

## Quizz Vidéo 8

## Exercices Vidéo 8

proposer quelques exercices un peu vicieux (avec des imports, des classes, des fonctions
englobantes, etc.)

