# -*- coding: utf-8 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Surcharge d'opérateurs

## Sujet de la vidéo ()

Nous avons vu les notions de classes, d'instances et
d'héritage et nous avons vu que Python permettait de 
manipuler ces notions puissantes avec simplicité et souplesse. 
Il y a une dernière notion clef de la programmation 
objet que nous allons aborder dans cette vidéo : 
la surcharge d'opérateurs. 

Surcharger une méthode en programmation objet, c'est redéfinir
une méthode d'une super-classe dans une sous-classe, de manière
à ce que les instances de cette sous classe utilisent cette
nouvelle méthode puisque qu'elle est plus proche de l'instance
dans l'arbre d'héritage. 

Surcharger un opérateur c'est surcharger une méthode définie
par le langage pour toutes les classes. Ces opérateurs 
ou méthodes on des rôles particulier très puissants qui permettent
de créer nos propres objets utilisant les même mécanismes
que les objets built-in. Par exemple, on peut surcharger 
en Python l'opérateur + ou l'opérateur in. 

Ouvrons un éditeur IDLE pour commencer à jouer avec les opérateurs...

>>>>>>>>>> INCLUDE W5-S6-AV-exo1.py <<<<<<<<<<

## Conclusion ()

Nous avons vu dans cette vidéo la surcharge de l'opérateur __init__,
c'est à dire du constructeur de la classe. Nous avons
vu comment on peut initialiser des instances et comment 
prendre en compte l'héritage dans l'initialisation d'instances.
Nous avons également vu la surcharge de la méthode __str__
qui est appelée automatiquement par l'instruction print. 

Il y a plus de 80 opérateurs que l'on peut surcharger
en Python. On peut, par exemple,  surcharger le comportement 
de l'instruction
[print] ou [in], de la fonction built-in len(), des opérateurs
[+, -, *, /], des opérateurs de comparaisons [<, >, ==, etc.], 
ou de l'accès aux éléments d'une séquence S[i]. 

Vous verrez dans les compléments d'autres exemples et la documentation
Python décrit en détail tous ces opérateurs que l'on peut
surcharger.

[[
print
in
+, - ,*, /
<, >, == , etc.
S[i]
]]
