# -*- coding: utf-8 -*-
<hr/>
Importation et espace de nommage (1)
=====

Quelle variable va être créée dans l'espace de nommage du module courant avec l'import suivant ?
<pre>
import os
</pre>

(x) la variable <code>os</code>
( ) la variable <code>mod.os</code>
( ) la variable <code>import</code>
( ) aucune variable


[explanation]

<code>import os</code> va charger le module <code>os</code> et créer une variable <code>os</code> qui va référencer l'objet module. 

[explanation]


<hr/>
Importation et espace de nommage (2)
=====

Quelle variable va être créée dans l'espace de nommage du module avec l'import suivant ?
<pre>
from os import path
</pre>

( ) la variable <code>os</code>
( ) la variable <code>os.path</code>
(x) la variable <code>path</code>
( ) aucune variable

[explanation]
<code>from os import path</code> va charger le module <code>os.path</code> et va créer une variable <code>path</code> qui va référencer l'objet module. 
[explanation]


<hr/>
Importation et espace de nommage (3)
=====

Supposons que nous avons le code suivant.
Dans un fichier <code>spam.py</code> on a 
<pre>
# fichier spam.py
beans = 1
def f():
    return beans
</pre>

et dans un fichier <code>egg.py</code> on a
<pre>
# fichier egg.py
import spam
from spam import beans
def g(L):
    L.append(spam.beans)
    L.append(beans)
    spam.beans = 2
    L.append(spam.beans)
    L.append(beans)
    L.append(spam.f())
    return L
print g([])
</pre>

On exécute le fichier <code>egg.py</code> en ligne de commande. Qu'imprime le programme ?
( ) <code>[1, 1, 2, 2, 2]</code>
(x) <code>[1, 1, 2, 1, 2]</code>
( ) <code>[1, 1, 2, 2, 1]</code>
( ) <code>[1, 1, 2, 1, 1]</code>

[explanation]
L'instruction <code>import spam</code> va importer le module <code>spam</code> et la variable <code>spam</code> va référencer ce module. <code>spam.beans</code> fait donc référence à la variable <code>beans</code> dans l'espace de nommage de <code>spam</code>. Par contre, <code>from spam import beans</code> importe le module <code>spam</code> et crée une variable <code>beans</code> dans l'espace de nommage du module <code>egg</code>, qui référence l'objet entier <code>1</code>. On a donc une référence partagée sur l'entier <code>1</code> entre la variable <code>beans</code> dans le module <code>spam</code> et la variable <code>beans</code> dans le module <code>egg</code>. 

<code>spam.beans</code> référence donc l'entier <code>1</code>, puis <code>beans</code> référence également l'entier <code>1</code>. L'instruction <code>spam.beans = 2</code> change la variable <code>beans</code> dans l'espace de nommage de <code>spam</code>, mais pas dans l'espace de nommage de <code>egg</code>. Donc <code>spam.beans</code> référence maintenant l'entier <code>2</code>, mais <code>beans</code> référence toujours l'entier <code>1</code>. Pour finir, <code>spam.f()</code> retourne la variable globale <code>beans</code> dans l'espace de nommage de <code>spam</code>, c'est donc maintenant l'entier <code>2</code>. 
[explanation]
