# -*- coding: utf-8 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Quand utiliser fonctions, modules ou classes ?

## Sujet de la vidéo ()

Nous avons vu maintenant tous les principaux objets en Python.
En particulier, nous avons vu trois types d'objets qui permettent
de factoriser du code : les fonctions, les modules et les classes. 
Même s'il s'agit d'objets très différent, il est important de 
clarifier quel est l'usage de chacun de ces objets. 


>>>>>>>>>> INCLUDE W5-S7-AV-slide1.pptx <<<<<<<<<<

On voit donc que ce qui différencie les classes des modules
c'est la possibilité d'avoir de [multiples instances] et l'[héritage]. 

En Python, chaque instance a son propre espace de nommage, donc 
l'intérêt d'avoir des instances multiples et d'avoir des objets
qui vont évoluer indépendamment. C'est, par exemple, le cas des 
listes. Chaque objet liste a son propre état qui évolue indépendamment
des autres objets liste. Le seul moyen de créer des objets
comme les listes et de passer par la création de classes. Donc 
si vous voulez juste une [boite à outils] avec son propre espace 
de nommage, le module est suffisant, mais si vous des créer des [objets
qui évoluent indépendamment], vous devez passer par les classes. 

L'intérêt de l'héritage est de structurer son code en fonction 
de types de comportements qui peuvent être hérité. On peut imaginer
une classe employée qui définit les informations standards pour 
tous les employés (nom, adresses, numéro sécu, etc.) et une 
classe cadre qui hérite de tous les attributs de la classe employé, 
mais qui définit en plus une liste de personnes encadrées. 

Il faut comprendre que la 
programmation objet et l'héritage n'est pas un dogme, mais juste un
outil destiné à vous simplifier la vie. Alors, ne prenez pas cela 
comme une contrainte, mais comme une facilité si un jour vous avez besoin
d'héritage. Il est possible d'écrire de gros programmes sans
héritage, et en aucun cas l'héritage et l'abstraction qu'il impose au travers
de diagrammes de classes ne doit vous compliquer la vie. 

Si vous passez plus de temps à concevoir
des diagrammes de classes qu'à programmer, c'est la garantie qu'au final
vous aurez des diagrammes, mais pas de programme. Commencez toujours par 
programmer, par faire un prototype, par documenter votre code. 
Et ensuite seulement, si ça s'impose à vous, vous pourrez améliorer 
la structure de votre programme en exploitant pleinement les classes 
et l'héritage. 


## Conclusion ()


