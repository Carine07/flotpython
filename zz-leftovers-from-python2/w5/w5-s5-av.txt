# -*- coding: utf-8 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Héritage

## Sujet de la vidéo ()

Nous avons vu jusqu'à maintenant les notions de classes, d'instances, 
et de méthodes. On va voir maintenant un autre concept central en 
programmation objet, l'héritage. Python supporte l'héritage 
et même d'héritage multiple. 
Regardons le fonctionnement de l'héritage...

>>>>>>>>>> INCLUDE W5-S5-AV-slide1.pptx <<<<<<<<<<

On voit donc que l'héritage construit un arbre d'héritage partant
de l'instance et allant jusqu'à la plus haute super classe dans
l'arbre. Lorsque l'on cherche une variable dans une instance ou 
une classe, l'interpréteur va la chercher localement dans l'espace
de nommage de l'objet, et si la variable n'est pas trouvée, elle
est cherchée dans l'espace de nommage des objets le long
de l'arbre d'héritage. Si la variable n'est trouvée dans aucun des 
espaces de nommage le long de l'arbre d'héritage, il y aura une 
exception. 

Ouvrons un éditeur IDLE pour jouer avec l'héritage et les espaces 
de nommage...

>>>>>>>>>> INCLUDE W5-S5-AV-exo1.py <<<<<<<<<<

L'héritage est une notion importante de la programmation objet qui, 
même si vous ne l'utilisez pas directement dans la conception de vos
programme, est nécessaire à la compréhension des librairies et du code
existant. 

## Conclusion ()


