# -*- coding: utf-8 -*-

<hr/>
Portée des variables (1)
=====

Dans quel cas rencontre-t-on une exception <code>UnboundLocalError</code> ?

[ ] si on référence un variable globale depuis  une fonction
[ ] si on affecte dans une fonction une variable déjà définie globalement
[x] si on référence dans une fonction une variable définie en dessous dans la fonction
[ ] si on affecte deux fois une variable locale dans une fonction

[explanation]
L'exception <code>UnboundLocalError</code> ne se produit que si on référence dans une fonction une variable définie en dessous dans la fonction.
[explanation]


<hr/>
Portée des variables (2)
=====

Dans quel cas la variable <code>var</code> est locale à la fonction.

<h3>Proposition 1</h3>
<pre>
var = 'globale'
def f():
    tmp = 'locale'
    return var
</pre>

<h3>Proposition 2</h3>
<pre>
var = 'globale'
def f():
    var = 'locale'
    return var
</pre>

<h3>Proposition 3</h3>
<pre>
var = 'globale'
def f():
    print var
    var = 'locale'
    return var
</pre>


Choisissez une ou plusieurs propositions

[ ] Proposition 1
[x] Proposition 2
[ ] Proposition 3

[explanation]
Dans la proposition 1, la variable <code>var</code> n'est jamais affectée dans la fonction, donc elle n'est pas une variable locale à la fonction, mais une variable globale. 

Dans la proposition 2, la variable <code>var</code> est affectée à la première ligne de la fonction. Elle devient donc locale à la fonction. 

Dans la proposition 3, la variable <code>var</code> est affectée à la deuxième ligne de la fonction, mais après avoir été référencée à la première ligne. Dans ce cas, Python juge qu'il y a une ambiguïté et va lancer une exception particulière qui n'est lancée que dans ce cas précis : <code>UnboundLocalError</code>. Il y a un complément spécifique sur cette erreur qu'il est très important de comprendre. 
[explanation]

<hr/>
Portée des variables (3)
=====

Que va afficher : <code>print f()</code>  ?

<pre>
var = 10
def f():
    var = 20
    def g():
        return var
    return g()
print f()	
</pre>

Choisissez une proposition.

( ) <code>10</code>
(x) <code>20</code>
( ) <code>None</code>
( ) Une exception

[explanation]
Suivant la règle LEG, la valeur de <code>var</code> dans <code>g</code> est <code>20</code>. Comme <code>g</code> retourne la valeur de <code>var</code> et que <code>f</code> retourne la valeur de retour de <code>g</code>, <code>print f()</code> affiche <code>20</code>. 

Si ce résultat vous semble clair et que vous avez déjà lu l'errata de cette vidéo, vous pouvez passer l'explication suivante, sinon, lisez la attentivement.

Cette semaine, nous considérons deux notions de blocs de code : le bloc de code d'un module et le bloc de code d'une fonction (nous verrons en semaine 5 un nouveau bloc de code, celui des classes). 

Une variable est soit affectée, on lui donne alors une valeur qui est l'objet référencé par la variable, soit référencée, on utilise alors la valeur d'une variable précédemment affectée. Regardons maintenant le lien entre ces notions d'affectation et de référencement avec les notions de bloc de code et de scope.  

Une variable qui est affectée dans un bloc de code devient locale à ce bloc. On dit que la variable est locale à la fonction ou au module et par définition, une variable locale à un module est appelée une variable globale. 

En résumé, une variable affectée dans une fonction est locale à la fonction. La valeur de cette variable sera accessible à toutes les instructions dans le bloc de code de cette fonction et à toutes les instructions dans les blocs de code des fonctions définies dans cette fonction. Une variable affectée dans  un module (en dehors d'une fonction) est une variable globale du module. La valeur de cette variable sera accessible à toutes les instructions dans le module, y compris aux instructions dans les blocs de code des fonctions du module. 

On appelle l'accessibilité de la valeur d'une variable le scope (ou la portée) de cette variable. 

Lorsque l'on référence une variable, on va chercher sa valeur suivant la règle LEG. On cherche la variable localement au bloc de code dans lequel elle est référencée, puis, si elle n'est pas définie, dans le bloc de code des fonctions englobantes, puis, si elle n'est toujours pas définie,  dans le bloc de code du module. De manière équivalente, on pourrait dire que la valeur de la variable référencée est celle de la variable locale du même bloc de code, puis de la variable locale des fonctions englobantes, puis de la variable globale. 
[explanation]
