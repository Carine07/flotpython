# -*- coding: utf-8 -*-
<hr/>
Fonctions (1)
=====

Une fonction en python 

( ) doit contenir une instruction <code>return</code> 
( ) peut contenir 0 ou 1 instruction <code>return</code>
(x) peut contenir 0 on n instructions <code>return</code>

[explanation]
Le <code>return</code> est optionnel, si la fonction termine sans avoir rencontré <code>return</code> elle retourne <code>None</code>.

Par ailleurs on peut utiliser autant de <code>return</code> que l'on veut dans une fonction.
[explanation]

<hr/>
Fonctions (2)
=====

Est-il possible pour une fonction de modifier l'objet qui lui est passé en argument ?

(x) Oui, si l'objet est mutable
( ) Oui, on peut modifier tous les objets
( ) Non, une fonction travaille sur une copie et elle ne peut modifier l'objet dans l'espace de l'appelant

[explanation]
Comme les arguments sont passés par référence, les objets de l'appelant, s'ils sont mutables, peuvent être modifiés à l'intérieur de la fonction.
[explanation]

<hr/>
Fonctions (3)
=====

Est-il possible de passer une fonction comme argument d'une fonction lors d'un appel ?

( ) Non, on ne peut pas passer une fonction comme argument
( ) Oui, mais on ne peut passer qu'une fonction <code>lambda</code> comme argument
(x) Oui, on peut passer n'importe quelle fonction comme argument d'une autre fonction

[explanation]
En Python, tout est un objet, vraiment tout, même une fonction. Comme une fonction peut accepter comme argument n'importe quel objet, on peut donc lui passer une fonction.
[explanation]
