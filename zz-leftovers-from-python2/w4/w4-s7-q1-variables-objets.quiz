# -*- coding: utf-8 -*-

<hr/>
Variables et objets (1)
=====

Peut-on modifier une variable globale depuis une fonction ?

[ ] Jamais
[ ] Toujours du moment qu'il y a une affectation dans la fonction
[x] Uniquement si la variable est déclarée globale avec la directive <code>global</code> dans la fonction

[explanation]
Une variable globale ne peut être modifiée depuis une fonction que si elle est déclarée comme <code>global</code> dans la fonction.
[explanation]

<hr/>
Variables et objets (2)
=====

<pre>
x = 1
def f():
    global x
    x = 10
f()
print x
</pre> 


Que va afficher l'exécution de ce code ?

[x] 10
[ ] Une exception
[ ] 1
[ ] x

[explanation]
La directive <code>global</code> permet de modifier la variable <code>x</code> dans le scope global. Si la variable déclarée dans le scope global n'existe pas encore, elle est créée à la première affectation. 
[explanation]


<hr/>
Variables et objets (3)
=====

Dans quel cas la fonction modifie en place <b>l'objet</b> référencé par la variable <code>var</code> ?

<h3>Proposition 1</h3>
<pre>
var = [1, 2]
def f():
    var = 20
f()
</pre> 

<h3>Proposition 2</h3>
<pre>
var = [1, 2]
def f():
    var = [1, 3]
f()
</pre> 

<h3>Proposition 3</h3>
<pre>
var = [1, 2]
def f():
    var.append(3)
f()
</pre> 

<h3>Proposition 4</h3>
<pre>
var = [1, 2]
def f():
    global var
    var = 1
f()
</pre> 

<h3>Proposition 5</h3>
<pre>
var = [1, 2]
def f():
    global var
    var.append(10)
f()
</pre> 

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[ ] Proposition 2
[x] Proposition 3
[ ] Proposition 4
[x] Proposition 5

[explanation]
Ce quiz joue avec les notions de modification d'objets et de références. Une variable référence un objet et l'opération d'affectation permet de changer l'objet référencé par une variable. Par contre, sans changer l'objet référencé par une variable, on peut modifier un objet mutable par effet de bord. Regardons maintenant les différentes propositions. 

La fonction dans la proposition 1 ne modifie pas l'objet puisque la fonction crée une variable locale <code>var</code> distincte de la variable globale <code>var</code>. 

La fonction dans la proposition 2 ne modifie pas non plus l'objet puisqu'ici encore la fonction crée une variable locale <code>var</code> distincte de la variable globale <code>var</code>.

La fonction dans la proposition 3 modifie bien en place l'objet référencé par la variable globale <code>var</code>. En effet, la fonction accède à la variable <code>var</code> qui d'après la règle LEG est la variable globale. Ensuite, la fonction fait un append sur <code>var</code>, elle modifie donc en place l'objet référencé par la variable globale <code>var</code>. 

La fonction dans la proposition 4 ne modifie pas l'objet référencé. C'est le cas le plus subtil. La fonction déclare la variable <code>var</code> comme globale, donc, dans la fonction, on modifie bien la variable globale <code>var</code> en lui affectant l'objet entier 1, mais on ne modifie pas en place l'objet initialement référencé par <code>var</code>.

La fonction dans la proposition 5 modifie bien en place l'objet référencé. Dans ce cas, l'utilisation de la directive <code>global</code> est inutile, mais légal. 
[explanation]
