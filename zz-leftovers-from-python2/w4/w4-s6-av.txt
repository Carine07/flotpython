# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
#
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Portée des variables dans les fonctions : règle LEG

## Résumé de la vidéo (1 minute 20 secondes)

Nous allons voir dans cette vidéo la notion de scope. Le [scope]
définit ce que l'on appelle la [portée des variables], c'est-à-dire
quel morceau de code à accès à quelles variables. En Python le scope
est défini de manière purement textuelle, c'est-à-dire en fonction de
l'endroit dans le code source où une variable est définie. On dit
qu'une variable est [définie] lorsque l'on fait

'une variable = un objet'

On peut également dire qu'une variable
est [affectée] ou [assignée]. En Anglais, vous trouverez le terme
[binding].

On appelle le code qui définit un scope particulier un [bloc de
code]. Nous allons voir dans cette vidéo deux types différents
de blocs de de code. 

Le corps de chaque fonction définit un bloc de code. Ce bloc de code
correspond à ce que l'on appelle le scope local.  Le code dans un
module définit également à un bloc de code qui correspond à ce que
l'on appelle le scope global.

En Python un module est équivalent à un fichier finissant par
.py et contenant, bien sûr, du code Python valide. 

Toutes les variables définies dans un fichier Python, c'est-à-dire
dans un module, appartiennent au scope global, sauf les variables 
définies dans une fonction qui appartiennent au scope local. 

[[
Le scope définit la portée des variables
définie = affectée = assignée 
binding
Bloc de code
]]

Ouvrons un éditeur IDLE pour commencer à jouer avec la
notion de scope. 


>>>>>>>>>> W4-S6-AV-exo1.py <<<<<<<<<< (7 minutes 30)


## conclusion ()
On vient de voir la notion de scope et la règle LEG pour la recherche 
des variables dans les scopes. Dans la prochaine vidéo nous reviendrons
sur la notion de scope global.  
