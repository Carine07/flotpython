# -*- coding: utf-8 -*-

Références partagées (1)
=====

On définit une liste comme étant

<pre>
entier = 0
liste = [entier, entier, entier]
</pre>
après quoi on fait 
<pre>
liste[0] = 1
</pre>

Qu'obtient-on si on imprime <code>liste</code> à ce stade ? : 

( ) <code>[0, 0, 0]</code>
(x) <code>[1, 0, 0]</code>
( ) <code>[1, 1, 1]</code>

[explanation]
<code>liste</code> ne contient pas de référence partagée dans ce scénario, l'affectation de <code>liste&#91;0&#93;</code> ne change pas les deux autres éléments de la liste.
[explanation]

<hr/>
Références partagées (2)
=====
On considère le scénario suivant :

<pre>
cellule = [0]
liste = [cellule, cellule, cellule]
# puis
liste[0][0] = 1
</pre>

Qu'obtient-on comme valeur pour <code>liste</code> ? : 

( ) <code>&#91;&#91;0], [0], [0]]</code>
( ) <code>&#91;&#91;1], [0], [0]]</code>
(x) <code>&#91;&#91;1], [1], [1]]</code>

[explanation]
Cette fois on modifie en place la liste référencée par <code>cellule</code>, qui est partagée par les trois éléments de liste, on est dans le cas d'une référence partagée, la modification affecte les 3 éléments de la liste.
[explanation]

<hr/>
Références partagées (3)
=====

On considère la variante suivante:

<pre>
cellule = [0]
liste = [cellule, cellule, cellule]
# puis
cellule[0] = 1
</pre>

Qu'obtient-on comme valeur pour <code>liste</code> ? : 

( ) <code>&#91;&#91;0], [0], [0]]</code>
( ) <code>&#91;&#91;1], [0], [0]]</code>
(x) <code>&#91;&#91;1], [1], [1]]</code>

[explanation]
À nouveau, on modifie ici en place la liste référencée par <code>cellule</code>, cette situation est exactement identique à celle de l'exercice 2.
[explanation]

<hr/>
Références partagées (4)
=====

On considère enfin la variante suivante:

<pre>
cellule = [0]
liste = [cellule, cellule, cellule]
# puis
cellule = [1]
</pre>

Qu'obtient-on comme valeur pour <code>liste</code> ? : 

(x) <code>&#91;&#91;0], [0], [0]]</code>
( ) <code>&#91;&#91;1], [0], [0]]</code>
( ) <code>&#91;&#91;1], [1], [1]]</code>

[explanation]
Cette fois, on change la valeur de <code>cellule</code>, mais cela n'affecte pas du tout <code>liste</code>.

Si vous avez encore des difficultés avec l'une de ces 4 premières questions, vous pouvez les exécuter telles quelles dans <code>http://pythontutor.com/visualize.html#mode=edit</code> afin de bien décortiquer les mécanismes en jeu.
[explanation]

<hr/>
Les limites de la copie
=====

L'opérateur <code>*</code> sur les listes crée des références partagées, comme on peut le voir ici : 

<pre>
>>> liste = 3 * &#91; &#91;0&#93; &#93;
>>> liste
&#91;&#91;0&#93;, &#91;0&#93;, &#91;0&#93;&#93;
>>> liste&#91;0&#93;&#91;0&#93; = 1
>>> liste
&#91;&#91;1&#93;, &#91;1&#93;, &#91;1&#93;&#93;
</pre>

Comment faire pour éviter que les trois éléments de liste ne soient modifiées ? : 

( ) il faut faire une <em>shallow copy</em>
( ) il faut faire une <em>deep copy</em>
(x) il faut construire la liste autrement

[explanation]
Dans ce cas, une <em>shallow copy</em> ou une <em>deep copy</em> ne sera d'aucune aide, puisque cela va créer un nouvel objet, mais avec la même structure, donc les mêmes références partagées que l'objet original. La seule solution est de construire la liste autrement.

On pourrait faire par exemple, en extension:
<pre>
liste = &#91;&#91;0&#93;, &#91;0&#93;, &#91;0&#93;&#93; 
</pre>

Ou alors avec une boucle <code>for</code>:
<pre>
liste = &#91;&#93;
for i in range(3):
    liste.append(&#91;0&#93;)
</pre>

Ou encore avec une compréhension de liste:
<pre>
liste = &#91;&#91;0&#93; for i in range(3)&#93;
</pre>
[explanation]
