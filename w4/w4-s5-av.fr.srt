1
00:00:04,089 --> 00:00:06,008
Nous avons vu dans une précédente vidéo

2
00:00:06,108 --> 00:00:07,455
la notion de portée de variable

3
00:00:07,555 --> 00:00:09,375
et notamment la règle LEGB

4
00:00:09,475 --> 00:00:10,975
qui permet de trouver

5
00:00:11,075 --> 00:00:12,148
les variables que l'on référence.

6
00:00:13,008 --> 00:00:14,022
Nous avons également vu

7
00:00:14,122 --> 00:00:16,134
qu'une variable définie dans une fonction

8
00:00:16,234 --> 00:00:17,426
est locale à cette fonction.

9
00:00:18,009 --> 00:00:19,619
Dans cette vidéo, nous allons voir comment

10
00:00:19,719 --> 00:00:20,976
modifier la portée des variables

11
00:00:21,076 --> 00:00:24,193
avec les instructions global et nonlocal.

12
00:00:24,293 --> 00:00:25,780
global permet de rendre

13
00:00:25,880 --> 00:00:27,897
une variable locale de portée globale,

14
00:00:27,997 --> 00:00:29,626
et nonlocal permet de rendre

15
00:00:29,726 --> 00:00:32,223
une variable locale de portée locale

16
00:00:32,323 --> 00:00:33,701
dans une fonction englobante.

17
00:00:34,138 --> 00:00:35,994
Ouvrons maintenant un éditeur IDLE

18
00:00:36,094 --> 00:00:36,920
pour commencer à jouer

19
00:00:37,020 --> 00:00:38,281
avec la portée des variables.

20
00:00:39,631 --> 00:00:40,664
Commençons par expliquer

21
00:00:40,764 --> 00:00:42,119
le fonctionnement de global.

22
00:00:42,612 --> 00:00:45,140
Pour cela, je vais créer une variable a

23
00:00:45,909 --> 00:00:48,095
qui vaut 'a globale',

24
00:00:48,195 --> 00:00:49,510
donc c'est une chaîne de caractères,

25
00:00:50,793 --> 00:00:52,792
et je vais créer une fonction f

26
00:00:54,179 --> 00:00:56,448
qui va redéfinir localement la variable a,

27
00:00:56,548 --> 00:00:59,842
qui va dire 'a dans f'

28
00:01:00,689 --> 00:01:03,331
et ensuite qui fait un print de a.

29
00:01:06,488 --> 00:01:09,341
Donc je vais exécuter ce bloc de code,

30
00:01:09,441 --> 00:01:11,236
alors, j'ai une petite erreur de syntaxe

31
00:01:11,336 --> 00:01:12,893
parce que j'ai oublié mon guillemet ici ;

32
00:01:13,588 --> 00:01:15,434
je réexécute mon bloc de code,

33
00:01:16,592 --> 00:01:19,808
et maintenant, je fais un print de a.

34
00:01:20,350 --> 00:01:22,293
Donc je vois que j'ai 'a globale'.

35
00:01:22,844 --> 00:01:24,222
J'exécute ma fonction f,

36
00:01:24,322 --> 00:01:27,397
ma fonction f va définir une variable locale a,

37
00:01:28,025 --> 00:01:29,221
va faire un print de a

38
00:01:29,321 --> 00:01:30,915
que je vais chercher avec la règle LEGB.

39
00:01:31,015 --> 00:01:32,456
Est-ce que a est définie localement ?

40
00:01:32,556 --> 00:01:34,929
Oui, je vais donc afficher ma variable locale

41
00:01:35,029 --> 00:01:36,640
sauf que les variables locales,

42
00:01:36,740 --> 00:01:37,711
lorsque ma fonction retourne,

43
00:01:37,811 --> 00:01:38,364
sont détruites,

44
00:01:38,901 --> 00:01:40,269
et donc elles n'ont aucun impact

45
00:01:40,369 --> 00:01:41,417
sur les variables globales.

46
00:01:41,517 --> 00:01:43,081
Donc j'exécute ma fonction f,

47
00:01:43,181 --> 00:01:46,122
je vois bien que mon print m'affiche 'a dans f'

48
00:01:46,222 --> 00:01:48,970
mais si maintenant, je fais un print de a,

49
00:01:49,485 --> 00:01:51,533
je vois que j'ai toujours mon a globale

50
00:01:51,633 --> 00:01:54,020
qui vaut la chaîne de caractères 'a globale'.

51
00:01:57,700 --> 00:01:59,021
La question qu'on peut se poser maintenant

52
00:01:59,121 --> 00:02:00,809
c'est comment est-ce que je pourrais modifier

53
00:02:00,909 --> 00:02:03,281
une variable globale depuis ma fonction.

54
00:02:03,785 --> 00:02:05,105
Bien pour ça, on peut utiliser

55
00:02:05,205 --> 00:02:06,336
l'instruction global.

56
00:02:06,773 --> 00:02:07,974
Regardons comment cela fonctionne.

57
00:02:08,887 --> 00:02:09,637
Dans ma fonction,

58
00:02:10,535 --> 00:02:14,629
je vais rajouter l'instruction global a

59
00:02:15,238 --> 00:02:16,674
et après mon code reste

60
00:02:16,774 --> 00:02:17,707
exactement le même.

61
00:02:18,510 --> 00:02:19,740
J'exécute ce code,

62
00:02:19,840 --> 00:02:21,424
je l'évalue avec F5,

63
00:02:21,524 --> 00:02:23,319
maintenant, je regarde que vaut a ;

64
00:02:24,709 --> 00:02:26,942
a vaut 'a globale' ;

65
00:02:27,042 --> 00:02:29,068
maintenant, j'exécute f,

66
00:02:29,976 --> 00:02:31,465
je vois bien 'a dans f',

67
00:02:31,565 --> 00:02:33,249
et si maintenant, je fais un print de a

68
00:02:33,349 --> 00:02:34,503
après l'exécution de ma fonction,

69
00:02:35,037 --> 00:02:36,774
je vois que j'ai maintenant 'a dans f'.

70
00:02:36,874 --> 00:02:38,396
Que s'est-il passé exactement ?

71
00:02:39,131 --> 00:02:41,510
Dans ma fonction f, j'ai défini global a.

72
00:02:41,948 --> 00:02:44,279
Lorsque l'interpréteur Python trouve global a,

73
00:02:44,379 --> 00:02:46,036
pour lui, la variable a

74
00:02:46,136 --> 00:02:47,322
qui sera utilisée dans la fonction,

75
00:02:47,422 --> 00:02:48,672
ça n'est plus une variable locale

76
00:02:48,772 --> 00:02:51,154
c'est la variable globale a.

77
00:02:51,663 --> 00:02:52,613
Donc ici, ça n'est même pas

78
00:02:52,713 --> 00:02:53,571
une référence partagée,

79
00:02:53,671 --> 00:02:56,150
j'accède directement à la variable

80
00:02:56,250 --> 00:02:57,235
qui est définie dans le module.

81
00:02:57,335 --> 00:02:59,572
Donc c'est une manière, depuis une fonction,

82
00:02:59,672 --> 00:03:01,859
de modifier des variables globales

83
00:03:01,959 --> 00:03:02,825
directement.

84
00:03:03,464 --> 00:03:06,203
Cependant, cette notation

85
00:03:06,303 --> 00:03:08,132
a un inconvénient qui est majeur.

86
00:03:08,232 --> 00:03:09,868
L'inconvénient, c'est que

87
00:03:09,968 --> 00:03:11,658
lorsque je définis une variable globale

88
00:03:11,758 --> 00:03:12,776
à l'intérieur d'une fonction,

89
00:03:12,876 --> 00:03:15,650
je fais une modification implicite

90
00:03:15,750 --> 00:03:17,312
d'une variable globale,

91
00:03:17,412 --> 00:03:19,200
donc d'une variable définie dans le module.

92
00:03:19,300 --> 00:03:20,541
Or, on sait qu'en Python,

93
00:03:20,641 --> 00:03:22,767
on n'aime pas les modifications implicites.

94
00:03:23,164 --> 00:03:25,251
Regardons comment changer cela,

95
00:03:25,351 --> 00:03:27,104
comment avoir une modification

96
00:03:27,204 --> 00:03:29,288
qui est faite de manière explicite.

97
00:03:29,774 --> 00:03:31,228
Pour illustrer cette modification,

98
00:03:31,328 --> 00:03:32,933
prenons l'exemple suivant.

99
00:03:33,387 --> 00:03:35,218
Maintenant, je vais définir une variable a

100
00:03:36,100 --> 00:03:36,832
qui vaut 10,

101
00:03:37,942 --> 00:03:40,252
une fonction f qui fait global a

102
00:03:40,352 --> 00:03:44,595
et qui va faire a égale a plus 10.

103
00:03:45,851 --> 00:03:46,769
Tout simplement.

104
00:03:48,971 --> 00:03:50,276
J'exécute ce code,

105
00:03:51,651 --> 00:03:52,872
et je regarde maintenant

106
00:03:52,972 --> 00:03:54,319
que vaut ma variable a.

107
00:03:55,158 --> 00:03:57,405
Ma variable a vaut 10,

108
00:03:57,505 --> 00:03:58,298
pas de surprise.

109
00:03:58,398 --> 00:03:59,983
Maintenant, j'appelle ma fonction f.

110
00:04:01,357 --> 00:04:03,957
Ma fonction f définit la variable a

111
00:04:04,057 --> 00:04:05,093
comme étant une variable globale,

112
00:04:05,193 --> 00:04:06,606
je vais donc travailler sur la variable globale,

113
00:04:06,706 --> 00:04:08,580
et je vais faire a égale a plus 10,

114
00:04:08,680 --> 00:04:09,986
a étant la variable globale,

115
00:04:10,086 --> 00:04:10,977
je vais donc lui ajouter 10,

116
00:04:11,077 --> 00:04:12,839
elle va donc valoir 20 en sortie.

117
00:04:12,939 --> 00:04:14,559
Si maintenant, je fais un print de a

118
00:04:14,659 --> 00:04:16,242
je vois que mon a vaut 20.

119
00:04:16,342 --> 00:04:17,881
Seulement ce code a tout faux.

120
00:04:17,981 --> 00:04:19,005
Premièrement,

121
00:04:19,105 --> 00:04:21,163
les noms de variable sont très mal choisis,

122
00:04:21,263 --> 00:04:22,822
on voit que c'est très difficile de comprendre

123
00:04:22,922 --> 00:04:23,806
ce que veut faire ce code.

124
00:04:24,081 --> 00:04:24,894
Deuxièmement,

125
00:04:24,994 --> 00:04:26,620
l'accès à ma variable globale

126
00:04:26,720 --> 00:04:27,660
est fait de manière implicite,

127
00:04:27,760 --> 00:04:29,691
et la modification de ma variable globale

128
00:04:29,791 --> 00:04:32,412
est faite de manière implicite également.

129
00:04:32,512 --> 00:04:33,658
Regardons comment est-ce

130
00:04:33,758 --> 00:04:34,980
qu'on écrirait du vrai code

131
00:04:35,706 --> 00:04:37,718
qui manipule explicitement

132
00:04:37,818 --> 00:04:38,767
une variable globale.

133
00:04:39,670 --> 00:04:41,141
On va faire la chose suivante.

134
00:04:42,618 --> 00:04:44,405
Au lieu d'appeler ma variable a,

135
00:04:44,505 --> 00:04:45,466
je vais l'appeler note,

136
00:04:45,566 --> 00:04:47,222
parce que je suis dans un contexte

137
00:04:47,322 --> 00:04:48,130
d'un programme dans lequel

138
00:04:48,230 --> 00:04:49,377
je manipule des notes.

139
00:04:50,094 --> 00:04:50,973
Et puis ensuite,

140
00:04:51,073 --> 00:04:52,333
on voit bien que ma fonction f,

141
00:04:52,433 --> 00:04:53,683
en fait, elle ajoute 10,

142
00:04:53,783 --> 00:04:55,182
donc plutôt que de l'appeler f,

143
00:04:55,282 --> 00:04:57,588
je vais l'appeler add_10

144
00:04:57,688 --> 00:05:00,613
pour rendre explicite le fait qu'elle ajoute 10.

145
00:05:01,243 --> 00:05:02,571
Et ensuite, plutôt que de chercher

146
00:05:02,671 --> 00:05:04,217
ma variable avec la règle LEGB,

147
00:05:04,317 --> 00:05:05,340
je vais la placer explicitement,

148
00:05:05,440 --> 00:05:07,018
je vais passer une note m.

149
00:05:07,657 --> 00:05:09,112
J'enlève global a ;

150
00:05:09,863 --> 00:05:12,184
et maintenant, au lieu de faire

151
00:05:12,284 --> 00:05:14,366
un a égale a plus 10,

152
00:05:14,466 --> 00:05:15,974
je vais simplement faire un return

153
00:05:16,956 --> 00:05:18,436
de a plus 10.

154
00:05:18,536 --> 00:05:19,923
Maintenant, regardons comment

155
00:05:20,023 --> 00:05:21,644
est-ce que je vais appeler cette méthode.

156
00:05:22,530 --> 00:05:23,449
Je sauvegarde,

157
00:05:30,779 --> 00:05:32,104
et j'exécute.

158
00:05:33,432 --> 00:05:36,004
Maintenant, si je veux modifier

159
00:05:36,104 --> 00:05:37,635
ma variable globale note,

160
00:05:37,735 --> 00:05:38,942
je n'ai qu'à écrire

161
00:05:39,042 --> 00:05:46,821
note égale add_10 de note

162
00:05:47,466 --> 00:05:48,577
Je remarque une petite erreur

163
00:05:48,677 --> 00:05:49,231
dans mon code,

164
00:05:49,331 --> 00:05:50,291
ici, j'ai écrit a ;

165
00:05:50,391 --> 00:05:51,486
évidemment, ma variable

166
00:05:51,586 --> 00:05:53,858
que je passe à ma fonction, c'est m.

167
00:05:54,335 --> 00:05:56,922
Je le corrige, je réexécute,

168
00:05:57,022 --> 00:05:58,560
alors, j'efface ce petit morceau,

169
00:05:59,213 --> 00:06:01,274
je réévalue mon code, F5,

170
00:06:02,185 --> 00:06:03,528
et maintenant, j'écris

171
00:06:03,628 --> 00:06:08,196
note égale add_10 de note.

172
00:06:08,899 --> 00:06:10,852
Regardons ce que dit cette notation.

173
00:06:10,952 --> 00:06:11,965
Cette notation dit:

174
00:06:12,065 --> 00:06:13,983
je prends ma variable globale note

175
00:06:14,083 --> 00:06:15,420
et je lui affecte un retour de fonction ;

176
00:06:16,333 --> 00:06:17,858
ma fonction s'appelle add_10

177
00:06:17,958 --> 00:06:19,894
et elle prend comme argument note.

178
00:06:20,413 --> 00:06:22,688
Donc là, on voit de manière très explicite

179
00:06:22,788 --> 00:06:24,205
que note maintenant va valoir

180
00:06:24,305 --> 00:06:26,448
le résultat de add_10 sur note.

181
00:06:26,548 --> 00:06:27,895
J'exécute ce morceau de code,

182
00:06:28,493 --> 00:06:30,623
je regarde le résultat de note en sortie,

183
00:06:30,723 --> 00:06:32,774
et je vois maintenant qu'il vaut 20.

184
00:06:33,284 --> 00:06:35,549
On voit que cette notion de variable globale,

185
00:06:35,649 --> 00:06:38,834
cette notion d'instruction global

186
00:06:38,934 --> 00:06:41,225
est très trompeuse puisqu'elle rend

187
00:06:41,325 --> 00:06:42,889
toutes les modifications implicites,

188
00:06:42,989 --> 00:06:43,956
et qu'il vaut bien mieux

189
00:06:44,056 --> 00:06:45,395
travailler avec des retours de fonction

190
00:06:45,495 --> 00:06:47,661
pour contrôler de manière explicite

191
00:06:47,761 --> 00:06:49,429
le changement de nos variables globales.

192
00:06:51,133 --> 00:06:53,654
Nous venons donc de voir l'instruction global.

193
00:06:54,650 --> 00:06:56,723
D'expérience, je peux vous garantir que

194
00:06:56,823 --> 00:06:57,621
un code dans lequel

195
00:06:57,721 --> 00:06:58,999
on a beaucoup de variables globales

196
00:06:59,099 --> 00:07:00,270
manipulées de cette manière

197
00:07:00,370 --> 00:07:01,526
avec l'instruction global,

198
00:07:01,626 --> 00:07:03,043
est extrêmement difficile

199
00:07:03,143 --> 00:07:04,569
à débugger et à maintenir.

200
00:07:04,669 --> 00:07:07,330
Donc croyez-moi, rendez toujours

201
00:07:07,430 --> 00:07:08,864
vos modifications de variable globale

202
00:07:08,964 --> 00:07:11,006
explicites avec des retours de fonction.

203
00:07:11,450 --> 00:07:12,567
Maintenant, nous allons voir

204
00:07:12,667 --> 00:07:13,679
l'instruction nonlocal.

205
00:07:14,667 --> 00:07:15,930
Pour expliquer son comportement,

206
00:07:16,030 --> 00:07:17,548
je vais implémenter une petite fonction

207
00:07:17,648 --> 00:07:18,667
et comme je l'ai dit

208
00:07:18,767 --> 00:07:19,597
rapidement en introduction,

209
00:07:19,697 --> 00:07:21,495
nonlocal sert à modifier

210
00:07:21,595 --> 00:07:22,970
la portée d'une variable locale

211
00:07:23,070 --> 00:07:26,202
pour accéder à une variable également locale

212
00:07:26,302 --> 00:07:27,471
mais dans une fonction englobante.

213
00:07:27,571 --> 00:07:28,297
Il faut donc que j'écrive

214
00:07:28,397 --> 00:07:29,136
des fonctions englobantes.

215
00:07:29,528 --> 00:07:33,834
Je vais écrire a égale 'a globale',

216
00:07:37,005 --> 00:07:40,266
et ensuite, je vais définir une fonction f

217
00:07:41,963 --> 00:07:46,537
qui définit a égale 'a de f'

218
00:07:47,810 --> 00:07:49,400
et qui va définir une fonction g

219
00:07:52,485 --> 00:07:57,789
qui contient a égale 'a de g'.

220
00:07:58,804 --> 00:08:03,159
Ensuite, je fais un print de a dans g,

221
00:08:04,106 --> 00:08:05,377
j'appelle ma fonction g

222
00:08:05,477 --> 00:08:07,504
pour qu'elle s'exécute depuis la fonction f,

223
00:08:08,846 --> 00:08:11,247
je fais un print de a dans f,

224
00:08:12,748 --> 00:08:14,813
et ensuite j'appelle ma fonction f,

225
00:08:15,522 --> 00:08:17,705
et pour finir, je fais un print de a

226
00:08:18,843 --> 00:08:21,383
pour voir l'état

227
00:08:21,369 --> 00:08:22,579
de ma variable globale en sortie.

228
00:08:22,679 --> 00:08:23,875
J'exécute ce morceau de code.

229
00:08:24,815 --> 00:08:26,690
Et là, sans surprise, comme on l'a vu,

230
00:08:26,790 --> 00:08:29,374
lorsqu'on fait print de a dans la fonction g,

231
00:08:29,474 --> 00:08:30,885
on cherche a localement,

232
00:08:30,985 --> 00:08:31,877
on affiche 'a de g'.

233
00:08:32,451 --> 00:08:35,448
Lorsqu'on fait print de a dans la fonction f,

234
00:08:35,857 --> 00:08:37,913
on cherche a localement à la fonction f,

235
00:08:38,013 --> 00:08:38,895
on voit 'a de f'.

236
00:08:39,356 --> 00:08:41,657
Et lorsque l'on fait print de a dans le module,

237
00:08:41,757 --> 00:08:43,553
on cherche a globalement

238
00:08:43,653 --> 00:08:45,103
et on voit 'a globale'.

239
00:08:45,869 --> 00:08:48,315
Maintenant, je sais comment modifier

240
00:08:48,415 --> 00:08:50,259
la variable globale a depuis f ou g ;

241
00:08:50,359 --> 00:08:52,192
dans f, si j'écrivais global de a,

242
00:08:52,292 --> 00:08:54,021
je modifierais la variable globale ;

243
00:08:54,121 --> 00:08:56,493
et si dans g, j'écrivais global de a,

244
00:08:56,593 --> 00:08:58,788
je modifierais depuis g la variable globale.

245
00:08:59,249 --> 00:09:00,608
La question qu'on peut se poser, c'est

246
00:09:00,708 --> 00:09:02,312
comment est-ce que je peux modifier

247
00:09:02,412 --> 00:09:06,184
la variable locale à f depuis g.

248
00:09:06,478 --> 00:09:08,912
Pour ça, j'ai l'instruction qui s'appelle nonlocal

249
00:09:09,012 --> 00:09:10,175
Regardons comment elle fonctionne.

250
00:09:12,873 --> 00:09:16,279
Dans g, je vais écrire nonlocal de a

251
00:09:16,379 --> 00:09:18,373
et que va dire cette instruction nonlocal ?

252
00:09:18,473 --> 00:09:19,647
Elle va dire que maintenant

253
00:09:19,747 --> 00:09:22,604
ma variable a que je définis dans g

254
00:09:22,704 --> 00:09:24,872
n'est plus une variable locale de g,

255
00:09:24,972 --> 00:09:27,471
c'est la variable locale

256
00:09:27,571 --> 00:09:28,888
qui est définie dans f.

257
00:09:28,988 --> 00:09:31,501
Donc depuis g, je peux directement

258
00:09:31,601 --> 00:09:33,967
modifier la variable locale de f.

259
00:09:34,635 --> 00:09:35,796
Exécutons ce code

260
00:09:35,896 --> 00:09:37,779
et regardons ce qu'il va se passer.

261
00:09:38,327 --> 00:09:39,576
Je vois que lorsque je fais

262
00:09:39,676 --> 00:09:41,268
un print de a depuis g,

263
00:09:41,368 --> 00:09:43,655
je vois apparaître 'a de g' ;

264
00:09:44,285 --> 00:09:47,523
mais dans g, j'ai redéfini ma variable a

265
00:09:48,223 --> 00:09:52,221
a de f vers la chaîne de caractères 'a de g',

266
00:09:52,321 --> 00:09:53,514
donc maintenant, lorsque je fais

267
00:09:53,614 --> 00:09:56,690
un print de a dans f après avoir appelé g,

268
00:09:56,790 --> 00:09:59,901
je vois que a maintenant vaut bien 'a de g'.

269
00:10:00,001 --> 00:10:03,528
Elle a donc été modifiée depuis la fonction g.

270
00:10:03,628 --> 00:10:05,235
Donc nonlocal me permet de modifier

271
00:10:05,335 --> 00:10:07,264
les variables des fonctions englobantes.

272
00:10:08,134 --> 00:10:10,309
Dans cette vidéo, nous avons vu la notion

273
00:10:10,409 --> 00:10:12,005
de modification de portée de variable

274
00:10:12,105 --> 00:10:14,741
avec les instructions global et nonlocal.

275
00:10:15,138 --> 00:10:16,736
Cependant, gardez toujours en tête

276
00:10:16,836 --> 00:10:18,854
que les modifications implicites de variables

277
00:10:19,161 --> 00:10:21,128
représentent une source de confusion

278
00:10:21,228 --> 00:10:22,873
et une difficulté pour maintenir votre code.

279
00:10:23,233 --> 00:10:25,235
Donc réservez ces usages uniquement

280
00:10:25,335 --> 00:10:26,962
pour des applications avancées.

281
00:10:27,217 --> 00:10:28,138
À bientôt !

