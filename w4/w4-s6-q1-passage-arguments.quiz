<hr/>
Passage d'arguments par défaut
=====

Quelles sont les manières correctes de déclarer un argument <code>var</code> par défaut dans une fonction ?

<h3>Proposition 1</h3>
<pre>
def f(a, b, var == 10):
    print(a, b, var)
</pre>

<h3>Proposition 2</h3>
<pre>
def f(a, b, var=10):
    print(a, b, var)
</pre>

<h3>Proposition 3</h3>
<pre>
def f(a, var=10, b):
    print(a, b, var)
</pre>

<h3>Proposition 4</h3>
<pre>
def f(a, var=10, b=30):
    print(a, b, var)
</pre>

<h3>Proposition 5</h3>
<pre>
def f(a, b, var, var=10):
    print(a, b, var)
</pre>

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[x] Proposition 2
[ ] Proposition 3
[x] Proposition 4
[ ] Proposition 5

[explanation]
La proposition 1 est syntaxiquement incorrecte : on doit déclarer un argument par défaut avec le signe <code>=</code> et non <code>==</code>.

La proposition 2 est correcte.

La proposition 3 est incorrecte, les arguments par défaut doivent toujours apparaitre <b>après</b> les arguments ordonnés.

La proposition 4 est correcte puisque dans ce cas, <code>b</code> est également un argument par défaut.

La proposition 5 est incorrecte, on ne peut pas dupliquer un argument dans l'en-tête d'une fonction, ici <code>var</code> est dupliqué. 
[explanation]

<hr/>
<em>Unpacking</em> des arguments
=====

Comment passer les éléments de la liste suivante
<pre>
L = [1, 2, 'a']
</pre>

comme arguments de la fonction
<pre>
def f(a, b, c):
    print(a, b, c)
</pre>

Choisissez une ou plusieurs propositions.

[ ] <code>f(L)</code>
[x] <code>f(L[0], L[1], L[2])</code>
[x] <code>f(*L)</code>


[explanation]
La proposition 1 est incorrecte parce que <code>L</code> correspond à un seul argument alors que <code>f</code> attend 3 arguments.

La proposition 2 est correcte, mais pas pythonique. On passe en effet trois arguments à <code>f</code>, par contre, on découpe la liste <code>L</code> à la main, ce qui est presque toujours le signe d'une mauvaise utilisation de python. 

La proposition 3 est correcte et pythonique. On utilise la notion de <em>unpacking</em> de liste pour automatiquement passer chaque élément de la liste à un argument de la fonction. 
[explanation]

<hr/>
Arguments variables
=====

<pre>
def f(*args):
    print(args)
L = [1, 2, 'a']
</pre>

Sélectionnez tous les appels qui sont valides

[x] f(1, 2)
[x] f('a', 4, 5, 6, 7, [1,2])
[x] f(L)
[x] f(*L)


[explanation]
Tous ces appels sont valides, mais par contre, il faut faire attention à bien comprendre leur signification. La fonction <code>f</code> accepte un nombre variable d'arguments et va mettre tous ces arguments dans un tuple référencé par la variable <code>args</code>. 
Le premier appel va afficher <code>(1, 2)</code>, le deuxième appel <code>('a', 4, 5, 6, 7, &#91;1, 2&#93;)</code>, le troisième appel <code>(&#91;1, 2, 'a'&#93;,)</code> et le dernier appel <code>(1, 2, 'a')</code>
[explanation]
