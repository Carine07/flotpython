<hr/>
Boucle <code>while</code> (1)
=====
Pour quel usage une boucle <code>while</code> est mieux adaptée qu'une boucle <code>for</code> ?

[ ] parcourir une liste
[ ] parcourir un dictionnaire
[x] faire une boucle infinie
[ ] parcourir les lignes d'un fichier

[explanation]
La boucle <code>for</code> est toujours plus adaptée (c'est-à-dire, plus lisible, plus rapide, plus pythonique) que la boucle <code>while</code> pour parcourir un objet itérable. L'usage classique d'une boucle <code>while</code> est la boucle infinie
<pre>
while True:
    une_action
</pre>
[explanation]

<hr/>
Boucle <code>while</code> (2)
=====
<pre>
a = 'disparaitre'
while a:
    a = a[:-1]
    print(a)
</pre>

Combien de tours va faire cette boucle <code>while</code> ?

( ) la boucle <code>while</code> ne va jamais s'arrêter
( ) 1 seul tour 
( ) la boucle <code>while</code> ne va jamais démarrer
(x) 11 tours
( ) 99 tours

[explanation]
À chaque tour, la chaîne de caractères <code>a</code> perd le dernier caractère. Comme <code>a</code> compte 11 caractères au début et que la boucle <code>while</code> va évaluer <code>a</code> à faux lorsque la chaîne sera vide, il y a 11 tours de boucle.
[explanation]

<hr/>
Boucle <code>while</code> (3)
=====

À quoi sert un break dans une boucle <code>while</code> ?

[ ] à sauter un tour
[ ] à arrêter le programme
[x] à sortir de la boucle <code>while</code> juste au dessus du <code>break</code>
[ ] à sortir de toutes les boucles au dessus du <code>break</code>

[explanation]
L'instruction <code>break</code> permet de sortir de la boucle immédiatement au dessus de l'instruction.
[explanation]

