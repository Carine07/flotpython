1
00:00:01,370 --> 00:00:03,370
Parlons maintenant du support Unicode en Python 3

2
00:00:03,570 --> 00:00:06,354
Donc à ce propos je vous fais remarquer que le

3
00:00:06,554 --> 00:00:09,360
support natif d'Unicode n'existe qu'en python 3 et

4
00:00:09,374 --> 00:00:11,477
pas en python 2, c'est une excellente raison de

5
00:00:11,677 --> 00:00:14,504
passer à Python 3. Donc regardons un exemple de

6
00:00:14,704 --> 00:00:16,704
chaîne de caractère en python. Donc je vais écrire

7
00:00:16,904 --> 00:00:23,585
une chaîne de caractères comme par exemple Noël,

8
00:00:23,785 --> 00:00:30,395
été ... non je recommence été, voilà. Donc là j'ai

9
00:00:30,595 --> 00:00:32,212
une chaîne de caractère avec des caractères

10
00:00:32,412 --> 00:00:35,032
accentués avec un ë et des é accents et on voit

11
00:00:35,232 --> 00:00:37,159
que cette chaîne est parfaitement supportée par

12
00:00:37,359 --> 00:00:40,411
Python. Donc lorsque je veux rentrer le caractère

13
00:00:40,611 --> 00:00:42,417
avec mon clavier si j'ai une méthode de saisie par

14
00:00:42,617 --> 00:00:44,547
le clavier pour rentrer mon caractère je peux le

15
00:00:44,747 --> 00:00:45,754
rentrer directement à l'aide du clavier mais je

16
00:00:45,954 --> 00:00:47,892
peux également rentrer le caractère Unicode avec

17
00:00:48,092 --> 00:00:51,306
la notation \u. Donc regardons par exemple un

18
00:00:51,506 --> 00:00:56,424
caractère Unicode "\u03a6" qui est un code qui

19
00:00:56,624 --> 00:00:58,921
correspond à un caractère dans le jeu de

20
00:00:59,121 --> 00:01:01,807
caractères Unicode et je veux obtenir la lettre Phi

21
00:01:02,007 --> 00:01:09,007
Regardons maintenant un 2ème caractère "\u0556"

22
00:01:09,207 --> 00:01:11,462
qui correspond à la lettre arménienne Feh

23
00:01:11,662 --> 00:01:13,464
Exécutons et regardons ce que je vois. Je vois

24
00:01:13,664 --> 00:01:15,577
en fait un rectangle vide à la place de

25
00:01:15,777 --> 00:01:19,324
mon caractère. En fait quel est le problème ici

26
00:01:19,524 --> 00:01:21,653
le problème c'est que j'utilise une police de

27
00:01:21,853 --> 00:01:24,198
caractères qui ne supporte pas ce caractère.

28
00:01:24,398 --> 00:01:25,678
Donc il faut comprendre qu'en fait lorsque l'on parle

29
00:01:25,878 --> 00:01:28,559
d'Unicode, nous avons un jeu de caractères qui

30
00:01:28,759 --> 00:01:30,759
supporte l'intégralité des caractères du monde

31
00:01:30,959 --> 00:01:33,134
mais pour afficher ce caractère sur votre écran

32
00:01:33,334 --> 00:01:35,520
vous avez besoin d'une police de caractères

33
00:01:35,720 --> 00:01:38,419
qui est capable de dessiner un glyphe correspondant

34
00:01:38,619 --> 00:01:40,735
à ce caractère. Donc ici ma police de caractères

35
00:01:40,935 --> 00:01:42,495
ne le supporte pas, par contre j'ai une police de

36
00:01:42,695 --> 00:01:44,225
caractères qui le supporte. Donc pour se faire

37
00:01:44,425 --> 00:01:46,462
je vais aller dans mon interpréteur et je vais prendre

38
00:01:46,662 --> 00:01:48,783
une police qui s'appelle 'DejaVu Sans mono"

39
00:01:48,983 --> 00:01:50,913
C'est une police qui est connu sous Windows

40
00:01:51,113 --> 00:01:53,680
pour supporter un grand nombre de caractères et

41
00:01:53,880 --> 00:01:55,757
donc ici je vois maintenant mon fameux caractère

42
00:01:55,957 --> 00:01:59,137
je remets mon interpréteur en plein écran, mon

43
00:01:59,337 --> 00:02:04,439
fameux caractère 0556 correspond bien maintenant

44
00:02:04,639 --> 00:02:05,797
à la lettre arménienne Feh

45
00:02:05,997 --> 00:02:07,997
Revenons maintenant à la notion

46
00:02:08,385 --> 00:02:10,859
de codage et de décodage, je vous rappelle

47
00:02:11,059 --> 00:02:13,334
que sur votre ordinateur vous avez un flux de bits

48
00:02:13,534 --> 00:02:15,467
que vous pouvez avoir à lire lorsque vous lisez

49
00:02:15,667 --> 00:02:17,467
ce flux de bits, vous devez décoder ce flux de bits

50
00:02:17,667 --> 00:02:20,944
pour obtenir les lettres et de manière inverse

51
00:02:21,144 --> 00:02:23,244
lorsque vous voulez écrire ces lettres

52
00:02:23,444 --> 00:02:25,684
sur un disque dur ou les envoyer sur internet

53
00:02:25,884 --> 00:02:27,070
c'est-à-dire les transformer en flux de bits

54
00:02:27,270 --> 00:02:30,034
vous devez les encoder. En fait cette opération de

55
00:02:30,234 --> 00:02:32,506
décodage et d'encodage a été rendue extrêmement

56
00:02:32,706 --> 00:02:36,368
simple en python. Dès que vous manipulez

57
00:02:36,568 --> 00:02:38,622
des chaînes de caractères en Unicode

58
00:02:38,822 --> 00:02:41,344
vous utilisez le type 'str'. Dès que vous

59
00:02:41,544 --> 00:02:44,775
manipulez des flux de bits vous utilisez le type

60
00:02:44,975 --> 00:02:47,735
bytes et python vous permet de très facilement

61
00:02:47,935 --> 00:02:51,192
passer des chaînes de caractères en bytes et

62
00:02:51,392 --> 00:02:53,392
des bytes aux chaînes de caractères. Regardons un

63
00:02:53,592 --> 00:03:01,742
exemple : s = "un noël en été", j'ai donc une chaîne

64
00:03:01,942 --> 00:03:05,349
de caractères Unicode qui contient des caractères

65
00:03:05,549 --> 00:03:07,482
accentués donc je fais un print() de s, je vois bien

66
00:03:07,682 --> 00:03:10,401
la chaîne de caractères. Maintenant si je veux

67
00:03:10,601 --> 00:03:13,274
encoder ma chaîne de caractère en bytes, j'utilise

68
00:03:13,474 --> 00:03:15,996
une méthode sur les chaînes de

69
00:03:16,200 --> 00:03:22,900
caractères qui est la méthode encode.

70
00:03:23,020 --> 00:03:25,000
Je vais utiliser encode, je vais donner l'encodage que

71
00:03:25,213 --> 00:03:29,231
je veux utf-8, je vous rappelle que par défaut

72
00:03:29,431 --> 00:03:31,607
on utilise toujours utf-8 sauf si on a une très bonne

73
00:03:31,807 --> 00:03:33,601
raison de faire autrement mais en général on a pas

74
00:03:33,801 --> 00:03:35,541
de très bonnes raisons de faire autrement et donc

75
00:03:35,741 --> 00:03:37,991
là je vais obtenir un nouvel objet, remarquez ce

76
00:03:38,191 --> 00:03:40,447
nouvel objet : c'est une chaîne de caractères qui

77
00:03:40,647 --> 00:03:43,285
commence avec un petit b et ensuite qui contient

78
00:03:43,485 --> 00:03:49,039
des caractères particuliers. En fait le type bytes

79
00:03:49,239 --> 00:03:51,265
va contenir uniquement des octets, c'est-à-dire

80
00:03:51,465 --> 00:03:54,612
des octets codés sur 8 bits et python

81
00:03:54,812 --> 00:03:56,812
vous offre la possibilité que lorsque l'octet

82
00:03:57,012 --> 00:03:58,941
représente un caractère ASCII qui a un affichage

83
00:03:59,141 --> 00:04:02,127
sous forme de lettre ou sous forme de chiffre,

84
00:04:02,327 --> 00:04:04,218
il va vous afficher cette lettre ou ce chiffre.

85
00:04:04,418 --> 00:04:06,654
Cependant c'est juste une facilité et python va

86
00:04:06,854 --> 00:04:08,854
bien coder les bytes sous forme d'octet et non

87
00:04:09,054 --> 00:04:11,609
pas sous forme de caractère. Donc maintenant

88
00:04:11,809 --> 00:04:16,010
j'ai ma chaîne de caractères qui a été encodée donc

89
00:04:16,210 --> 00:04:19,441
je vais l'appeler 'en', voici ma chaîne de caractères

90
00:04:19,641 --> 00:04:21,462
je peux maintenant la décoder pour repasser

91
00:04:21,662 --> 00:04:24,755
au type 'str', au type chaîne de caractères Unicode.

92
00:04:24,955 --> 00:04:27,702
Donc je vais faire un decode() et là encore

93
00:04:27,902 --> 00:04:30,184
je vais lui passer le codec que j'utilise

94
00:04:30,384 --> 00:04:37,592
qui est utf-8 ... ... et donc je vais ré-obtenir

95
00:04:37,792 --> 00:04:40,341
chaîne de caractère. Evidemment vous pouvez

96
00:04:40,541 --> 00:04:42,541
utiliser d'autres type d'encodage. Donc regardons

97
00:04:42,741 --> 00:04:44,741
un autre exemple, je reprends ma chaîne de

98
00:04:44,941 --> 00:04:48,156
caractères s et je peux très bien l'encoder en latin1

99
00:04:48,356 --> 00:04:51,050
qui est un autre encodage et de même je pourrais la

100
00:04:51,250 --> 00:04:53,424
décoder en latin1. Ce qui est très important

101
00:04:53,624 --> 00:04:55,823
c'est de ne jamais mélanger les encodages et les

102
00:04:56,023 --> 00:04:58,031
décodages. C'est pour ça qu'on vous recommande

103
00:04:58,231 --> 00:05:00,625
de toujours utiliser utf-8 qui a la caractéristique

104
00:05:00,825 --> 00:05:04,486
importante d'être un encodage qui supporte Unicode

105
00:05:04,686 --> 00:05:07,158
En résumé, les principaux problèmes qui

106
00:05:07,358 --> 00:05:09,490
existent aujourd'hui avec l'encodage et le décodage

107
00:05:09,690 --> 00:05:10,962
ne sont pas liés au jeux de caractères

108
00:05:11,162 --> 00:05:13,053
puisqu'on a Unicode, ils sont quasiment toujours

109
00:05:13,288 --> 00:05:15,415
liés au fait que la personne qui

110
00:05:15,615 --> 00:05:17,701
développe le code ne vous communique pas le bon

111
00:05:17,901 --> 00:05:20,844
encodage utilisé. Par conséquent c'est pour cela

112
00:05:21,044 --> 00:05:23,306
qu'on vous recommande toujours d'utiliser utf-8

113
00:05:23,506 --> 00:05:25,565
de toujours exactement contrôler votre encodage

114
00:05:25,765 --> 00:05:27,245
donc de bien encoder et décoder les chaînes de

115
00:05:27,445 --> 00:05:29,604
caractères et de toujours dire à la personne ou

116
00:05:29,804 --> 00:05:31,804
aux personnes qui vont utiliser votre code

117
00:05:32,004 --> 00:05:33,704
quel type d'encodage vous utilisez.

118
00:05:33,904 --> 00:05:35,904
A bientôt...

