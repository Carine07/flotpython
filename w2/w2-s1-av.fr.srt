1
00:00:01,832 --> 00:00:11,737
...

2
00:00:14,156 --> 00:00:17,465
Bonjour cette semaine nous allons parler des chaînes de caractères et des listes.

3
00:00:17,665 --> 00:00:21,122
Nous en profiterons d'ailleurs lorsque nous parlerons des chaînes de caractères pour vous expliquer

4
00:00:21,322 --> 00:00:25,687
ce que sont les notions de codage-décodage jeux de caractères et Unicode

5
00:00:25,887 --> 00:00:28,580
ce sont des notions fondamentales que vous devez maîtriser

6
00:00:28,780 --> 00:00:30,500
dès que vous manipulez des chaînes de caractères

7
00:00:30,700 --> 00:00:35,535
Ensuite nous parlerons des objets, de séquences dont les chaînes de caractère et les listes font

8
00:00:35,735 --> 00:00:39,490
d'ailleurs partie. Dans la deuxième partie de cette semaine

9
00:00:39,690 --> 00:00:43,690
nous couvrirons un certain nombre de sujets très important pour commencer à faire

10
00:00:43,916 --> 00:00:47,151
pour premier programme. Nous parlerons notamment de test if-else, nous parlerons

11
00:00:47,351 --> 00:00:53,421
de compréhension de listes de fonctions et de modules. Egalement nous ouvrirons la boucle for

12
00:00:53,621 --> 00:00:55,962
nous ferons que des introduction très rapides, notre objectif est de pouvoir

13
00:00:56,162 --> 00:01:01,931
vous permettre dès cette semaine de commencer à écrire de vrais petits programmes.

14
00:01:02,131 --> 00:01:05,888
Dans cette vidéo nous allons parler des notions fondamentales de codage

15
00:01:06,888 --> 00:01:13,353
décodage jeux de caractères et Unicode. Commençons par regarder cette chaîne de caractère

16
00:01:13,553 --> 00:01:16,029
Ici vous voyez une succession de lettres...

17
00:01:16,229 --> 00:01:19,769
et il va sans doute falloir quelques secondes pour être capable d'identifier

18
00:01:19,969 --> 00:01:22,449
que ces lettres forment des mots, que ces mots forment une phrase

19
00:01:22,649 --> 00:01:24,053
la phrase 'je fais un mooc sur Python'

20
00:01:24,253 --> 00:01:27,725
Votre cerveau a fait une opération que l'on appelle une opération de décodage

21
00:01:27,925 --> 00:01:32,118
Il a pris une suite de lettres et il a été capable d'identifier les mots contenus dans ces lettres

22
00:01:32,318 --> 00:01:38,244
En informatique nous n'avons pas des lettres mais nous manipulons des bits, des flux de bits

23
00:01:38,444 --> 00:01:40,475
La question maintenant que l'on peut se poser est...

24
00:01:40,675 --> 00:01:43,889
comment passer d'un flux de bits à la notion de lettre ?

25
00:01:44,089 --> 00:01:48,467
En fait nous faisons en informatique la même opération : une opération de décodage...

26
00:01:48,667 --> 00:01:50,452
Donc en quoi va consister ce décodage ?

27
00:01:50,652 --> 00:01:54,616
Le décodage va consister à définir une convention qui va dire...

28
00:01:54,816 --> 00:01:59,228
'je découpe mon flux de bits en certain blocs... en blocs d'une certaine taille...'

29
00:01:59,428 --> 00:02:00,225
Dans notre exemple nous allons prendre des blocs de 16 bits

30
00:02:00,425 --> 00:02:04,101
c'est ce qu'on appelle d'ailleurs le codage ASCII.

31
00:02:04,346 --> 00:02:07,926
Donc découpons notre flux de bits en blocs 16 bits et

32
00:02:08,126 --> 00:02:12,379
regardons à quel nombre correspond ces blocs de 16 bits. Donc ici

33
00:02:12,579 --> 00:02:18,087
c'est une conversion en nombre décimal pour faciliter l'explication mais en informatique dans un ordinateur

34
00:02:18,287 --> 00:02:24,292
nous restons évidemment en binaire. Donc on voit que le premier bloc de 16 bits correspond au code

35
00:02:24,492 --> 00:02:30,069
au nombre 97... le deuxième au code à 108 etc. 105, 99 et 101. Maintenant que nous avons été

36
00:02:30,269 --> 00:02:35,263
capable de découper notre flux de bits en blocs et qu'on a obtenu un code correspondant à chaque bloc,

37
00:02:35,463 --> 00:02:38,925
il faut être capable de dire à quelle lettre correspond ce code...

38
00:02:39,125 --> 00:02:42,861
Nous utilisons pour cela ce qu'on appelle un jeu de caractères.

39
00:02:43,061 --> 00:02:47,472
Un jeu de caractères est une table qui va donner un code qui correspond à un caractère.

40
00:02:47,672 --> 00:02:52,505
Nous allons prendre le jeu de caractères ASCII et dans le jeu de caractères ASCII

41
00:02:52,705 --> 00:02:58,387
le code 97 va correspondre à la lettre A, le code 108 à la lettre L etc.

42
00:02:58,587 --> 00:03:03,496
Une fois que vous avez ce caractère,un caractère est une notion abstraite.

43
00:03:03,696 --> 00:03:07,188
Ce n'est pas encore un dessin qui vous allez être capable d'afficher sur votre écran.

44
00:03:07,388 --> 00:03:12,284
Pour être capable d'afficher un dessin sur un écran,il faut utiliser pour cela une police de caractères.

45
00:03:12,484 --> 00:03:17,984
Donc ici nous allons représenter les différentes lettres du prénom Alice avec

46
00:03:18,184 --> 00:03:22,859
la police lucida calligraphy gras. Donc en fait, la police de caractères va...

47
00:03:23,059 --> 00:03:27,270
définir un glyphe... un glyphe c'est en fait là le dessin...

48
00:03:27,470 --> 00:03:30,394
qui va correspondre à chaque caractère que l'on veut afficher.

49
00:03:30,594 --> 00:03:36,878
En résumé, lorsque l'on lit un contenu sur Internet ou alors sur un disque dur

50
00:03:37,078 --> 00:03:42,118
nous avons un flux de bits et nous avons donc des opérations de décodage pour obtenir les caractères

51
00:03:42,318 --> 00:03:44,890
et de manière inverse  lorsque l'on veut écrire quelque chose sur un disque dur

52
00:03:45,090 --> 00:03:46,700
ou envoyer des données sur Internet...

53
00:03:46,900 --> 00:03:52,282
nous allons faire une opération de codage pour re-transformer nos lettres en flux de bits.

54
00:03:52,482 --> 00:03:56,309
Cependant vous avez peut-être remarqué un problème avec notre codage

55
00:03:56,509 --> 00:03:58,760
nous avons utilisez un codage ASCII qui est sur 16 bits.

56
00:03:58,960 --> 00:04:03,421
Or sur 16 bits vous ne pouvez coder que 128 caractères différents.

57
00:04:03,621 --> 00:04:07,874
Nous voyons bien que nous ne pouvons pas coder tous les caractères du monde sur simplement

58
00:04:08,074 --> 00:04:12,524
128 caractères. Nous devons donc utiliser des codages, des codages qu'on appelle étendus.

59
00:04:12,724 --> 00:04:17,010
Donc, il existe des codages ASCII étendus qui sont codés sur 8 bits.

60
00:04:17,210 --> 00:04:19,872
Sur 8 bits vous pouvez coder 256 caractères

61
00:04:20,072 --> 00:04:24,837
mais encore une fois 256 caractères ce n'est pas suffisant pour coder tous les caractères du monde.

62
00:04:25,037 --> 00:04:30,358
Or pendant des années nous avons utilisé un grand nombre de codage ASCII étendue

63
00:04:30,558 --> 00:04:33,277
et d'autres types de codage qui ont permis par exemple de coder

64
00:04:33,477 --> 00:04:36,801
les caractères utilisés en français ou les caractères utilisés en allemand.

65
00:04:37,001 --> 00:04:43,098
Cependant ces jeux de caractères sont incompatibles et ce qui a produit pendant des années...

66
00:04:43,298 --> 00:04:46,650
les erreurs que vous connaissez sans doute vous recevez des mails avec des caractères bizarres

67
00:04:46,850 --> 00:04:50,515
ou alors vous allez sur internet si vous voyez des caractères bizarres s'afficher

68
00:04:50,715 --> 00:04:55,243
C'est parce que simplement votre ordinateur ne contient pas le jeu de caractères qui a été utilisé

69
00:04:55,443 --> 00:04:57,845
pour encoder le texte publié par quelqu'un.

70
00:04:58,045 --> 00:05:03,557
Pour résoudre ce problème, un projet à été démarré qui s'appelle le projet Unicode.

71
00:05:03,757 --> 00:05:09,270
L'objectif de ce projet est de coder l'intégralité des caractères du monde. Dans Unicode, dans le jeu

72
00:05:09,470 --> 00:05:14,154
de caractères Unicode nous avons actuellement plus de 120000 caractères qui ont été codés. Ainsi en utilisant

73
00:05:14,354 --> 00:05:21,511
Unicode vous avez la certitude de pouvoir coder et décoder l'intégralité des caractères du monde entier.

74
00:05:21,611 --> 00:05:30,032
Unicode utilise différents types de codage qui s'appellent UTF-8, UTF-16 et UTF-32. Sans rentrer dans le détail

75
00:05:30,132 --> 00:05:35,148
de ces encodages sachez qu'ils participent à un compromis entre compacité du codage et...

76
00:05:35,355 --> 00:05:41,089
vitesse de décodage. En pratique nous utilisons très régulièrement le codage UTF-8

77
00:05:41,171 --> 00:05:46,426
qui a la caractéristique importante d'être totalement compatible avec le codage ASCII standard.

78
00:05:46,626 --> 00:05:52,818
La bonne nouvelle avec une école c'est que Python est totalement compatible avec le codage Unicode.

79
00:05:53,018 --> 00:05:58,478
La mauvaise nouvelle c'est que vous devez contrôler votre encodage.

80
00:05:58,678 --> 00:06:03,166
En effet, je vous ai dit qu'il existait maintenant le jeu de caractères Unicode qui couvre tous

81
00:06:03,366 --> 00:06:06,366
les caractères du monde mais il existe encore de nombreux autres jeux de caractères

82
00:06:06,438 --> 00:06:12,229
 utilisés dans d'anciens documents. Si vous ne contrôlez pas finement votre codage et décodage

83
00:06:12,429 --> 00:06:16,296
vous ne pourrez pas dire à Python quel type de jeu de caractères utiliser.

84
00:06:16,496 --> 00:06:20,954
Donc la règle est simple lorsque vous créez des documents ou lorsque vous lisez des documents

85
00:06:21,054 --> 00:06:26,918
utilisez toujours UTF-8 sauf si on vous dit explicitement d'utiliser un autre jeu de caractères.

86
00:06:27,118 --> 00:06:29,118
A bientôt...

