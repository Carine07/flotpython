1
00:00:05,260 --> 00:00:07,156
Un principe fondateur de la programmation

2
00:00:07,256 --> 00:00:09,464
est ce qu'on appelle la factorisation du code.

3
00:00:09,564 --> 00:00:11,517
C'est quoi, la factorisation du code ?

4
00:00:11,617 --> 00:00:13,612
C'est ce qui vous permet de ne pas réécrire

5
00:00:13,712 --> 00:00:15,917
plusieurs fois un code qui fait la même chose.

6
00:00:16,017 --> 00:00:17,811
L'intérêt de ça est évidemment

7
00:00:17,911 --> 00:00:19,243
de faciliter la maintenance

8
00:00:19,343 --> 00:00:21,156
et surtout la qualité de votre code.

9
00:00:21,256 --> 00:00:22,799
Nous allons voir dans cette vidéo

10
00:00:22,899 --> 00:00:24,987
les notions de boucle for et de fonction,

11
00:00:25,087 --> 00:00:26,131
qui sont deux techniques

12
00:00:26,231 --> 00:00:27,345
de factorisation de code.

13
00:00:27,445 --> 00:00:29,331
Ouvrons maintenant un interpréteur Python

14
00:00:29,431 --> 00:00:30,377
pour commencer à jouer avec

15
00:00:30,477 --> 00:00:31,906
les boucles for et les fonctions.

16
00:00:32,855 --> 00:00:33,689
Supposons maintenant

17
00:00:33,789 --> 00:00:36,756
que je veuille simplement afficher à l'écran

18
00:00:36,856 --> 00:00:39,669
les carrés des nombres allant de 0 à 9.

19
00:00:40,209 --> 00:00:46,311
Donc je peux écrire print de 1 au carré,

20
00:00:46,411 --> 00:00:49,937
puis ensuite, je vais rappeler cette instruction

21
00:00:50,037 --> 00:00:52,010
je vais faire print de 2 au carré,

22
00:00:52,110 --> 00:00:55,168
puis ensuite je vais faire print de 3 au carré,

23
00:00:55,268 --> 00:00:57,269
et je peux continuer comme ça longtemps,

24
00:00:57,369 --> 00:00:58,086
vous vous rendez vite compte

25
00:00:58,186 --> 00:00:59,238
que c'est très fastidieux.

26
00:00:59,820 --> 00:01:01,028
En fait, comment est-ce que je peux

27
00:01:01,128 --> 00:01:02,444
automatiser cette tâche ?

28
00:01:02,885 --> 00:01:04,228
Je peux automatiser cette tâche

29
00:01:04,328 --> 00:01:06,104
avec, justement, une boucle for.

30
00:01:06,204 --> 00:01:07,421
L'intérêt de la boucle for

31
00:01:07,521 --> 00:01:09,849
est d'automatiser une tâche qui se répète.

32
00:01:09,949 --> 00:01:11,730
Regardons comment cela fonctionne.

33
00:01:12,329 --> 00:01:14,487
Je vais écrire l'instruction for

34
00:01:14,587 --> 00:01:17,160
et je vais mettre une variable i

35
00:01:17,260 --> 00:01:19,362
et je vais dire qu'elle parcourt un objet,

36
00:01:19,462 --> 00:01:21,659
cet objet s'appelle range de 10.

37
00:01:21,759 --> 00:01:23,043
Nous reviendrons plus tard sur

38
00:01:23,143 --> 00:01:24,878
la signification exacte de cet objet,

39
00:01:24,978 --> 00:01:26,355
pour l'instant, sachez simplement

40
00:01:26,455 --> 00:01:28,447
range de 10 me permet de parcourir

41
00:01:28,547 --> 00:01:31,093
tous les entiers allant de 0 jusqu'à 9.

42
00:01:31,869 --> 00:01:33,533
Et ensuite j'écris un : pour définir

43
00:01:33,633 --> 00:01:34,601
un bloc d'instructions.

44
00:01:34,701 --> 00:01:36,129
Mon bloc d'instructions doit donc

45
00:01:36,229 --> 00:01:38,640
être décalé de 4 caractères vers la droite.

46
00:01:38,740 --> 00:01:41,401
Et ensuite, je vais faire un print de i au carré.

47
00:01:41,974 --> 00:01:44,249
Donc ici je me retrouve avec une boucle for

48
00:01:44,349 --> 00:01:47,510
qui va parcourir tous les entiers de 0 jusqu'à 9

49
00:01:47,610 --> 00:01:49,794
c'est la variable i qui va référencer

50
00:01:49,894 --> 00:01:52,021
chacun de ces entiers à chaque tour de boucle

51
00:01:52,121 --> 00:01:54,064
et mon print de i au carré va m'afficher

52
00:01:54,164 --> 00:01:56,503
le carré de l'entier référencé par i

53
00:01:56,603 --> 00:01:58,527
au moment du tour de boucle.

54
00:01:58,627 --> 00:01:59,808
Regardons ce que j'obtiens:

55
00:01:59,908 --> 00:02:01,846
j'obtiens bien le carré des entiers

56
00:02:01,946 --> 00:02:04,110
allant de 0 jusqu'à 9.

57
00:02:05,012 --> 00:02:06,395
En fait, dans une boucle for,

58
00:02:06,495 --> 00:02:07,357
je peux mettre absolument

59
00:02:07,457 --> 00:02:08,631
n'importe quelle séquence.

60
00:02:08,731 --> 00:02:10,057
Nous verrons plus tard qu'en fait

61
00:02:10,157 --> 00:02:11,496
on peut mettre n'importe quel itérable.

62
00:02:11,596 --> 00:02:13,390
Donc je peux prendre par exemple une liste

63
00:02:13,490 --> 00:02:16,424
qui va contenir une chaîne de caractères 'a',

64
00:02:16,524 --> 00:02:19,702
un float et un booléen,

65
00:02:22,088 --> 00:02:24,761
et donc faire un print de i simplement,

66
00:02:24,861 --> 00:02:26,918
et je vais donc afficher chaque élément

67
00:02:27,018 --> 00:02:28,147
qui est contenu dans ma liste:

68
00:02:28,247 --> 00:02:29,830
la chaîne de caractères 'a',

69
00:02:29,930 --> 00:02:33,724
le float 3.5 et le booléen True.

70
00:02:34,865 --> 00:02:35,859
Maintenant, reprenons

71
00:02:35,959 --> 00:02:36,917
notre exemple du carré.

72
00:02:37,017 --> 00:02:38,750
Supposons que je crée une liste a

73
00:02:38,850 --> 00:02:41,575
qui est égale à 1, 2, 5, 8, 9 ;

74
00:02:43,468 --> 00:02:45,992
et que je veuille faire parcourir

75
00:02:46,092 --> 00:02:48,205
les carrés de ces entiers.

76
00:02:48,305 --> 00:02:50,763
Je vais faire un for i in a :

77
00:02:50,863 --> 00:02:54,786
print de i au carré

78
00:02:55,717 --> 00:02:56,719
Ça fonctionne exactement

79
00:02:56,819 --> 00:02:57,598
comme nous l'avons vu.

80
00:02:57,698 --> 00:02:58,817
Supposons maintenant

81
00:02:58,917 --> 00:03:00,145
que je prenne une deuxième liste b

82
00:03:00,245 --> 00:03:03,408
qui est égale à une autre suite de nombres,

83
00:03:03,508 --> 00:03:07,269
par exemple 3.6, 18, 12 et 25.

84
00:03:07,947 --> 00:03:08,846
Comment est-ce que maintenant

85
00:03:08,946 --> 00:03:10,615
je peux parcourir de nouveau cette liste ?

86
00:03:10,715 --> 00:03:12,109
En fait, je vais refaire une boucle for

87
00:03:12,209 --> 00:03:14,698
for in in b :

88
00:03:14,798 --> 00:03:17,221
print de i au carré

89
00:03:17,321 --> 00:03:19,145
Ça fonctionne exactement

90
00:03:19,245 --> 00:03:19,992
comme précédemment.

91
00:03:20,092 --> 00:03:21,564
Cependant, vous remarquez quelque chose

92
00:03:21,664 --> 00:03:22,923
d'un peu fastidieux,

93
00:03:23,023 --> 00:03:25,196
c'est que j'ai deux fois exactement

94
00:03:25,296 --> 00:03:26,122
la même boucle for.

95
00:03:26,822 --> 00:03:28,359
C'est peu pratique, c'est peu commode

96
00:03:28,459 --> 00:03:30,428
de retaper cette boucle for de multiples fois.

97
00:03:31,000 --> 00:03:32,626
Une manière de factoriser ce code,

98
00:03:32,726 --> 00:03:34,683
c'est d'utiliser ce qu'on appelle une fonction.

99
00:03:34,783 --> 00:03:36,888
Une fonction est un morceau de code

100
00:03:36,988 --> 00:03:38,508
que l'on peut rappeler n'importe quand.

101
00:03:38,608 --> 00:03:39,697
Regardons comment

102
00:03:39,797 --> 00:03:41,639
implémenter une fonction

103
00:03:41,739 --> 00:03:43,466
qui va justement faire cette boucle for.

104
00:03:44,157 --> 00:03:46,144
Je vais définir une fonction f,

105
00:03:48,889 --> 00:03:50,643
alors je vais même l'appeler carré,

106
00:03:50,743 --> 00:03:51,878
puisque c'est une fonction qui va

107
00:03:51,978 --> 00:03:53,075
parcourir les carrés,

108
00:03:53,175 --> 00:03:57,591
et je vais lui passer un argument,

109
00:03:57,691 --> 00:03:59,856
et ensuite je vais définir

110
00:03:59,956 --> 00:04:01,277
dans ma fonction carré

111
00:04:01,377 --> 00:04:02,657
une boucle for:

112
00:04:02,757 --> 00:04:05,430
for i in a :

113
00:04:05,530 --> 00:04:08,786
print de i au carré.

114
00:04:09,215 --> 00:04:11,235
Donc j'ai défini ma fonction carré

115
00:04:11,335 --> 00:04:13,216
et maintenant ma fonction carré

116
00:04:13,316 --> 00:04:15,294
je peux l'appeler directement sur ma liste a

117
00:04:15,394 --> 00:04:18,372
et je peux l'appeler directement sur ma liste b

118
00:04:19,042 --> 00:04:20,313
Comment ça fonctionne ?

119
00:04:20,413 --> 00:04:22,267
En fait, lorsque je définis une fonction,

120
00:04:22,367 --> 00:04:24,000
je définis une fonction avec l'instruction def,

121
00:04:24,100 --> 00:04:26,373
je lui donne ensuite un nom,

122
00:04:26,473 --> 00:04:27,916
dans mon exemple, carré,

123
00:04:28,016 --> 00:04:29,496
je pourrai réutiliser ce nom

124
00:04:29,596 --> 00:04:31,242
à chaque fois que je veux appeler ma fonction

125
00:04:31,342 --> 00:04:32,730
et entre parenthèses,

126
00:04:32,830 --> 00:04:34,744
dans la définition, là où j'écris le def,

127
00:04:34,844 --> 00:04:36,438
je vais définir un argument

128
00:04:36,538 --> 00:04:37,786
et c'est l'argument que je vais être capable

129
00:04:37,886 --> 00:04:38,951
de passer à ma fonction

130
00:04:39,051 --> 00:04:40,263
lorsque je l'appelle.

131
00:04:40,363 --> 00:04:42,216
Donc, lorsque je fais un carré de b,

132
00:04:42,763 --> 00:04:45,032
la liste b est passée à ma fonction,

133
00:04:45,132 --> 00:04:46,058
nous verrons plus tard

134
00:04:46,158 --> 00:04:47,197
que c'est passé par référence

135
00:04:47,297 --> 00:04:48,183
donc je n'ai pas de copie d'objet,

136
00:04:48,283 --> 00:04:48,744
je passe simplement

137
00:04:48,844 --> 00:04:50,764
une référence de cette liste,

138
00:04:51,280 --> 00:04:52,628
et ma fonction carré

139
00:04:52,728 --> 00:04:54,291
va récupérer cette référence

140
00:04:54,391 --> 00:04:55,209
et être capable de faire

141
00:04:55,309 --> 00:04:57,429
un for i in l'objet

142
00:04:57,529 --> 00:04:59,221
qui est passé par référence à ma fonction,

143
00:04:59,321 --> 00:05:00,816
et donc je vais être capable de calculer

144
00:05:00,916 --> 00:05:02,787
le carré de ces entiers.

145
00:05:03,590 --> 00:05:05,868
Revenons sur cette fonction.

146
00:05:08,225 --> 00:05:09,663
En fait, dans une fonction,

147
00:05:11,008 --> 00:05:12,413
on fait très rarement des affichages

148
00:05:12,513 --> 00:05:13,021
avec des print ;

149
00:05:13,121 --> 00:05:15,181
en fait, ce qui est utile dans une fonction

150
00:05:15,281 --> 00:05:16,775
c'est plutôt de faire des retours.

151
00:05:16,875 --> 00:05:18,187
Donc pour faire un retour,

152
00:05:18,287 --> 00:05:22,778
je vais écrire l'instruction return

153
00:05:22,878 --> 00:05:24,727
qui va me retourner le carré des entiers ;

154
00:05:24,827 --> 00:05:26,032
en fait, ce que je voudrais

155
00:05:26,132 --> 00:05:27,766
réellement retourner, c'est une liste

156
00:05:27,866 --> 00:05:29,051
qui contient le carré des entiers.

157
00:05:29,151 --> 00:05:31,343
Donc je vais définir une liste L

158
00:05:31,443 --> 00:05:33,065
qui est une liste vide,

159
00:05:33,165 --> 00:05:35,471
et, à chaque tour de ma boucle,

160
00:05:35,571 --> 00:05:39,815
je vais faire un L.append de i au carré.

161
00:05:43,705 --> 00:05:46,382
Et ensuite, mon instruction return

162
00:05:46,482 --> 00:05:48,293
va être alignée avec la boucle for,

163
00:05:48,393 --> 00:05:49,274
c'est-à-dire que mon return

164
00:05:49,374 --> 00:05:52,376
ne va s'exécuter qu'au moment où

165
00:05:52,476 --> 00:05:55,134
la boucle for a fini de faire tous ses tours.

166
00:05:55,234 --> 00:05:56,536
Reprenons cette fonction,

167
00:05:56,636 --> 00:05:58,475
je définis une fonction de nom carré

168
00:05:58,575 --> 00:06:00,278
qui prend un argument a ;

169
00:06:00,378 --> 00:06:02,388
ensuite ma fonction définit une liste vide

170
00:06:02,488 --> 00:06:03,499
et elle va faire une boucle for

171
00:06:03,599 --> 00:06:04,840
sur chaque élément de a ;

172
00:06:04,940 --> 00:06:06,486
à chaque tour de boucle,

173
00:06:06,586 --> 00:06:08,980
je vais ajouter à ma liste L

174
00:06:09,080 --> 00:06:11,718
le carré de l'élément parcouru sur a,

175
00:06:11,818 --> 00:06:12,742
donc i au carré,

176
00:06:12,842 --> 00:06:13,992
et quand ma boucle a terminé,

177
00:06:14,092 --> 00:06:15,375
je fais un return de L.

178
00:06:17,086 --> 00:06:18,786
Maintenant, je vais réexécuter

179
00:06:18,886 --> 00:06:20,890
ma fonction carré sur b,

180
00:06:20,990 --> 00:06:22,939
et je vais voir que ma fonction maintenant

181
00:06:23,039 --> 00:06:25,849
me retourne un objet liste

182
00:06:25,949 --> 00:06:28,233
qui contient le carré de chaque élément de b

183
00:06:28,333 --> 00:06:30,734
et je peux ensuite affecter ce résultat

184
00:06:30,834 --> 00:06:32,775
à ma variable b

185
00:06:32,875 --> 00:06:35,277
pour référencer maintenant

186
00:06:35,377 --> 00:06:37,452
la liste des carrés de b.

187
00:06:39,002 --> 00:06:40,764
Nous avons vu dans cette vidéo deux notions

188
00:06:40,864 --> 00:06:42,749
essentielles à l'écriture de programmes

189
00:06:42,849 --> 00:06:44,691
et notamment à la factorisation de code,

190
00:06:44,791 --> 00:06:46,915
la boucle for et les fonctions.

191
00:06:47,015 --> 00:06:49,170
Nous reviendrons bien évidemment en détail

192
00:06:49,270 --> 00:06:50,990
sur ces notions dans de prochaines vidéos,

193
00:06:51,090 --> 00:06:52,882
mais avec ces notions, vous pouvez

194
00:06:52,982 --> 00:06:54,379
dès maintenant commencer à écrire

195
00:06:54,479 --> 00:06:55,665
de vrais petits programmes.

196
00:06:55,765 --> 00:06:56,618
À bientôt !

